{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hacking to the gate! • All posts by \"sublime text\" category",
    "description": "Bipedal Bit's blog",
    "home_page_url": "https://blog.bipedalbit.net",
    "items": [
        {
            "id": "https://blog.bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/",
            "url": "https://blog.bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/",
            "title": "Linux下Sublime的C/C++多文件程序Makefile+清理+执行配置",
            "date_published": "2015-08-16T14:45:46.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; 不自己动手为Sublime配个C&#x2F;C++的通用Makefile脚本吗？不能自动编译链接多文件的编辑器不是好IDE。</p>\n<span id=\"more\"></span>\n<p>&nbsp;&nbsp;&nbsp; 首先我们需要了解几个事实：</p>\n<p>&nbsp;&nbsp;&nbsp; 1.Sublime自带的C&#x2F;C++编译+执行配置使用的是g++编译器，此外这套配置只针对单文件程序。如果要编译多文件，只能采用入口函数所在文件包含需要的源文件而非头文件的方式。比起我们熟悉的几种IDE，这显然无法令人接受。</p>\n<p>&nbsp;&nbsp;&nbsp; 2.Linux下的C&#x2F;C++程序员应该熟悉Makefile，Makefile可以算是一种脚本，执行关键字是一般是make，它可以设计多文件程序的编译+链接过程，生成.o文件和可执行文件。</p>\n<p>&nbsp;&nbsp;&nbsp; 3.Sublime也有默认的Make配置，但是第一，Sublime没有提供通用的C&#x2F;C++的Makefile脚本（自动组织而非每次手动重写），第二点是个小瑕疵，Sublime提供的Make配置只有编译、链接、清理功能，执行程序需要手动。</p>\n<p>&nbsp;&nbsp;&nbsp; 之前重写红黑树最重要的副产品就是一个通用的C&#x2F;C++的Makefile脚本。每次使用基本只需要改改输出的可执行文件名，或者干脆想个默认文件名以后都不改了，gcc&#x2F;g++编译器的选择是自动的，当然也可以手动配置一些编译选项，这个自己看脚本注释就好。上干货：</p>\n<pre><code class=\"hljs\">#############################################################\n# Generic Makefile for C/C++ Program\n#\n# License: GPL (General Public License)\n# Author:  whyglinux &lt;whyglinux AT gmail DOT com&gt;\n# Date:    2006/03/04 (version 0.1)\n#          2007/03/24 (version 0.2)\n#          2007/04/09 (version 0.3)\n#          2007/06/26 (version 0.4)\n#          2008/04/05 (version 0.5)\n#\n# Description:\n# ------------\n# This is an easily customizable makefile template. The purpose is to\n# provide an instant building environment for C/C++ programs.\n#\n# It searches all the C/C++ source files in the specified directories,\n# makes dependencies, compiles and links to form an executable.\n#\n# Besides its default ability to build C/C++ programs which use only\n# standard C/C++ libraries, you can customize the Makefile to build\n# those using other libraries. Once done, without any changes you can\n# then build programs using the same or less libraries, even if source\n# files are renamed, added or removed. Therefore, it is particularly\n# convenient to use it to build codes for experimental or study use.\n#\n# GNU make is expected to use the Makefile. Other versions of makes\n# may or may not work.\n#\n# Usage:\n# ------\n# 1. Copy the Makefile to your program directory.\n# 2. Customize in the &quot;Customizable Section&quot; only if necessary:\n#    * to use non-standard C/C++ libraries, set pre-processor or compiler\n#      options to &lt;MY_CFLAGS&gt; and linker ones to &lt;MY_LIBS&gt;\n#      (See Makefile.gtk+-2.0 for an example)\n#    * to search sources in more directories, set to &lt;SRCDIRS&gt;\n#    * to specify your favorite program name, set to &lt;PROGRAM&gt;\n# 3. Type make to start building your program.\n#\n# Make Target:\n# ------------\n# The Makefile provides the following targets to make:\n#   $ make           compile and link\n#   $ make NODEP=yes compile and link without generating dependencies\n#   $ make objs      compile only (no linking)\n#   $ make tags      create tags for Emacs editor\n#   $ make ctags     create ctags for VI editor\n#   $ make clean     clean objects and the executable file\n#   $ make distclean clean objects, the executable and dependencies\n#   $ make help      get the usage of the makefile\n#\n#===========================================================================\n\n## Customizable Section: adapt those variables to suit your program.\n##==========================================================================\n\n# The pre-processor and compiler options.\nMY_CFLAGS =\n\n# The linker options.\nMY_LIBS   =\n\n# The pre-processor options used by the cpp (man cpp for more).\n# CPPFLAGS  = -Wall\n\n# The options used in linking as well as in any direct use of ld.\nLDFLAGS   =\n\n# The directories in which source files reside.\n# If not specified, only the current directory will be serached.\nSRCDIRS   =\n\n# The executable file name.\n# If not specified, current directory name or `a.out&#39; will be used.\nPROGRAM   = test\n\n## Implicit Section: change the following only when necessary.\n##==========================================================================\n\n# The source file types (headers excluded).\n# .c indicates C source files, and others C++ ones.\nSRCEXTS = .c .C .cc .cpp .CPP .c++ .cxx .cp\n\n# The header file types.\nHDREXTS = .h .H .hh .hpp .HPP .h++ .hxx .hp\n\n# The pre-processor and compiler options.\n# Users can override those variables from the command line.\n# CFLAGS  = -g -O2\n# CXXFLAGS= -g -O2\n\n# The C program compiler.\n# CC     = gcc\n\n# The C++ program compiler.\n#CXX    = g++\n\n# Un-comment the following line to compile C programs as C++ ones.\n#CC     = $(CXX)\n\n# The command used to delete file.\n#RM     = rm -f\n\nETAGS = etags\nETAGSFLAGS =\n\nCTAGS = ctags\nCTAGSFLAGS =\n\n## Stable Section: usually no need to be changed. But you can add more.\n##==========================================================================\nSHELL   = /bin/sh\nEMPTY   =\nSPACE   = $(EMPTY) $(EMPTY)\nifeq ($(PROGRAM),)\n  CUR_PATH_NAMES = $(subst /,$(SPACE),$(subst $(SPACE),_,$(CURDIR)))\n  PROGRAM = $(word $(words $(CUR_PATH_NAMES)),$(CUR_PATH_NAMES))\n  ifeq ($(PROGRAM),)\n    PROGRAM = a.out\n  endif\nendif\nifeq ($(SRCDIRS),)\n  SRCDIRS = .\nendif\nSOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))\nHEADERS = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(HDREXTS))))\nSRC_CXX = $(filter-out %.c,$(SOURCES))\nOBJS    = $(addsuffix .o, $(basename $(SOURCES)))\nDEPS    = $(OBJS:.o=.d)\n\n## Define some useful variables.\nDEP_OPT = $(shell if `$(CC) --version | grep &quot;GCC&quot; &gt;/dev/null`; then \\\n                  echo &quot;-MM -MP&quot;; else echo &quot;-M&quot;; fi )\nDEPEND      = $(CC)  $(DEP_OPT)  $(MY_CFLAGS) $(CFLAGS) $(CPPFLAGS)\nDEPEND.d    = $(subst -g ,,$(DEPEND))\nCOMPILE.c   = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) -c\nCOMPILE.cxx = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c\nLINK.c      = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) $(LDFLAGS)\nLINK.cxx    = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)\n\n.PHONY: all objs tags ctags clean distclean help show\n\n# Delete the default suffixes\n.SUFFIXES:\n\nall: $(PROGRAM)\n\n# Rules for creating dependency files (.d).\n#------------------------------------------\n\n%.d:%.c\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.C\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.cc\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.cpp\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.CPP\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.c++\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.cp\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n%.d:%.cxx\n    @echo -n $(dir $&lt;) &gt; $@\n    @$(DEPEND.d) $&lt; &gt;&gt; $@\n\n# Rules for generating object files (.o).\n#----------------------------------------\nobjs:$(OBJS)\n\n%.o:%.c\n    $(COMPILE.c) $&lt; -o $@\n\n%.o:%.C\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.cc\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.cpp\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.CPP\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.c++\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.cp\n    $(COMPILE.cxx) $&lt; -o $@\n\n%.o:%.cxx\n    $(COMPILE.cxx) $&lt; -o $@\n\n# Rules for generating the tags.\n#-------------------------------------\ntags: $(HEADERS) $(SOURCES)\n    $(ETAGS) $(ETAGSFLAGS) $(HEADERS) $(SOURCES)\n\nctags: $(HEADERS) $(SOURCES)\n    $(CTAGS) $(CTAGSFLAGS) $(HEADERS) $(SOURCES)\n\n# Rules for generating the executable.\n#-------------------------------------\n$(PROGRAM):$(OBJS)\nifeq ($(SRC_CXX),)              # C program\n    $(LINK.c)   $(OBJS) $(MY_LIBS) -o $@\n    @echo Type ./$@ to execute the program.\nelse                            # C++ program\n    $(LINK.cxx) $(OBJS) $(MY_LIBS) -o $@\n    @echo Type ./$@ to execute the program.\nendif\n\nifndef NODEP\nifneq ($(DEPS),)\n  sinclude $(DEPS)\nendif\nendif\n\nclean:\n    $(RM) $(OBJS) $(PROGRAM) $(PROGRAM).exe\n\ndistclean: clean\n    $(RM) $(DEPS) TAGS\n\n# Show help.\nhelp:\n    @echo &#39;Generic Makefile for C/C++ Programs (gcmakefile) version 0.5&#39;\n    @echo &#39;Copyright (C) 2007, 2008 whyglinux &lt;whyglinux@hotmail.com&gt;&#39;\n    @echo\n    @echo &#39;Usage: make [TARGET]&#39;\n    @echo &#39;TARGETS:&#39;\n    @echo &#39;  all       (=make) compile and link.&#39;\n    @echo &#39;  NODEP=yes make without generating dependencies.&#39;\n    @echo &#39;  objs      compile only (no linking).&#39;\n    @echo &#39;  tags      create tags for Emacs editor.&#39;\n    @echo &#39;  ctags     create ctags for VI editor.&#39;\n    @echo &#39;  clean     clean objects and the executable file.&#39;\n    @echo &#39;  distclean clean objects, the executable and dependencies.&#39;\n    @echo &#39;  show      show variables (for debug use only).&#39;\n    @echo &#39;  help      print this message.&#39;\n    @echo\n    @echo &#39;Report bugs to &lt;whyglinux AT gmail DOT com&gt;.&#39;\n\n# Show variables (for debug use only.)\nshow:\n    @echo &#39;PROGRAM     :&#39; $(PROGRAM)\n    @echo &#39;SRCDIRS     :&#39; $(SRCDIRS)\n    @echo &#39;HEADERS     :&#39; $(HEADERS)\n    @echo &#39;SOURCES     :&#39; $(SOURCES)\n    @echo &#39;SRC_CXX     :&#39; $(SRC_CXX)\n    @echo &#39;OBJS        :&#39; $(OBJS)\n    @echo &#39;DEPS        :&#39; $(DEPS)\n    @echo &#39;DEPEND      :&#39; $(DEPEND)\n    @echo &#39;COMPILE.c   :&#39; $(COMPILE.c)\n    @echo &#39;COMPILE.cxx :&#39; $(COMPILE.cxx)\n    @echo &#39;link.c      :&#39; $(LINK.c)\n    @echo &#39;link.cxx    :&#39; $(LINK.cxx)\n\n## End of the Makefile ##  Suggestions are welcome  ## All rights reserved ##\n##############################################################\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 感谢whyglinux大大！然后上Sublime的配置C C++ Multiple Files.sublime-build：</p>\n<pre><code class=\"hljs\">&#123;\n    &quot;shell_cmd&quot;: &quot;make&quot;,\n    &quot;file_regex&quot;: &quot;^(..[^:\\n]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,\n    &quot;working_dir&quot;: &quot;$&#123;folder:$&#123;project_path:$&#123;file_path&#125;&#125;&#125;&quot;,\n    &quot;selector&quot;: &quot;source.c, source.cpp&quot;,\n    &quot;syntax&quot;: &quot;Packages/Makefile/Make.build-language&quot;,\n    &quot;keyfiles&quot;: [&quot;Makefile&quot;, &quot;makefile&quot;],\n\n    &quot;variants&quot;:\n    [\n        &#123;\n            &quot;name&quot;: &quot;Clean&quot;,\n            &quot;shell_cmd&quot;: &quot;make clean&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;: &quot;Run&quot;,\n            &quot;shell_cmd&quot;: &quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 你们大可以配成执行时自动弹出终端，这样还能交互。我为了解决Sublime里中文输入法的问题用了gtk2，但是gnome-terminal用的是gtk3，不兼容了。写写控制台程序也不用那么多交互，懒得折腾了，你们随意。</p>\n",
            "tags": [
                "C",
                "sublime",
                "C++",
                "makefile"
            ]
        }
    ]
}