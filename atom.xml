<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.bipedalbit.net</id>
    <title>Hacking to the gate!</title>
    <link href="https://blog.bipedalbit.net" />
    <updated>2025-06-10T12:50:30.000Z</updated>
    <category term="Qt" />
    <category term="signal-slot" />
    <category term="Q_OBJECT" />
    <category term="nginx" />
    <category term="select/poll" />
    <category term="epoll" />
    <category term="ngx_int_t" />
    <category term="rbtree" />
    <category term="C" />
    <category term="static" />
    <category term="内存分布" />
    <category term="sublime" />
    <category term="C++" />
    <category term="makefile" />
    <category term="node.js" />
    <category term="github" />
    <category term="socket.io" />
    <category term="Web请求处理机制" />
    <category term="同步/异步" />
    <category term="阻塞/非阻塞" />
    <category term="事件驱动模型" />
    <category term="BP神经网络" />
    <category term="机器学习" />
    <category term="python" />
    <category term="pybrain" />
    <category term="c++11" />
    <category term="多线程" />
    <category term="ubuntu" />
    <category term="debian" />
    <category term="apt-file" />
    <category term="cin" />
    <category term="cout" />
    <category term="scanf" />
    <category term="printf" />
    <category term="进制转换" />
    <category term="人工神经网络" />
    <category term="人机博弈" />
    <category term="Maxmin" />
    <category term="AlphaBeta" />
    <category term="PVS" />
    <category term="MTD(f)" />
    <category term="位域" />
    <category term="bitset" />
    <category term="vector&amp;lt;bool&amp;gt;" />
    <category term="网络爬虫" />
    <category term="类脑" />
    <category term="codeigniter" />
    <category term="php" />
    <category term="IIS7" />
    <category term="apache" />
    <category term="模拟登录" />
    <category term="proxy" />
    <category term="domain" />
    <category term="DNS" />
    <category term="hexo" />
    <category term="vps" />
    <category term="dropbox" />
    <category term="ffmpeg" />
    <category term="板绘" />
    <category term="sai" />
    <category term="琪露诺" />
    <category term="LLM" />
    <category term="ollama" />
    <category term="open-webui" />
    <category term="oneapi" />
    <category term="mcpserver" />
    <category term="NAS" />
    <category term="minio" />
    <category term="CDN" />
    <category term="waline" />
    <category term="mcpo" />
    <category term="svn" />
    <entry>
        <id>https://blog.bipedalbit.net/2025/06/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE/</id>
        <title>记一次开源项目贡献</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2025/06/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;给open-webui配各种mcp工具时，用了&lt;a href=&#34;https://docs.openwebui.com/openapi-servers/mcp/&#34;&gt;mcpo&lt;/a&gt;来对各种mcp-server做openapi规范的封装（实际上我只是希望用它的鉴权封装，虽然只是个简单的静态Bearer Token）。添加图表绘制工具&lt;a href=&#34;https://github.com/antvis/mcp-server-chart&#34;&gt;mcp-server-chart&lt;/a&gt;时，发现有报错，mcpo服务起不来。翻issue无果后，手痒了，提个pr吧。&lt;/p&gt;
&lt;h1 id=&#34;科普之协作开发&#34;&gt;&lt;a href=&#34;#科普之协作开发&#34; class=&#34;headerlink&#34; title=&#34;科普之协作开发&#34;&gt;&lt;/a&gt;科普之协作开发&lt;/h1&gt;&lt;p&gt;现代协作软件开发场景中，会有多个开发人员在同一个项目中分工迭代软件物料。虽然通常会按模块（横向分工隔离）或版本（纵向分工隔离）的维度做分工，尽量保证协作开发时大家更新的物料不发生重叠，但实际上很难避免冲突。&lt;/p&gt;
&lt;p&gt;协同场景物料版本管理在我可见范围内的主流方案是svn和git。值得注意的是，一些纯客户端项目，和大部分游戏项目，都倾向使用svn做开发版本管理，这凸显了2个版本管理工具的主要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从场景角度看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git擅长针对代码或文本做充分的diff追踪，命令多操作细，主要基于分支做权限管理，开源社区生态好；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;svn则可以对任意资源集做更精简的版本管理，还能做目录级别权限控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从实现角度看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git的版本存储是分布式的，本地也会维护一份增量记录的完整版本历史，对代码、配置和少量文本资源来说，这足够了，但当项目中的多媒体甚至二进制资源文件多起来，磁盘占用会很可怕；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;svn的版本存储是集中式的，本地不保留完整版本历史，每个分支做完整深拷贝冗余存储，所以通常不搞feature分支。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，git是个代码版本管理工具，附带项目资源顺便管管还行，多了很伤；svn是个软件资源版本管理工具，diff追踪不会那么精细，但客户端负担小、资源权限管理细。&lt;/p&gt;
&lt;h1 id=&#34;github开源贡献流程&#34;&gt;&lt;a href=&#34;#github开源贡献流程&#34; class=&#34;headerlink&#34; title=&#34;github开源贡献流程&#34;&gt;&lt;/a&gt;github开源贡献流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;确认issue&lt;/li&gt;
&lt;li&gt;fork&lt;/li&gt;
&lt;li&gt;开发&lt;/li&gt;
&lt;li&gt;提交pr&lt;/li&gt;
&lt;li&gt;review&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;确认issue&#34;&gt;&lt;a href=&#34;#确认issue&#34; class=&#34;headerlink&#34; title=&#34;确认issue&#34;&gt;&lt;/a&gt;确认issue&lt;/h2&gt;&lt;p&gt;开源社区很大，如果一个开源项目足够活跃，那么很有可能项目issue里有人讨论过相同的问题或是相关的问题，开源社区就是容易给项目带来这种类似被动众测的buff。&lt;/p&gt;
&lt;p&gt;翻issue的主要目的有2个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;找分析：用于快速定位问题场景和相关症结，定位坑后能绕就绕，绕不开也方便修。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找解法：如果急着用项目，issue里可能会发现一些没有审完的pr或者野生的release版本或者一些fix代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;确认项目issue里没有合用的问题解法，而自己有解法且愿意做开源贡献时，就可以做下一步了。&lt;/p&gt;
&lt;h2 id=&#34;fork&#34;&gt;&lt;a href=&#34;#fork&#34; class=&#34;headerlink&#34; title=&#34;fork&#34;&gt;&lt;/a&gt;fork&lt;/h2&gt;&lt;p&gt;github的常规开源贡献方式是fork项目到个人空间方便获取完全权限，然后进行分支操作和开发。&lt;/p&gt;
&lt;p&gt;如果你是项目的主创团队成员，也许你有权限直接在当前项目上创建自己的feature分支进行开发。&lt;/p&gt;
&lt;p&gt;例如，要fork mcpo项目可以点击项目github首页的fork按钮，进入&lt;a href=&#34;https://github.com/open-webui/mcpo/fork&#34;&gt;fork发起页面&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;选择fork项目到组织或个人空间，可以修改项目名和项目描述，可以选择是否只fork项目的main分支（github的默认项目主分支）。&lt;/p&gt;
&lt;p&gt;选分支时需要确认当前项目的分支逻辑，确保fork时包含希望合入代码的分支。例如，mcpo项目的主分支是main，开发分支是dev，所有feature分支需要在经过评审后合入dev分支，对dev分支做版本测试，dev分支在合适时机合入main分支并打上版本tag，打包发布对应release版本。&lt;/p&gt;
&lt;h2 id=&#34;开发&#34;&gt;&lt;a href=&#34;#开发&#34; class=&#34;headerlink&#34; title=&#34;开发&#34;&gt;&lt;/a&gt;开发&lt;/h2&gt;&lt;p&gt;还是以这次我给mcpo项目提cr为例。问题背景我在pr的&lt;a href=&#34;https://github.com/open-webui/mcpo/pull/174&#34;&gt;review issue&lt;/a&gt;里有描述，大致上是这样：&lt;/p&gt;
&lt;p&gt;mcpo在给各种mcp-server做openapi规范封装时会自动生成接口文档，而接口文档的入参出参说明的生成需要走以下流程来完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照&lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;MCP（Model Context Protocol）&lt;/a&gt;这个协议，调用mcp server接口（目前有Stdio、SSE、StreamableHTTP三种通信模式），拉取输入、输出schema&lt;/li&gt;
&lt;li&gt;解析输入、输出schema，完成结构化&lt;/li&gt;
&lt;li&gt;根据结构化数据生成接口入参出参说明文档，用于进行接口文档渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我在mcpo的配置文件里包含了&lt;a href=&#34;https://github.com/antvis/mcp-server-chart&#34;&gt;mcp-server-chart&lt;/a&gt;，试图正常启动mcpo服务：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mcpServers&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mcp-server-chart&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;npx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@antv/mcp-server-chart&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发现报错了（捞个issue里的相同报错日志贴上来，懒得复现问题捞日志）：&lt;/p&gt;
&lt;figure class=&#34;highlight coq&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs coq&#34;&gt;ERROR:      + Exception Group Traceback (most recent call last):&lt;br&gt;  |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/.venv/lib/python3.11/site-packages/starlette/routing.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;692&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; lifespan&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;with&lt;/span&gt; self.lifespan_context(app) &lt;span class=&#34;hljs-built_in&#34;&gt;as&lt;/span&gt; maybe_state:&lt;br&gt;  |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/opt/homebrew/Cellar/python@3.11/3.11.10/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;210&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; __aenter__&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;return&lt;/span&gt; await anext(self.gen)&lt;br&gt;  |            &lt;span class=&#34;hljs-type&#34;&gt;^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;  |   File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;104&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; lifespan&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;with&lt;/span&gt; stdio_client(server_params) &lt;span class=&#34;hljs-built_in&#34;&gt;as&lt;/span&gt; (reader, writer):&lt;br&gt;  |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/opt/homebrew/Cellar/python@3.11/3.11.10/Frameworks/Python.framework/Versions/3.11/lib/python3.11/contextlib.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;231&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; __aexit__&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;await&lt;/span&gt; self.gen.athrow(typ, value, traceback)&lt;br&gt;  |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/.venv/lib/python3.11/site-packages/mcp/client/stdio/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;166&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; stdio_client&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;with&lt;/span&gt; (&lt;br&gt;  |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;772&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; __aexit__&lt;br&gt;  |     &lt;span class=&#34;hljs-type&#34;&gt;raise&lt;/span&gt; BaseExceptionGroup(&lt;br&gt;  | &lt;span class=&#34;hljs-type&#34;&gt;ExceptionGroup&lt;/span&gt;: unhandled errors &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; a TaskGroup (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; sub-exception)&lt;br&gt;  +-+---------------- &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ----------------&lt;br&gt;    | &lt;span class=&#34;hljs-type&#34;&gt;Exception&lt;/span&gt; Group Traceback (most recent call last):&lt;br&gt;    |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/.venv/lib/python3.11/site-packages/mcp/client/stdio/__init__.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;173&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; stdio_client&lt;br&gt;    |     &lt;span class=&#34;hljs-type&#34;&gt;yield&lt;/span&gt; read_stream, write_stream&lt;br&gt;    |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;105&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; lifespan&lt;br&gt;    |     &lt;span class=&#34;hljs-type&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;with&lt;/span&gt; ClientSession(reader, writer) &lt;span class=&#34;hljs-built_in&#34;&gt;as&lt;/span&gt; session:&lt;br&gt;    |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/.venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;772&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; __aexit__&lt;br&gt;    |     &lt;span class=&#34;hljs-type&#34;&gt;raise&lt;/span&gt; BaseExceptionGroup(&lt;br&gt;    | &lt;span class=&#34;hljs-type&#34;&gt;ExceptionGroup&lt;/span&gt;: unhandled errors &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; a TaskGroup (&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; sub-exception)&lt;br&gt;    +-+---------------- &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; ----------------&lt;br&gt;      | &lt;span class=&#34;hljs-type&#34;&gt;Traceback&lt;/span&gt; (most recent call last):&lt;br&gt;      |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;107&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; lifespan&lt;br&gt;      |     &lt;span class=&#34;hljs-type&#34;&gt;await&lt;/span&gt; create_dynamic_endpoints(app, api_dependency=api_dependency)&lt;br&gt;      |   &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;43&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; create_dynamic_endpoints&lt;br&gt;      |     &lt;span class=&#34;hljs-type&#34;&gt;form_model_fields&lt;/span&gt; = get_model_fields(&lt;br&gt;      |                         &lt;span class=&#34;hljs-type&#34;&gt;^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;      |   File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/utils/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;182&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; get_model_fields&lt;br&gt;      |     &lt;span class=&#34;hljs-type&#34;&gt;python_type_hint&lt;/span&gt;, pydantic_field_info = _process_schema_property(&lt;br&gt;      |                                             &lt;span class=&#34;hljs-type&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;      |   File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/utils/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;84&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; _process_schema_property&lt;br&gt;      |     &lt;span class=&#34;hljs-type&#34;&gt;type_hint&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;_&lt;/span&gt; = _process_schema_property(&lt;br&gt;      |                    &lt;span class=&#34;hljs-type&#34;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;      |   File&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/Users/ddrag/IdeaProjects/mcpo/src/mcpo/utils/main.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;hljs-number&#34;&gt;70&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; _process_schema_property&lt;br&gt;      |     &lt;span class=&#34;hljs-type&#34;&gt;assert&lt;/span&gt; ref &lt;span class=&#34;hljs-built_in&#34;&gt;in&lt;/span&gt; schema_defs, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Custom field not found&amp;quot;&lt;/span&gt;&lt;br&gt;      |            &lt;span class=&#34;hljs-type&#34;&gt;^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;      | TypeError&lt;/span&gt;: argument of type &amp;#x27;NoneType&amp;#x27; is not iterable&lt;br&gt;      +------------------------------------&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们可以看看这个&lt;code&gt;mcpo/src/mcpo/utils/main.py&lt;/code&gt;里的&lt;code&gt;_process_schema_property()&lt;/code&gt;函数在做什么：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;_process_schema_property&lt;/span&gt;&lt;br&gt;(&lt;br&gt;    _model_cache: &lt;span class=&#34;hljs-type&#34;&gt;Dict&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;Type&lt;/span&gt;],&lt;br&gt;    prop_schema: &lt;span class=&#34;hljs-type&#34;&gt;Dict&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;],&lt;br&gt;    model_name_prefix: &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;,&lt;br&gt;    prop_name: &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;,&lt;br&gt;    is_required: &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt;,&lt;br&gt;    schema_defs: &lt;span class=&#34;hljs-type&#34;&gt;Optional&lt;/span&gt;[&lt;span class=&#34;hljs-type&#34;&gt;Dict&lt;/span&gt;] = &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;,&lt;br&gt;) -&amp;gt; &lt;span class=&#34;hljs-built_in&#34;&gt;tuple&lt;/span&gt;[&lt;span class=&#34;hljs-type&#34;&gt;Union&lt;/span&gt;[&lt;span class=&#34;hljs-type&#34;&gt;Type&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt;, ForwardRef, &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;], FieldInfo]:&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Recursively processes a schema property to determine its Python type hint&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    and Pydantic Field definition.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    Returns:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        A tuple containing (python_type_hint, pydantic_field).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        The pydantic_field contains default value and description.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; prop_schema:&lt;br&gt;        ref = prop_schema[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;]&lt;br&gt;        ref = ref.split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)[-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; ref &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; schema_defs, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Custom field not found&amp;quot;&lt;/span&gt;&lt;br&gt;        prop_schema = schema_defs[ref]&lt;br&gt;&lt;br&gt;    prop_type = prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;)&lt;br&gt;    prop_desc = prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;    default_value = ... &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; is_required &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;)&lt;br&gt;    pydantic_field = Field(default=default_value, description=prop_desc)&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# Handle the case where prop_type is missing but &amp;#x27;anyOf&amp;#x27; key exists&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# In this case, use data type from &amp;#x27;anyOf&amp;#x27; to determine the type hint&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;anyOf&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; prop_schema:&lt;br&gt;        type_hints = []&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i, schema_option &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;enumerate&lt;/span&gt;(prop_schema[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;anyOf&amp;quot;&lt;/span&gt;]):&lt;br&gt;            type_hint, _ = _process_schema_property(&lt;br&gt;                _model_cache,&lt;br&gt;                schema_option,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;model_name_prefix&amp;#125;&lt;/span&gt;_&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;prop_name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;choice_&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;,&lt;br&gt;            )&lt;br&gt;            type_hints.append(type_hint)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Union&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;tuple&lt;/span&gt;(type_hints)], pydantic_field&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# Handle the case where prop_type is a list of types, e.g. [&amp;#x27;string&amp;#x27;, &amp;#x27;number&amp;#x27;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;isinstance&lt;/span&gt;(prop_type, &lt;span class=&#34;hljs-built_in&#34;&gt;list&lt;/span&gt;):&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Create a Union of all the types&lt;/span&gt;&lt;br&gt;        type_hints = []&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; type_option &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; prop_type:&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;# Create a temporary schema with the single type and process it&lt;/span&gt;&lt;br&gt;            temp_schema = &lt;span class=&#34;hljs-built_in&#34;&gt;dict&lt;/span&gt;(prop_schema)&lt;br&gt;            temp_schema[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;] = type_option&lt;br&gt;            type_hint, _ = _process_schema_property(&lt;br&gt;                _model_cache, temp_schema, model_name_prefix, prop_name, &lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;&lt;br&gt;            )&lt;br&gt;            type_hints.append(type_hint)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Return a Union of all possible types&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Union&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;tuple&lt;/span&gt;(type_hints)], pydantic_field&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;:&lt;br&gt;        nested_properties = prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;, &amp;#123;&amp;#125;)&lt;br&gt;        nested_required = prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;required&amp;quot;&lt;/span&gt;, [])&lt;br&gt;        nested_fields = &amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;        nested_model_name = &lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;model_name_prefix&amp;#125;&lt;/span&gt;_&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;prop_name&amp;#125;&lt;/span&gt;_model&amp;quot;&lt;/span&gt;.replace(&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;__&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;br&gt;        ).rstrip(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; nested_model_name &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; _model_cache:&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; _model_cache[nested_model_name], pydantic_field&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; name, schema &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; nested_properties.items():&lt;br&gt;            is_nested_required = name &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; nested_required&lt;br&gt;            nested_type_hint, nested_pydantic_field = _process_schema_property(&lt;br&gt;                _model_cache,&lt;br&gt;                schema,&lt;br&gt;                nested_model_name,&lt;br&gt;                name,&lt;br&gt;                is_nested_required,&lt;br&gt;                schema_defs,&lt;br&gt;            )&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; name_needs_alias(name):&lt;br&gt;                other_names = &lt;span class=&#34;hljs-built_in&#34;&gt;set&lt;/span&gt;().union(nested_properties, nested_fields, _model_cache)&lt;br&gt;                alias_name = generate_alias_name(name, other_names)&lt;br&gt;                aliased_field = Field(&lt;br&gt;                    default=nested_pydantic_field.default,&lt;br&gt;                    description=nested_pydantic_field.description,&lt;br&gt;                    alias=name&lt;br&gt;                )&lt;br&gt;                nested_fields[alias_name] = (nested_type_hint, aliased_field)&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;:&lt;br&gt;                nested_fields[name] = (nested_type_hint, nested_pydantic_field)&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; nested_fields:&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Dict&lt;/span&gt;[&lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;], pydantic_field&lt;br&gt;&lt;br&gt;        NestedModel = create_model(nested_model_name, **nested_fields)&lt;br&gt;        _model_cache[nested_model_name] = NestedModel&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; NestedModel, pydantic_field&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;array&amp;quot;&lt;/span&gt;:&lt;br&gt;        items_schema = prop_schema.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; items_schema:&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;# Default to list of anything if items schema is missing&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt;[&lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;], pydantic_field&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# Recursively determine the type of items in the array&lt;/span&gt;&lt;br&gt;        item_type_hint, _ = _process_schema_property(&lt;br&gt;            _model_cache,&lt;br&gt;            items_schema,&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;f&amp;quot;&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;model_name_prefix&amp;#125;&lt;/span&gt;_&lt;span class=&#34;hljs-subst&#34;&gt;&amp;#123;prop_name&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;,  &lt;span class=&#34;hljs-comment&#34;&gt;# Items aren&amp;#x27;t required at this level,&lt;/span&gt;&lt;br&gt;            schema_defs,&lt;br&gt;        )&lt;br&gt;        list_type_hint = &lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt;[item_type_hint]&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list_type_hint, pydantic_field&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;, pydantic_field&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt;, pydantic_field&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;bool&lt;/span&gt;, pydantic_field&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;float&lt;/span&gt;, pydantic_field&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;elif&lt;/span&gt; prop_type == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;, pydantic_field&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;, pydantic_field&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个可以被递归调用的函数，用来处理schema结构里的递归结构，我们可以对照一个schema的例子来理解，这是我从&lt;a href=&#34;https://github.com/antvis/mcp-server-chart&#34;&gt;mcp-server-chart&lt;/a&gt;项目里捞的&lt;a href=&#34;https://github.com/antvis/mcp-server-chart/blob/3ec6d0893f7c0bbf09b8e6776a75dd92595ce934/__tests__/charts/fishbone-diagram.json&#34;&gt;一个工具的input schema&lt;/a&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;generate_fishbone_diagram&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Generate a fishbone diagram chart to uses a fish skeleton, like structure to display the causes or effects of a core problem, with the problem as the fish head and the causes/effects as the fish bones. It suits problems that can be split into multiple related factors.&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;inputSchema&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://json-schema.org/draft-07/schema#&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;children&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;children&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#/properties/data/properties/children/items&amp;quot;&lt;/span&gt;&lt;br&gt;                  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Data for fishbone diagram chart, such as, &amp;#123; name: &amp;#x27;main topic&amp;#x27;, children: [&amp;#123; name: &amp;#x27;topic 1&amp;#x27;, children: [&amp;#123; name: &amp;#x27;subtopic 1-1&amp;#x27; &amp;#125;] &amp;#125;.&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;theme&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Set the theme for the chart, optional, default is &amp;#x27;default&amp;#x27;.&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;enum&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;academy&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Set the width of chart, default is 600.&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;600&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Set the height of chart, default is 400.&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;400&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们高效点，别浪费时间去理解问题全貌的每个细节，围绕引发报错的地方分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;assert ref in schema_defs, &amp;quot;Custom field not found&amp;quot;&lt;/code&gt;这个断言是针对”$ref”字段的，而这个字段的值长这样：”#&amp;#x2F;properties&amp;#x2F;data&amp;#x2F;properties&amp;#x2F;children&amp;#x2F;items”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;properties -&amp;gt; data -&amp;gt; properties -&amp;gt; children -&amp;gt; items&lt;/code&gt;，这看起来是一条路径，指向这个input schema中的一个节点，而”$ref”就在这个节点内部。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数中，断言前先取了”$ref”字段的最后一节也就是”items”，然后似乎打算在schema根节点上找到这个”items”，如果找不到就无法通过assert，没错我跟你们一样看不懂这操作，但我可以猜测。看起来这个if代码逻辑是假设了一个很窄的场景，很鸵鸟地打算出了问题再说，然而实际上真的遇到了假设之外的情况：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; prop_schema:&lt;br&gt;    ref = prop_schema[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;]&lt;br&gt;    ref = ref.split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)[-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; ref &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; schema_defs, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Custom field not found&amp;quot;&lt;/span&gt;&lt;br&gt;    prop_schema = schema_defs[ref]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;OK，大致搞清了状况，我们看看需要怎么让这个函数在这个场景能正常工作。函数主要包含了一堆ifelse逻辑分支，大致上是利用一个深度优先搜索来遍历schema节点树，完成这棵树的结构化的同时给每个节点分配两个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;python_type_hint：大概是接口文档需要展示的入参出参值类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pydantic_field：是一个pydantic包的”字段”对象，看起来能定义一个字段的默认值、描述、别名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们来看看type_hint和pydantic_field都是怎么来的吧，给大家节省时间快速翻译一下：看起来原作者基本上是把整个schema当做一个有向无环图，有”$ref”时只象征性检查引用schema根节点一级子节点的情况，处理很有限的一种环的场景。深度优先搜索到底，获得每个叶子节点的type，然后往上回溯组合出一些复合类型，比如Dict[str, Dict[str, str]]。至于schema_defs，默认值是&lt;code&gt;Field(default=None, description=&amp;quot;&amp;quot;)&lt;/code&gt;。原来有兜底返回值的啊，那有救了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们挣扎一下看能不能给”$ref”一个很好看的真实字段信息，嗯需要给&lt;code&gt;properties.data.properties.children.items&lt;/code&gt;造出一个复合类型，可是”$ref”造成循环引用了，递归个没完，总会有一个”$ref”拿不到类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;既然这样，就放弃挣扎吧，我们缩小影响面，解决case先。具体case是一个造成循环引用的”$ref”字段”#&amp;#x2F;properties&amp;#x2F;data&amp;#x2F;properties&amp;#x2F;children&amp;#x2F;items”，让我们看看手头还有什么，啊有个&lt;code&gt;model_name_prefix&lt;/code&gt;一眼就是用来记深度优先节点路径的，用来当&lt;code&gt;_model_cache&lt;/code&gt;的key，这个cache里面就放那些字段信息。好说，&lt;code&gt;model_name_prefix&lt;/code&gt;跟”$ref”字段的含义基本等价，可以互相翻译。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debug一下，把断言失败时的”$ref”和&lt;code&gt;model_name_prefix&lt;/code&gt;打印出来看看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“$ref”: “#&amp;#x2F;properties&amp;#x2F;data&amp;#x2F;properties&amp;#x2F;children&amp;#x2F;items”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;model_name_prefix&lt;/code&gt;: “generate_fishbone_diagram_form_model_data_model_children_item_model_children”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;追了下调用链，”generate_fishbone_diagram_form_model”这个前缀是工具名称决定的，跟schema无关，剩下的对应关系其实很明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_model_&lt;/code&gt;对应&lt;code&gt;/properties/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_item&lt;/code&gt;对应&lt;code&gt;/items&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些是函数中的固有字段映射，分别用于处理object类节点和array成员节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们把”$ref”翻译成prefix风格看看，”data_model_children_item”，&lt;code&gt;model_name_prefix&lt;/code&gt;去掉固定前缀是”data_model_children_item_model_children”，足够了，前缀关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解法出来了：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ref.startswith(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#/properties/&amp;quot;&lt;/span&gt;):&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# Remove common prefix in pathes.&lt;/span&gt;&lt;br&gt;    prefix_path = model_name_prefix.split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_form_model_&amp;quot;&lt;/span&gt;)[-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;    ref_path = ref.split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#/properties/&amp;quot;&lt;/span&gt;)[-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# Translate $ref path to model_name_prefix style.&lt;/span&gt;&lt;br&gt;    ref_path = ref_path.replace(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/properties/&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_model_&amp;quot;&lt;/span&gt;)&lt;br&gt;    ref_path = ref_path.replace(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/items&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_item&amp;quot;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# If $ref path is a prefix substring of model_name_prefix path,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# there exists a circular reference.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# The loop should be broke with a return to avoid exception.&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; prefix_path.startswith(ref_path):&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;# &lt;span class=&#34;hljs-doctag&#34;&gt;TODO:&lt;/span&gt; Find the exact type hint for the $ref.&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;, Field(default=&lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;, description=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们给人把注释写清楚，有遗憾的地方也把TODO写好，相信后来人的智慧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be nice，补个单测，跟历史单测风格保持一致（乐，这项目存量单测全是给_process_schema_property函数写的）：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test_ref_to_parent_node&lt;/span&gt;():&lt;br&gt;    schema = &amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;$ref&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;#/properties/data/properties/children/items&amp;#x27;&lt;/span&gt;&amp;#125;&lt;br&gt;    result_type, result_field = _process_schema_property(&lt;br&gt;        _model_cache,&lt;br&gt;        schema,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;generate_fishbone_diagram_form_model_data_model_children_item_model_children&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-literal&#34;&gt;False&lt;/span&gt;,&lt;br&gt;        &amp;#123;&amp;#125;&lt;br&gt;    )&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; result_type == &lt;span class=&#34;hljs-type&#34;&gt;Any&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; result_field.description == &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pytest&lt;/code&gt;自测通过，交代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提交pr&#34;&gt;&lt;a href=&#34;#提交pr&#34; class=&#34;headerlink&#34; title=&#34;提交pr&#34;&gt;&lt;/a&gt;提交pr&lt;/h2&gt;&lt;p&gt;如果你fork了当前项目，github项目主页能看到提pr（Pull Request）的提示，万一没看见，也可以点进”Pull requests”标签页，再点击”New pull request”按钮。&lt;/p&gt;
&lt;p&gt;选择来源仓库、分支和目标仓库、分支后，就可以点击”Create pull request”按钮，自动给你创建一个issue，用来自述你的pr，具体怎么写可以参考仓库里的历史pr issue，我的是这个：&lt;a href=&#34;https://github.com/open-webui/mcpo/pull/174&#34;&gt;#174&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;pr issue里需要说清你解决的问题场景和你的代码对当前项目的影响面，带上自测结果会更让人放心。&lt;/p&gt;
&lt;p&gt;能看到我在自己的fork项目里新建了一个feature分支：&lt;a href=&#34;https://github.com/bipedalBit/mcpo/tree/fix-circular-schema-ref-exception&#34;&gt;fix-circular-schema-ref-exception&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;review&#34;&gt;&lt;a href=&#34;#review&#34; class=&#34;headerlink&#34; title=&#34;review&#34;&gt;&lt;/a&gt;review&lt;/h2&gt;&lt;p&gt;等待你的目标分支的代码评审人评审你的代码，在你的pr review中给出评审意见。&lt;/p&gt;
&lt;p&gt;我的pr评审人是仓库主Tim Jaeryang Baek，很客气，没challenge我，一个thanks后就给我一口气合了dev、main分支，甚至单开了一个release tag装我的pr。&lt;/p&gt;
&lt;p&gt;于是我没有被challenge和返工的流程示例可以展示了┑(￣Д ￣)┍&lt;/p&gt;
&lt;p&gt;close掉的pr issue里会提示代码已合，你可以删掉feature分支和fork项目。&lt;/p&gt;
</content>
        <category term="github" />
        <category term="mcpo" />
        <category term="svn" />
        <updated>2025-06-10T12:50:30.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2025/06/07/%E5%86%8D%E8%B0%88hexo%E9%9D%99%E6%80%81%E7%AB%99%E6%90%AD%E5%BB%BA/</id>
        <title>再谈hexo静态站搭建</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2025/06/07/%E5%86%8D%E8%B0%88hexo%E9%9D%99%E6%80%81%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h1 id=&#34;回顾&#34;&gt;&lt;a href=&#34;#回顾&#34; class=&#34;headerlink&#34; title=&#34;回顾&#34;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;不是头一次谈hexo静态站搭建了，2016年就写了相关的博客，非常耐心事无巨细地介绍过&lt;a href=&#34;https://bipedalbit.net/2016/04/24/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/&#34;&gt;当时的搭建方案&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;紧接着开了自己的VPS，于是又写文介绍了&lt;a href=&#34;https://bipedalbit.net/2016/04/25/%E5%88%A9%E7%94%A8Dropbox%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E7%9A%84%E9%9D%99%E6%80%81%E7%AB%99/&#34;&gt;迭代方案&lt;/a&gt;，在VPS上做了镜像站部署，用dropbox做静态资源同步。现在由于国内不搭梯子访问github已经不稳定，VPS上的静态站反而成了主站，github pages上那个站成替身了哈哈。&lt;/p&gt;
&lt;h1 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;新的静态站其实主要更新了3个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主题：landscape-plus &amp;#x3D;&amp;gt; fluid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图床：七牛 &amp;#x3D;&amp;gt; 自建minio+cdn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;评论插件：多说 &amp;#x3D;&amp;gt; 自建waline&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hexo&#34;&gt;&lt;a href=&#34;#hexo&#34; class=&#34;headerlink&#34; title=&#34;hexo&#34;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;p&gt;很幸运，在旧笔记本上居然翻到了完整未损坏的当年的hexo项目目录，不过其实要装修个人站的话，只需要把站里的markdown文章救回来就好，反正外面的静态站框架还是会用hexo。&lt;/p&gt;
&lt;p&gt;说起来，hexo这个静态站框架也是很经久不衰，虽然插件和主题消亡了不少个，但框架本身还在持续迭代，社区也还在活跃，一直出新的插件和主题，简直跟sublime text有一拼，我也是真爱掺和这种自由度高的DIY项目，怕是早晚要入PCB板、3D打印的坑。&lt;/p&gt;
&lt;p&gt;看了眼&lt;a href=&#34;https://hexo.io/docs/commands&#34;&gt;hexo的新官方文档&lt;/a&gt;，命令行用法没什么变化，项目结构也没变化，但比起9年前（Σ(⊙▽⊙”这就是成年人的世界吗？好吓人的时间尺度），除了github pages，适配了一些新的免费静态站托管平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gitlab pages：依赖可用的gitlab，gitlab知道吧？github开源对标方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;：一个可以免费托管全栈应用的PaaS平台，有每月白嫖小时数，应用有些休眠问题要解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.netlify.com/about/&#34;&gt;Netlify&lt;/a&gt;：SaaS托管平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt;：前端应用托管平台，有白嫖流量，但好像是固定额度，不是每月送额度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://rss3.io/&#34;&gt;RSS3&lt;/a&gt;：就是基于web3那一套做的RSS托管，简单理解就是IPFS上放静态资源，区块链代币支付存储和基建维护费。IPFS这个存储方案嘛我调研过，彻底去中心，可靠、近似真·持久化，IO性能还OK，但是存储成本其实比各大云厂的对象存储还贵一些，考虑到赛博活菩萨甚至有可以白嫖的对象存储，IPFS吧就有点鸡肋，现在更多是用来破审核，偷摸分享些灰色地带的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一些纯资源同步工具：Rsync、FTPSync、SFTP。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还提了一嘴，其他类似的静态资源托管方案可以自己同步hexo项目的public目录内容即可，比如我的VPS+dropbox方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hexo的项目结构带大家熟悉一下：&lt;/p&gt;
&lt;figure class=&#34;highlight nix&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nix&#34;&gt;.&lt;br&gt;├── _config.fluid.yml&lt;br&gt;├── _config.landscape.yml&lt;br&gt;├── _config.yml&lt;br&gt;├── db.json&lt;br&gt;├── node_modules&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;├── package.json&lt;br&gt;├── package-lock.json&lt;br&gt;├── public&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;├── scaffolds&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;│   ├── draft.md&lt;br&gt;│   ├── page.md&lt;br&gt;│   └── post.md&lt;br&gt;├── source&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;│   ├── about&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;│   │   └── index.md&lt;br&gt;│   ├── CNAME&lt;br&gt;│   ├── _drafts&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;│   ├── img&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;│   └── _posts&lt;span class=&#34;hljs-symbol&#34;&gt;/&lt;/span&gt;&lt;br&gt;└── themes&lt;span class=&#34;hljs-operator&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;：这是整个hexo项目的配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_config.landscape.yml&lt;/code&gt;：这是landsacpe主题的hexo项目配置文件，landscape是hexo项目的默认主体，主题配置文件一般相对于项目配置文件会多出一些配置项，这就是主题的发挥空间。主题配置文件中的配置优先级高于项目配置，所以跟主题无关的项目配置可以配在&lt;code&gt;_config.yml&lt;/code&gt;里，主题特有的配置配在主题配置文件里，方便随时换主题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;_config.fluid.yml&lt;/code&gt;：这是我现在用的&lt;a href=&#34;https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B&#34;&gt;fluid主题&lt;/a&gt;的配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;几个json文件和&lt;code&gt;node_modules/&lt;/code&gt;目录理解成项目运行时环境就好，包括了hexo框架本身、插件和主题的实现。迁移hexo项目时，可以删掉&lt;code&gt;node_modules/&lt;/code&gt;目录，靠json文件能重建项目运行时资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;themes/&lt;/code&gt;目录是用来放&lt;code&gt;git clone&lt;/code&gt;下来的主题的，不是很冷门的主题的话，直接用命令安装到项目的运行时资源里就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;public/&lt;/code&gt;目录用来放hexo框架生成的网站静态资源，可以直接把这个目录当网站根目录，拿去部署网站。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scaffolds/&lt;/code&gt;目录，字面意思是脚手架，其实是用来放几种markdown文件的模板，用生成markdown文件时会根据这些模板做一些内容初始化，我是还没有做什么修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source/&lt;/code&gt;目录是项目的内容目录，其中的markdown文件会生成对应静态资源后搬到&lt;code&gt;public/&lt;/code&gt;目录中，其他目录会原样搬到&lt;code&gt;public/&lt;/code&gt;目录中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source/about/index.md&lt;/code&gt;用来创建关于页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source/_drafts&lt;/code&gt;目录用来放文章草稿，不会生成静态资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source/_posts&lt;/code&gt;目录用来放文章正文，会生成静态资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hexo框架和fluid我就不细讲了，效果可以看我的静态站，用法可以看官方文档学习。&lt;/p&gt;
&lt;h1 id=&#34;图床&#34;&gt;&lt;a href=&#34;#图床&#34; class=&#34;headerlink&#34; title=&#34;图床&#34;&gt;&lt;/a&gt;图床&lt;/h1&gt;&lt;p&gt;静态站的头图、文章插图都会用到一些比较大的图片资源，这些资源如果跟其他静态资源放在一起，会有几个缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;图片可能越攒越多，对静态站的托管平台造成磁盘空间压力。静态站内的静态资源我是用dropbox同步，所以先于磁盘空间承压的瓶颈点是dropbox容量，这个对我影响比较大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向静态站托管平台同步图片文件渠道通常比较受限，不能随心所欲，不那么方便日常攒图随时更新。这点上用dropbox倒是还算方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片在静态站内部，客户端拉取资源需要走站域名，如果你有多个站，不方便跨站共享图，可能会有跨域问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片的IO会占据静态站在托管平台的大部分IO带宽，如果你的IO带宽很有限或者流量受限，就比较危险了。有人说可以上CDN，是能缓解不少，但资源更新比较频繁的话，CDN回源也会频繁，还是会吃IO。我VPS带宽、流量可观，所以这点倒是无所谓。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;长远考虑，我需要使用独立的、配有CDN的图床。&lt;/p&gt;
&lt;p&gt;上一版静态站，我的图床是七牛图床，当时七牛提供子域名给每个用户空间，现在七牛要求用户自行绑定备案域名。备案可太麻烦了，我选择换方案。&lt;/p&gt;
&lt;p&gt;有人安利过cloudfare的R2存储，虽然可以白嫖，但cloudfare国内被白嫖太多，CDN国内节点经常会负载过高变卡甚至断连。正巧我有了NAS这个便宜宽敞的存储空间，我选择自建对象存储，内网穿透出去作为图床，自配CDN。&lt;/p&gt;
&lt;h2 id=&#34;minio&#34;&gt;&lt;a href=&#34;#minio&#34; class=&#34;headerlink&#34; title=&#34;minio&#34;&gt;&lt;/a&gt;minio&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://min.io/docs/minio/container/index.html&#34;&gt;minio&lt;/a&gt;是Amazon S3对象存储的开源对标项目。minio可以用docker容器部署，我的群晖NAS支持docker容器，我在搭open-webui时有现成的&lt;a href=&#34;https://bipedalbit.net/2025/05/28/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89LLM%E5%8A%A9%E6%89%8B%E5%B9%B3%E5%8F%B0/#5-2-3-frpc&#34;&gt;frp内网穿透方案&lt;/a&gt;在公网暴露minio的API，这不就妥了。&lt;/p&gt;
&lt;p&gt;minio还是用docker-compose部署：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;minio:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ghcr.io/minio/minio:RELEASE.2025-04-22T22-12-26Z&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;minio&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./data:/data&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./config:/root/.minio&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9000&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:9000&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9001&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:9001&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;MINIO_ROOT_USER=bipedalbit&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;MINIO_ROOT_PASSWORD=****&amp;#x27;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;command:&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;server /data --console-address :9001&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意2025.5.24发布的minio更新版本中，把minio的web控制台功能从社区版代码里移除了：&lt;a href=&#34;https://github.com/minio/minio/releases/tag/RELEASE.2025-05-24T17-08-30Z&#34;&gt;RELEASE.2025-05-24T17-08-30Z&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挪到商业版里了，挣钱嘛，不寒碜。所以我这里没有用latest镜像，而是用了还有web控制台的最后一个版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--console-address&lt;/code&gt;如果不指定，会在每次启动容器时随机变化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;web控制台端口我不暴露到公网，安全保障。控制台界面跟普通S3对象存储的界面大同小异，能建桶，能配用户策略、桶策略，能配跨域白名单，能在界面操作桶文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/minio/minio_2025-06-07_20-38-12.png&#34; alt=&#34;minio登录页&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/minio/minio_2025-06-07_20-38-43.png&#34; alt=&#34;minio桶列表&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/minio/minio_2025-06-07_20-39-14.png&#34; alt=&#34;minio桶详情&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;CDN&#34;&gt;&lt;a href=&#34;#CDN&#34; class=&#34;headerlink&#34; title=&#34;CDN&#34;&gt;&lt;/a&gt;CDN&lt;/h2&gt;&lt;p&gt;有了对象存储，接下来就是选一个全球都有节点，不至于卡的、白嫖额度多的CDN。公布答案吧，我选了&lt;a href=&#34;https://console.lightcdn.com/cdnResources&#34;&gt;LightCDN&lt;/a&gt;，这家CDN的卖点是尽量让冷门区域也有节点覆盖，所以全球加速效果都不会太差，但也不会太快，对我来说足够了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/lightcdn/lightcdn_2025-06-07_21-33-43.png&#34; alt=&#34;lightcdn请求统计&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/lightcdn/lightcdn_2025-06-07_21-34-38.png&#34; alt=&#34;lightcdn费用统计&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Waline&#34;&gt;&lt;a href=&#34;#Waline&#34; class=&#34;headerlink&#34; title=&#34;Waline&#34;&gt;&lt;/a&gt;Waline&lt;/h1&gt;&lt;p&gt;多说评论插件挂了有一阵子了，一直没顾上换新方案。时间尺度一拉长，就发现依赖第三方服务的插件还是欠缺稳定性，不如自建。&lt;/p&gt;
&lt;p&gt;关于&lt;a href=&#34;https://waline.js.org/&#34;&gt;waline&lt;/a&gt;，我简要介绍一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hexo的fluid主题对waline有适配支持，不需要手动做代码嵌入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://waline.js.org/guide/features/&#34;&gt;功能挺全&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;能做基于Markdown的富文本评论编辑，支持微博表情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持评论后台审核&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持匿名评论和用户注册&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持多语言界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持页面浏览量和评论数统计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持邮件、微信、QQ、Telegram、Discord、飞书等各种webhook通知&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://waline.js.org/guide/database.html&#34;&gt;数据库部分&lt;/a&gt;：可以有多种选择，SaaS可以用LeanCloud，DB就多了，MongoDB、MYSQL、TiDB、SQLite、PostgreSQL、腾讯的CloudBase，甚至能把github仓库当DB用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://waline.js.org/guide/deploy/&#34;&gt;服务端部分&lt;/a&gt;：可以在各种全栈应用托管平台部署，也可以自己在云主机上做独立部署。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我选择SQLite+独立部署服务端：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;3.8&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;waline:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;lizheming/waline:latest&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;waline&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:8086:8360&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;PWD&amp;#125;/data:/app/data&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;TZ:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asia/Shanghai&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SQLITE_PATH:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/app/data&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;JWT_TOKEN:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;JWT_TOKEN&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SITE_NAME:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;BipedalBit&amp;#x27;s blog&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SITE_URL:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;https://bipedalbit.net&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SECURE_DOMAINS:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;bipedalbit.net,****,****&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SERVER_URL:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;https://****&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;AUTHOR_EMAIL:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;****&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;#LEAN_ID: $&amp;#123;LEAN_ID&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;#LEAN_KEY: $&amp;#123;LEAN_KEY&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;#LEAN_MASTER_KEY: $&amp;#123;LEAN_MASTER_KEY&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SMTP_SERVICE:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;QQ&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SMTP_USER:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;SMTP_USER&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SMTP_PASS:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;SMTP_PASS&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SENDER_NAME:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;bot&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SENDER_EMAIL:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;****&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;IPQPS:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;COMMENT_AUDIT:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;老规矩，不直接暴露端口到公网，nginx做汇聚入口和反向代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除了官方文档里提到的功能，还能配跨域白名单、QPS限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sqlite部署方式有点尴尬，需要从github仓库自己下载初始化好的&lt;a href=&#34;https://github.com/walinejs/waline/blob/main/assets/waline.sqlite&#34;&gt;waline.sqlite文件&lt;/a&gt;挂载进容器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/waline/waline_2025-06-07_22-53-58.png&#34; alt=&#34;waline评论管理&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/waline/waline_2025-06-07_22-55-19.png&#34; alt=&#34;waline用户管理&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/waline/waline_2025-06-07_22-54-42.png&#34; alt=&#34;waline用户编辑&#34;&gt;&lt;/p&gt;
</content>
        <category term="hexo" />
        <category term="NAS" />
        <category term="minio" />
        <category term="CDN" />
        <category term="waline" />
        <updated>2025-06-07T15:12:47.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2025/05/28/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89LLM%E5%8A%A9%E6%89%8B%E5%B9%B3%E5%8F%B0/</id>
        <title>搭建私有LLM助手平台</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2025/05/28/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89LLM%E5%8A%A9%E6%89%8B%E5%B9%B3%E5%8F%B0/"/>
        <content type="html">&lt;p&gt;​    难得翻新了博客，正好把最近整的新活记录分享一下。&lt;/p&gt;
&lt;h1 id=&#34;1-效果&#34;&gt;&lt;a href=&#34;#1-效果&#34; class=&#34;headerlink&#34; title=&#34;1 效果&#34;&gt;&lt;/a&gt;1 效果&lt;/h1&gt;&lt;p&gt;​    先看效果再讲过程，给缺耐心的读者节省时间。&lt;/p&gt;
&lt;h2 id=&#34;1-1-类APP效果&#34;&gt;&lt;a href=&#34;#1-1-类APP效果&#34; class=&#34;headerlink&#34; title=&#34;1.1 类APP效果&#34;&gt;&lt;/a&gt;1.1 类APP效果&lt;/h2&gt;&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/IMG_20250525_194039.jpg&#34;&gt;安卓手机上的类app效果&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-20-31-877_com.android.chrome.jpg&#34;&gt;open-webui首页效果&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;​    很像移动端app客户端吧，实际上这是PWA。PWA（Progressive Web App，渐进式网络应用）是一种结合了网页和原生应用优势的新型应用形态。它通过现代Web技术实现以下核心特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;渐进增强&lt;/strong&gt;&lt;br&gt;所有用户都能访问基础网页功能，但支持现代浏览器的用户可获得增强体验（如离线访问、推送通知等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应式设计&lt;/strong&gt;&lt;br&gt;自适应不同设备屏幕，提供无缝的移动体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离线支持&lt;/strong&gt;&lt;br&gt;通过Service Worker缓存资源，即使网络中断也能访问关键内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送通知&lt;/strong&gt;&lt;br&gt;类似原生应用，可向用户发送实时通知（需用户授权）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可安装性&lt;/strong&gt;&lt;br&gt;用户可将PWA添加到主屏幕，形成类似原生应用的快捷方式（无需应用商店）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;&lt;br&gt;通过缓存策略和资源预加载，实现接近原生应用的加载速度。&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;传统Web应用&lt;/th&gt;
&lt;th&gt;原生应用&lt;/th&gt;
&lt;th&gt;PWA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;离线访问&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持（通过缓存）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;推送通知&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装方式&lt;/td&gt;
&lt;td&gt;无需安装&lt;/td&gt;
&lt;td&gt;需下载安装&lt;/td&gt;
&lt;td&gt;可添加到主屏幕&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;跨平台兼容性&lt;/td&gt;
&lt;td&gt;依赖浏览器&lt;/td&gt;
&lt;td&gt;平台专属&lt;/td&gt;
&lt;td&gt;一次开发多端运行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开发成本&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高（需多平台开发）&lt;/td&gt;
&lt;td&gt;中（Web技术）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;​    open-webui毕竟是基于web的UI，open-webui添加PWA支持前，我也一直在浏览器里使用。不过，私用的LLM助手，就算有鉴权、CDN、防DDos，我也不会贴公网url就是了，非工业方案薄弱环节应该还是挺多的。&lt;/p&gt;
&lt;h2 id=&#34;1-2-chat界面效果&#34;&gt;&lt;a href=&#34;#1-2-chat界面效果&#34; class=&#34;headerlink&#34; title=&#34;1.2 chat界面效果&#34;&gt;&lt;/a&gt;1.2 chat界面效果&lt;/h2&gt;&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-23-46-437_com.android.chrome.jpg&#34;&gt;chat效果1&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-26-36-331_com.android.chrome.jpg&#34;&gt;chat效果2&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-29-08-235_com.android.chrome.jpg&#34;&gt;chat效果3&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-29-27-184_com.android.chrome.jpg&#34;&gt;chat效果4&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-20-40-20-184_com.android.chrome.jpg&#34;&gt;chat效果5&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-20-40-39-144_com.android.chrome.jpg&#34;&gt;chat效果6&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chat界面右上角能点开参数配置面板，只影响当前会话，有大量LLM推理参数暴露。实际使用场景中，除了用Temperature调整文本生成的多样性倾向，我几乎不会调整这些参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;chat界面左上角能点开模型选择列表，写文这会儿我的默认模型是本地的qwen3-14B，外部API接入模型和本地部署模型可以在同一个会话中交替选用，会话上下文对新加入会话的模型也保持可见。模型列表的搜索框也可以拉取ollama hub的新模型在本地部署。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MCP工具我多给点镜头，“+”号可以开启关闭模型可见的工具。所谓MCP（Model Context Protocol，模型上下文协议）就是令工具提示词使用标准的结构化形式，固化到工具中，同时这个工具调用形式在LLM训练阶段参与多任务模型微调。然而模型看着对话上下文和可用工具列表，最终怎么选用工具，就取决于具体模型的工具规划能力了。这里我用查询明天武汉天气作为例子，展示推理类模型利用时间查询工具和高德地图的城市天气查询工具，解决用户需求的过程。为什么我要分2步问？因为2次工具调用有顺序依赖关系，这类似一个工作流或者所谓的agentic任务规划过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能看到“+”号点开后能截图和上传文件，发送按钮左边有个语音输入按钮，支持多模态输入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除了可以使用工具引入实时数据，也能用固定提示词和搜索引擎接口引入联网搜索结果作为上下文信息。实测这基本可以跟搜索引擎类MCP工具等同，但默认的联网搜索和RAG会在更大召回范围内先做文本编码，可以认为检索“视野”更宽，召回能力更强一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码解释器我还没玩过，看了下配置选项，是python沙箱，我参与的大工程比较多，不太有代码片段可以玩沙箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型响应框下方有TTS、重新生成、结果（Markdown格式）复制等等按钮，还挺全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;截图右上角能看到我用的是蜂巢网络（中国移动运营商），没开梯子，所以理论上来说，有网的地方我都能用这个私有LLM助手平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;右下方有open-webui的版本更新提示，拉新镜像重新部署一下就能更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-平台配置效果&#34;&gt;&lt;a href=&#34;#1-3-平台配置效果&#34; class=&#34;headerlink&#34; title=&#34;1.3 平台配置效果&#34;&gt;&lt;/a&gt;1.3 平台配置效果&lt;/h2&gt;&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-30-38-565_com.android.chrome.jpg&#34;&gt;平台配置效果1&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-31-29-519_com.android.chrome.jpg&#34;&gt;平台配置效果2&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-31-50-645_com.android.chrome.jpg&#34;&gt;平台配置效果3&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-32-07-909_com.android.chrome.jpg&#34;&gt;平台配置效果4&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-32-37-040_com.android.chrome.jpg&#34;&gt;平台配置效果5&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-34-09-990_com.android.chrome.jpg&#34;&gt;平台配置效果6&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-34-32-447_com.android.chrome.jpg&#34;&gt;平台配置效果7&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-34-48-225_com.android.chrome.jpg&#34;&gt;平台配置效果8&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-35-08-724_com.android.chrome.jpg&#34;&gt;平台配置效果9&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/Screenshot_2025-05-25-19-36-02-805_com.android.chrome.jpg&#34;&gt;平台配置效果10&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先open-webui有用户、鉴权、角色、用户组管理功能。私用嘛，现在整个平台就我一个用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外部连接有两个用途，以OpenAI格式（注意这是LLM厂商的接口风格，跟OpenAPI的通用接口规范不是一回事）对接厂商模型API，以ollama格式对接本地部署模型。如果厂商不是OpenAI格式呢？后面我会讲。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模型配置里，可以看到所有的外部接入、本地部署模型，可以单独配置模型是否启动、默认推理参数、系统提示词、默认可用工具列表、是否显示usage等配置项。右上角的下载按钮点开可以跟ollama交互增删本地模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工具配置里可以给每个工具配置OpenAPI规范的API，可以看到其实我也配了有搜索引擎性质的github、arxiv、searxng MCP工具，来引入实时的领域或开放信息。如果工具不是OpenAPI规范呢？后面我会讲。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;open-webui的这种工具接入形式，目前还只能扩展上下文，还属于RAG的变种形式，如果想实现agent，做多阶段的工具链规划与调用，需要用到open-webui的pipeline配置。这个我还没玩过，个人使用，还没那么多固化的复杂工作流想配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;联网搜索能配相当多的搜索引擎接口类型，我是用自己部署的searxng这个元搜索引擎（能个性化定制、自行整合多个搜索引擎的结果）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码解释器配置，能看到是两个python轻量沙箱，这类沙箱的通病是跑跑抽象代码片段还行，依赖包一复杂，工程体量一大就麻烦了，毕竟不是conda、docker这种能做一定程度环境隔离的重沙箱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提示词配置，是PE（Prompt Engineering，提示词工程）时代遗留的功能，我是没使用场景的。果然模型迭代一快，大量提示词都要变成摆设，而模型一定会快速迭代。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语音功能配置，用来配语音转文本模型和文本转语音模型。我不太爱靠说话交流，保留默认配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-契机与遗憾&#34;&gt;&lt;a href=&#34;#2-契机与遗憾&#34; class=&#34;headerlink&#34; title=&#34;2 契机与遗憾&#34;&gt;&lt;/a&gt;2 契机与遗憾&lt;/h1&gt;&lt;p&gt;​    2024年11月左右，我终于有了自己梦寐以求的N卡台式机和NAS。彼时开源生态支持完善的qwen2.5刚发布不久，我想把这些烧钱设备变成生产力的热情高涨。&lt;/p&gt;
&lt;p&gt;​    我的显卡是NVIDIA 4070Ti Super，NAS是群晖DS224+。现在看这两个型号选择都留了点暗坑，后来人引以为戒：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;4070tis虽然算力OK，但显存只有16GB，复现不了工业场景常用的24GB显存（比如4090卡）轻量部署方案。通常只够部署14B规模（140亿参数量，模型文件大概9GB出头，模型推理占显存10GB出头）的模型。模型参数量到显存空间的换算过程我在这里先不展开聊。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DS224+这NAS算群晖最新的入门款，2开头就是2盘位，够用，何况之前我为了从复旦的NLP实验室搞语料买了个16T黑盘，虽然不能用来组RAID但可以用来外接扩展。坑在于我家明明做了全屋超6类网线，具备户内万兆通信的基础，可这款NAS只有2个1Gb的网口，也就是最多做双通道的千兆通信，顶天2千兆带宽，读写大文件时，NAS网口成IO瓶颈了┓(´∀&amp;#96; )┏。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-核心方案选型&#34;&gt;&lt;a href=&#34;#3-核心方案选型&#34; class=&#34;headerlink&#34; title=&#34;3 核心方案选型&#34;&gt;&lt;/a&gt;3 核心方案选型&lt;/h1&gt;&lt;p&gt;​    我长期在微博上跟进AI开源圈的消息，爱可可-爱生活（号主是北邮模式识别实验室的陈老师）、黄建同学（前微软高工）、宝玉xp（前微软高工），都是不错的大V，2024年整年AI开源壳工具层出不穷。&lt;/p&gt;
&lt;p&gt;​    优秀、高性能的通用本地LLM推理工具&lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;ollama&lt;/a&gt;脱颖而出，迅速占据本地LLM推理事实开源方案标准的地位。&lt;a href=&#34;https://github.com/ollama/ollama&#34;&gt;ollama&lt;/a&gt;的配套生态迅速发展，它的官推UI壳&lt;a href=&#34;https://github.com/open-webui/open-webui&#34;&gt;open-webui&lt;/a&gt;也进入我的视线，后来这个UI壳更是迅速扩展成了相当流行的通用AI壳甚至是小规模AI应用平台（能chat，能多模态交互，能建工作流，能RAG，能接工具包括后来的MCP工具）。&lt;/p&gt;
&lt;p&gt;​    于是，ollama搞定部署、open-webui搞定前后端的方案主体敲定了。&lt;/p&gt;
&lt;h1 id=&#34;4-完善方案&#34;&gt;&lt;a href=&#34;#4-完善方案&#34; class=&#34;headerlink&#34; title=&#34;4 完善方案&#34;&gt;&lt;/a&gt;4 完善方案&lt;/h1&gt;&lt;h2 id=&#34;4-1-痛点&#34;&gt;&lt;a href=&#34;#4-1-痛点&#34; class=&#34;headerlink&#34; title=&#34;4.1 痛点&#34;&gt;&lt;/a&gt;4.1 痛点&lt;/h2&gt;&lt;p&gt;​    本地部署ollama和open-webui很顺利，完成demo验证后，一些瓶颈问题浮现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;各家厂商的开源模型中，我希望本地部署体验的模型很多，会迅速占用大量磁盘空间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我当然希望在上班或者不在家时也能随时随地使用LLM助手；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除了本地部署的算力受限的几种开源模型，必要的时候我也希望在同一个应用里白嫖厂商开放的LLM；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我的PC不可能永远用来跑模型，有时会关机，有时会用来切win系统打游戏（我装了双系统，win用来娱乐，ubuntu用来开发和当服务器）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-2-解法&#34;&gt;&lt;a href=&#34;#4-2-解法&#34; class=&#34;headerlink&#34; title=&#34;4.2 解法&#34;&gt;&lt;/a&gt;4.2 解法&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;需求&lt;/th&gt;
&lt;th&gt;解决方案&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;本地模型存储&lt;/td&gt;
&lt;td&gt;NAS NFS挂载&lt;/td&gt;
&lt;td&gt;空间不受限，RAID可靠，14B模型初次换入加载在1min左右耗时可接受。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;外网暴露&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/fatedier/frp&#34;&gt;frp&lt;/a&gt; + 自有域名 + 自有VPS&lt;/td&gt;
&lt;td&gt;frp写文时已经94.3k star的golang开源老牌内网穿透工具，有自有域名和VPS的情况下，比运营商固定IP灵活很多，性能要求不苛刻，实测时延几乎不可感知。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模型API归一化&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/songquanpeng/one-api&#34;&gt;one-api&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;写文时已经25.4k star的开源LLM API 管理 &amp;amp; 分发系统，适配了国内外几乎所有让人有接入意愿的通用LLM厂商API。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;部署拓扑&lt;/td&gt;
&lt;td&gt;见下图&lt;/td&gt;
&lt;td&gt;ollama在PC，open-webui、frpc在NAS，frps、one-api、nginx、ssl在VPS，兼顾可维护性、网络可达要求、VPS轻量原则。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/bipedalbit-open-webui-deploy.svg&#34; alt=&#34;BipedalBit Open-WebUI部署拓扑&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-实现详情&#34;&gt;&lt;a href=&#34;#5-实现详情&#34; class=&#34;headerlink&#34; title=&#34;5 实现详情&#34;&gt;&lt;/a&gt;5 实现详情&lt;/h1&gt;&lt;h2 id=&#34;5-1-PC&#34;&gt;&lt;a href=&#34;#5-1-PC&#34; class=&#34;headerlink&#34; title=&#34;5.1 PC&#34;&gt;&lt;/a&gt;5.1 PC&lt;/h2&gt;&lt;p&gt;​    按照我的个人习惯，给PC装双系统，win平台娱乐，ubuntu系统下做开发，也适合作为服务长期运行（例如我出门在外时）的服务器环境。&lt;/p&gt;
&lt;h3 id=&#34;5-1-1-NAS挂载&#34;&gt;&lt;a href=&#34;#5-1-1-NAS挂载&#34; class=&#34;headerlink&#34; title=&#34;5.1.1 NAS挂载&#34;&gt;&lt;/a&gt;5.1.1 NAS挂载&lt;/h3&gt;&lt;h4 id=&#34;安装NFS客户端&#34;&gt;&lt;a href=&#34;#安装NFS客户端&#34; class=&#34;headerlink&#34; title=&#34;安装NFS客户端&#34;&gt;&lt;/a&gt;安装NFS客户端&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sudo apt update&lt;br&gt;sudo apt install nfs-common&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;挂载NFS共享目录&#34;&gt;&lt;a href=&#34;#挂载NFS共享目录&#34; class=&#34;headerlink&#34; title=&#34;挂载NFS共享目录&#34;&gt;&lt;/a&gt;挂载NFS共享目录&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sudo mount -t nfs &amp;lt;NFS服务器IP&amp;gt;:/&amp;lt;共享路径&amp;gt; /&amp;lt;本地挂载点&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;示例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;sudo&lt;/span&gt; mount -t nfs 192.168.1.100:/shared_folder /mnt/nfs&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;NFS服务器IP&amp;gt;&lt;/code&gt;：NFS服务器的IP地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&amp;lt;共享路径&amp;gt;&lt;/code&gt;：NFS服务器上共享的目录路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&amp;lt;本地挂载点&amp;gt;&lt;/code&gt;：Ubuntu系统上用于挂载的本地目录（需提前创建）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;检查挂载点&#34;&gt;&lt;a href=&#34;#检查挂载点&#34; class=&#34;headerlink&#34; title=&#34;检查挂载点&#34;&gt;&lt;/a&gt;检查挂载点&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;ls /mnt/nfs&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;配置开机自动挂载&#34;&gt;&lt;a href=&#34;#配置开机自动挂载&#34; class=&#34;headerlink&#34; title=&#34;配置开机自动挂载&#34;&gt;&lt;/a&gt;配置开机自动挂载&lt;/h4&gt;&lt;p&gt;​    编辑 &amp;#x2F;etc&amp;#x2F;fstab 文件，添加以下行：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;NFS服务器IP&lt;/span&gt;&amp;gt;&lt;/span&gt;:/&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;共享路径&lt;/span&gt;&amp;gt;&lt;/span&gt;  /&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;本地挂载点&lt;/span&gt;&amp;gt;&lt;/span&gt;  nfs  defaults  0  0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight accesslog&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs accesslog&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;192.168.1.100&lt;/span&gt;:/shared_folder  /mnt/nfs  nfs  defaults  &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-1-2-ollama&#34;&gt;&lt;a href=&#34;#5-1-2-ollama&#34; class=&#34;headerlink&#34; title=&#34;5.1.2 ollama&#34;&gt;&lt;/a&gt;5.1.2 ollama&lt;/h3&gt;&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;ollama:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;OLLAMA_DATA_DIR-~/workspace/docker-data/ollama-data&amp;#125;:/root/.ollama&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ollama&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;pull_policy:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;tty:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ollama/ollama:$&amp;#123;OLLAMA_DOCKER_TAG-latest&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;deploy:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;resources:&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;reservations:&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;devices:&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;driver:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;nvidia&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;device_ids:&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;]&lt;br&gt;              &lt;span class=&#34;hljs-attr&#34;&gt;capabilities:&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;gpu&lt;/span&gt;]&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;$&amp;#123;OLLAMA_WEBAPI_PORT-11434&amp;#125;:11434&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;NVIDIA_VISIBLE_DEVICES=all&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CUDA_MPS_ENABLE=1&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;CUDA_CACHE_PATH=/tmp&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;# - &amp;#x27;CUDA_LAUNCH_BLOCKING=1&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;OLLAMA_MAX_GPU_MEMORY=16000&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;OLLAMA_USE_GPU=1&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;HTTP_PROXY=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;HTTPS_PROXY=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 容器内忽然无法使用GPU问题，已经用以下方案解决：&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 在 /etc/docker/daemon.json 中添加 &amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=cgroupfs&amp;quot;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;# 等待5s防止nfs未挂载完成&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;entrypoint:&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;]&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;command:&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sleep 5 &amp;amp;&amp;amp; exec /bin/ollama serve&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pull_policy: always&lt;/code&gt;让我每次重启ollama时都能自动更新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP_PROXY=http://****:10809&lt;/code&gt;和&lt;code&gt;HTTPS_PROXY=http://****:10809&lt;/code&gt;是在配代理，从ollama的模型hub拉开源模型是ollama自身的行为，所以它需要用梯子的。配置的是局域网里的梯子v2ray客户端地址，比如，可以在NAS上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OLLAMA_MAX_GPU_MEMORY=16000&lt;/code&gt;是因为我显卡显存16GB，大家看自己情况调整。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;中添加&lt;code&gt;&amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=cgroupfs&amp;quot;]&lt;/code&gt;解容器偶发掉卡问题还挺难查的。&lt;/li&gt;
&lt;li&gt;用sleep解重新开机时容器启动早于NFS挂载就绪的问题挺偷懒的，我觉得应该有更优雅的解法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-2-NAS&#34;&gt;&lt;a href=&#34;#5-2-NAS&#34; class=&#34;headerlink&#34; title=&#34;5.2 NAS&#34;&gt;&lt;/a&gt;5.2 NAS&lt;/h2&gt;&lt;p&gt;​    群晖NAS让我很喜欢的一点就是可以玩docker容器，甚至docker-compose项目也支持。这样一些希望常驻且磁盘IO或容量要求高的应用就可以部署在NAS上了。&lt;/p&gt;
&lt;h3 id=&#34;5-2-1-v2ray（客户端）&#34;&gt;&lt;a href=&#34;#5-2-1-v2ray（客户端）&#34; class=&#34;headerlink&#34; title=&#34;5.2.1 v2ray（客户端）&#34;&gt;&lt;/a&gt;5.2.1 v2ray（客户端）&lt;/h3&gt;&lt;p&gt;​    2025年海外docker镜像仓库包括docker官方仓库都在国内有访问障碍，为了方便拉镜像做部署，最简单的解决方案就是利用VPS搭个梯子了，有现成梯子当然也可以用。早些年，梯子客户端还是shadowsocks，这两年我也紧跟时代换成了v2ray生态的各种变种客户端和clash，个人感觉相比起来v2ray会比clash上手更方便、灵活一些。&lt;br&gt;​    首先要准备一个目录，来装几个必要文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;v2ray&lt;br&gt;├── localtime&lt;br&gt;├── timezone&lt;br&gt;└── v2ray&lt;br&gt;    ├── config.json&lt;br&gt;    ├── geoip.dat&lt;br&gt;    ├── geoip.metadb&lt;br&gt;    ├── geoip-only-cn-private.dat&lt;br&gt;    └── geosite.dat&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;localtime、timezone是为了保证v2ray客户端和服务端的时钟保持一致，不一致通信会不通的。起容器时会挂载进去替换docker镜像里的原始文件。&lt;/li&gt;
&lt;li&gt;v2ray子目录里是v2ray客户端依赖的资源文件，其中geoip是各种网络局域辅助判定规则集，跟GFW打交道的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v2ray/config.json&lt;/code&gt;是v2ray客户端的核心配置文件，通常可以用图形界面的v2ray客户端配置完后复制出来用，或者网上找一份改改用。大概长这样：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;access&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;loglevel&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;inbounds&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10808&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;sniffing&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;destOverride&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tls&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;routeOnly&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noauth&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;udp&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;allowTransparent&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10809&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;sniffing&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;destOverride&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tls&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;routeOnly&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noauth&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;udp&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;allowTransparent&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outbounds&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;vnext&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; ****&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;alterId&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; ****&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;security&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;auto&amp;quot;&lt;/span&gt;&lt;br&gt;              &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;streamSettings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mux&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;concurrency&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;-1&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;freedom&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;blackhole&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;dns&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;hosts&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;dns.google&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;proxy.example.com&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;servers&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;223.5.5.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domains&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:geolocation-cn&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;expectIPs&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geoip:cn&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.1.1.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;8.8.8.8&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;https://dns.google/dns-query&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;223.5.5.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domains&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bipedalbit.net&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;routing&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domainStrategy&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;AsIs&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;inboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domain&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:googleapis.cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:gstatic.com&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;443&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;udp&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;block&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domain&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:category-ads-all&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geoip:private&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domain&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:private&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;223.5.5.5/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;223.6.6.6/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2400:3200::1/128&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2400:3200:baba::1/128&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;119.29.29.29/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.12.12.12/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;120.53.53.53/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2402:4e00::/128&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2402:4e00:1::/128&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;180.76.76.76/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2400:da00::6666/128&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;114.114.114.114/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;114.114.115.115/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;180.184.1.1/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;180.184.2.2/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;101.226.4.6/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;218.30.118.6/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123.125.81.6/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;140.207.198.6/32&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geoip:cn&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;direct&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;domain&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:dns.alidns.com&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:doh.pub&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:dot.pub&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:doh.360.cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:dot.360.cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;geosite:geolocation-cn&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;domain:bipedalbit.net&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0-65535&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;outboundTag&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    接下来是docker-compose.yaml：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;v2ray-client:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;mage:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;v2fly/v2fly-core&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;v2ray-client&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;network_mode:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;host&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./v2ray:/etc/v2ray&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./localtime:/etc/localtime&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./timezone:/etc/timezone&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-2-2-open-webui&#34;&gt;&lt;a href=&#34;#5-2-2-open-webui&#34; class=&#34;headerlink&#34; title=&#34;5.2.2 open-webui&#34;&gt;&lt;/a&gt;5.2.2 open-webui&lt;/h3&gt;&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;open-webui:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ghcr.io/open-webui/open-webui:$&amp;#123;WEBUI_DOCKER_TAG-main&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;open-webui&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;pull_policy:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;.:/app/backend/data&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;depends_on:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ollama&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;:8080&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;extra_hosts:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;host.docker.internal:host-gateway&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;HTTP_PROXY=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http_proxy=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;HTTPS_PROXY=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;https_proxy=http://****:10809&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;OLLAMA_BASE_URL=http://****:11434&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;WEBUI_SECRET_KEY=&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;WEBUI_URL=https://****&amp;#x27;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ENABLE_WEBSOCKET_SUPPORT=true&amp;#x27;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-2-3-frpc&#34;&gt;&lt;a href=&#34;#5-2-3-frpc&#34; class=&#34;headerlink&#34; title=&#34;5.2.3 frpc&#34;&gt;&lt;/a&gt;5.2.3 frpc&lt;/h3&gt;&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;frpc:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;snowdreamtech/frpc&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;frpc&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;network_mode:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;host&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./frpc.toml:/etc/frp/frpc.toml&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    frp客户端配置文件frpc.toml长这样：&lt;/p&gt;
&lt;figure class=&#34;highlight toml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs toml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;serverAddr&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bipedalbit.net&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;serverPort&lt;/span&gt; = ****&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;auth.token&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;[[proxies]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;open-webui&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;localIP&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;localPort&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;8080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;remotePort&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;8080&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    不清楚的地方可以看&lt;a href=&#34;https://gofrp.org/zh-cn/docs/examples/&#34;&gt;frp官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;5-2-4-mcpo2&#34;&gt;&lt;a href=&#34;#5-2-4-mcpo2&#34; class=&#34;headerlink&#34; title=&#34;5.2.4 mcpo2&#34;&gt;&lt;/a&gt;5.2.4 mcpo2&lt;/h3&gt;&lt;p&gt;​    &lt;a href=&#34;https://github.com/open-webui/mcpo&#34;&gt;mcpo&lt;/a&gt;是open-webui团队发起的开源项目，用python FastAPI框架写的，旨在快速启动OpenAPI规范接口的mcpserver，有鉴权功能，自解释、更方便部署在云上，方便各种平台接入。贴几张图让大家理解下OpenAPI的好处：&lt;/p&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/截图_2025-05-29_00-24-24.png&#34;&gt;OpenAPI格式的MCP服务 /docs&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/截图_2025-05-29_00-24-55.png&#34;&gt;OpenAPI格式的MCP服务 接口列表&lt;/center&gt;&lt;/td&gt;
        &lt;td &gt;&lt;center&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/截图_2025-05-29_00-25-27.png&#34;&gt;OpenAPI格式的MCP服务 接口详情&lt;/center&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;​    NAS上这个mcpo服务跟VPS上的从部署方式看一模一样，用来对接只限国内的mcp工具服务，比如高德地图。&lt;/p&gt;
&lt;p&gt;​    我魔改了一下原镜像，换了个启动脚本，方便用环境变量配API_KEY：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# @Author: zhangyipeng1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# @Date:   2025-05-15 18:12:11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# @Last Modified by:   wps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# @Last Modified time: 2025-05-15 18:12:23&lt;/span&gt;&lt;br&gt;mcpo --config /app/config.json --api-key &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&lt;span class=&#34;hljs-variable&#34;&gt;$API_KEY&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    通过套壳Dockerfile把启动脚本放入镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Dockerfile&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;FROM&lt;/span&gt; ghcr.io/open-webui/mcpo:main&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./start.sh /app/start.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;RUN&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;chmod&lt;/span&gt; +x /app/start.sh&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/app/start.sh&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    mcp配置文件：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mcpServers&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;amap-maps&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@amap/amap-maps-mcp-server&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;npx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;AMAP_MAPS_API_KEY&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mcp-server-time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;--local-timezone=Asia/Shanghai&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uvx&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mcp-server-fetch&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uvx&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    接下来是docker-compose.yaml，不指定镜像而是从Dockerfile构建镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;mcpo:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;build:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;context:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;.&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;dockerfile:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;Dockerfile&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;8090:8000&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;API_KEY:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;****&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;./config.json:/app/config.json&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;5-3-VPS&#34;&gt;&lt;a href=&#34;#5-3-VPS&#34; class=&#34;headerlink&#34; title=&#34;5.3 VPS&#34;&gt;&lt;/a&gt;5.3 VPS&lt;/h2&gt;&lt;p&gt;​    如果只打算维护一台云主机，那么选择一个海外VPS更能满足全球资源拉取、全球信息获取、搭建全球化应用的需求。VPS厂商挺多的就不细说了，我选了个洛杉矶的机房，全球主流资源访问速度和回国网速都不错。&lt;/p&gt;
&lt;p&gt;​    VPS也装ubuntu，开发环境尽量跟PC保持统一，给自己降低心智负担。&lt;/p&gt;
&lt;h3 id=&#34;5-3-1-v2ray（服务端）&#34;&gt;&lt;a href=&#34;#5-3-1-v2ray（服务端）&#34; class=&#34;headerlink&#34; title=&#34;5.3.1 v2ray（服务端）&#34;&gt;&lt;/a&gt;5.3.1 v2ray（服务端）&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://233boy.com/v2ray/v2ray-script/&#34;&gt;一个很方便的v2ray服务端一键部署工具&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-3-2-frps&#34;&gt;&lt;a href=&#34;#5-3-2-frps&#34; class=&#34;headerlink&#34; title=&#34;5.3.2 frps&#34;&gt;&lt;/a&gt;5.3.2 frps&lt;/h3&gt;&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;frps:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;snowdreamtech/frps&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;frps&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;always&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1:8080:8080&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****:****&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;~/frp/frps.toml:/etc/frp/frps.toml&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    frp服务端配置文件frps.toml长这样：&lt;/p&gt;
&lt;figure class=&#34;highlight toml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs toml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;bindPort&lt;/span&gt; = ****&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;auth.token&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    不清楚的地方可以看&lt;a href=&#34;https://gofrp.org/zh-cn/docs/examples/&#34;&gt;frp官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;5-3-3-one-api&#34;&gt;&lt;a href=&#34;#5-3-3-one-api&#34; class=&#34;headerlink&#34; title=&#34;5.3.3 one-api&#34;&gt;&lt;/a&gt;5.3.3 one-api&lt;/h3&gt;&lt;p&gt;​    one-api是用来汇聚各厂商的LLM接口，将各种厂商LLM接口统一为OpenAI格式，方便统一接入和灵活切换，渠道管理功能挺完善的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/%E6%88%AA%E5%9B%BE_2025-05-28_21-33-49.png&#34; alt=&#34;one-api&#34;&gt;&lt;/p&gt;
&lt;p&gt;​    但是需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果把one-api部署在海外，可能连不上部分国内厂商的接口，例如阿里的百炼平台。&lt;/li&gt;
&lt;li&gt;VPS上用容器部署服务时，如果不打算让服务直接暴露到外网，务必注意暴露端口要带上ip限制，例如&lt;code&gt;127.0.0.1:3000:3000&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;3.4&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;redis:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;REGISTRY:-docker.io&amp;#125;/redis:latest&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;redis&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;db:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mysql:latest&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;mysql&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;TZ:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Shanghai&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;MYSQL_ROOT_PASSWORD:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;MYSQL_USER:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;oneapi&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;MYSQL_PASSWORD:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;MYSQL_DATABASE:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;one-api&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;~/mysql-data:/var/lib/mysql&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;one-api:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;REGISTRY:-docker.io&amp;#125;/justsong/one-api:latest&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;one-api&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1:3000:3000&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;TZ:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Shanghai&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SQL_DSN:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;oneapi:****@tcp(db:3306)/one-api?charset=utf8mb4&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;REDIS_CONN_STRING:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;redis://redis&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;SESSION_SECRET:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;# NODE_TYPE: slave  # 多机部署时从节点取消注释该行&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;# SYNC_FREQUENCY: 60  # 需要定期从数据库加载数据时取消注释该行&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;# FRONTEND_BASE_URL: &amp;quot;https://****&amp;quot;  # 多机部署时从节点取消注释该行&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;~/one-api:/data&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;depends_on:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;redis&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;db&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;healthcheck:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        wget -qO- http://localhost:3000/api/status | &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;        grep -o &amp;#x27;\&amp;quot;success\&amp;quot;:\\s*true&amp;#x27; &amp;gt; /dev/null &amp;amp;&amp;amp; echo &amp;#x27;healthy&amp;#x27; || echo &amp;#x27;unhealthy&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;interval:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;30s&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;timeout:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;10s&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;retries:&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;command:&lt;/span&gt;&lt;br&gt;      [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;env &amp;amp;&amp;amp; exec /one-api&amp;quot;&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-3-4-searxng&#34;&gt;&lt;a href=&#34;#5-3-4-searxng&#34; class=&#34;headerlink&#34; title=&#34;5.3.4 searxng&#34;&gt;&lt;/a&gt;5.3.4 searxng&lt;/h3&gt;&lt;p&gt;​    &lt;a href=&#34;https://github.com/searxng/searxng&#34;&gt;searxng&lt;/a&gt;是一个开源的元搜索引擎，能配置多个搜索引擎作为自己的数据源，保护隐私，无广告。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/open-webui/%E6%88%AA%E5%9B%BE_2025-05-28_21-41-35.png&#34; alt=&#34;searxng&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs yaml&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;version:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3.7&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;services:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;searxng-redis:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;searxng-redis&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;docker.io/valkey/valkey:8-alpine&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;command:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;valkey-server&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;--save&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;--loglevel&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;warning&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;networks:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;searxng&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;/root/searxng/valkey-data:/data:rw&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;logging:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;driver:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;json-file&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;options:&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;max-size:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1m&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;max-file:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;searxng:&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;container_name:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;searxng&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;image:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;docker.io/searxng/searxng:latest&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;restart:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;unless-stopped&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;networks:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;searxng&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;ports:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;127.0.0.1:8081:8080&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;volumes:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;/root/searxng/searxng:/etc/searxng:rw&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;environment:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;SEARXNG_BASE_URL=https://****/&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;SEARXNG_REDIS_URL=redis://@searxng-redis:6379/0&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;UWSGI_WORKERS=$&amp;#123;SEARXNG_UWSGI_WORKERS:-4&amp;#125;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;UWSGI_THREADS=$&amp;#123;SEARXNG_UWSGI_THREADS:-4&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;cap_drop:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;ALL&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;cap_add:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;CHOWN&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;SETGID&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-bullet&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;SETUID&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;logging:&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;driver:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;json-file&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;options:&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;max-size:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1m&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;max-file:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;networks:&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;searxng:&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​    虽然挂载了一个目录，暴露了几个配置文件出来，但其实我也没修改过里面的配置。&lt;/p&gt;
&lt;h3 id=&#34;5-3-5-mcpo1&#34;&gt;&lt;a href=&#34;#5-3-5-mcpo1&#34; class=&#34;headerlink&#34; title=&#34;5.3.5 mcpo1&#34;&gt;&lt;/a&gt;5.3.5 mcpo1&lt;/h3&gt;&lt;p&gt;​    跟NAS上的mcpo2没什么大区别，只是里面配的mcp连海外工具。我只贴个配置文件吧：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mcpServers&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;arxiv-mcp-server&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tool&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;arxiv-mcp-server&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;--storage-path&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/app/arxiv-data&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uv&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mcp-server-fetch&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uvx&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;@modelcontextprotocol/server-github&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;npx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;GITHUB_PERSONAL_ACCESS_TOKEN&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;mcp-server-firecrawl&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;firecrawl-mcp&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;npx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;FIRECRAWL_API_KEY&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;****&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;searxng&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-y&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mcp-searxng&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;npx&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;SEARXNG_URL&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;https://****&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mcp-server-time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;--local-timezone=Asia/Shanghai&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;uvx&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;5-3-6-nginx-ssl&#34;&gt;&lt;a href=&#34;#5-3-6-nginx-ssl&#34; class=&#34;headerlink&#34; title=&#34;5.3.6 nginx+ssl&#34;&gt;&lt;/a&gt;5.3.6 nginx+ssl&lt;/h3&gt;&lt;p&gt;​    我VPS上部署的所有开放外网访问的服务，统一经由nginx暴露，顺便配上SSL证书。现在的SSL证书不像早年要么花钱要么搞自签的形式证书了，我们有了&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let’s Encrypt&lt;/a&gt;这个SSL证书公益签发机构，还有&lt;a href=&#34;https://certbot.eff.org/&#34;&gt;certbot&lt;/a&gt;工具可以快速配置证书。现在自建站还花钱买SSL证书的我觉得就有点花冤枉钱了。&lt;/p&gt;
&lt;p&gt;​    nginx配置文件我贴些open-webui相关的关键片段吧：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;443&lt;/span&gt; ssl;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; ****;&lt;br&gt;        &lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;ssl_certificate&lt;/span&gt; /etc/letsencrypt/live/****/fullchain.pem;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;ssl_certificate_key&lt;/span&gt; /etc/letsencrypt/live/****/privkey.pem;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;charset&lt;/span&gt; utf-&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; /ws/socket.io/ &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Origin&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;wss://****&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Methods&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;GET, OPTIONS&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Headers&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Origin, Content-Type, Accept, Authorization, Upgrade, Sec-WebSocket-Key, Sec-WebSocket-Version, Sec-WebSocket-Extensions&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Credentials&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-variable&#34;&gt;$request_method&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;OPTIONS&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Origin&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;wss://****&amp;#x27;&lt;/span&gt;;&lt;br&gt;      &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Methods&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;GET, OPTIONS&amp;#x27;&lt;/span&gt;;&lt;br&gt;      &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Headers&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Origin, Content-Type, Accept, Authorization, Upgrade, Sec-WebSocket-Key, Sec-WebSocket-Version, Sec-WebSocket-Extensions&amp;#x27;&lt;/span&gt;;&lt;br&gt;      &lt;span class=&#34;hljs-attribute&#34;&gt;add_header&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Access-Control-Allow-Credentials&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;;&lt;br&gt;      &lt;span class=&#34;hljs-attribute&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;204&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;# No Content&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; Host &lt;span class=&#34;hljs-variable&#34;&gt;$host&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; Upgrade &lt;span class=&#34;hljs-variable&#34;&gt;$http_upgrade&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; Connection &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; X-Real-IP &lt;span class=&#34;hljs-variable&#34;&gt;$remote_addr&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; X-Forwarded-For &lt;span class=&#34;hljs-variable&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; X-Forwarded-Proto &lt;span class=&#34;hljs-variable&#34;&gt;$scheme&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_cache_bypass&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;$http_upgrade&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://localhost:8080;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10s&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_send_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;300s&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3600s&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;client_max_body_size&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;64m&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;.&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; Host &lt;span class=&#34;hljs-variable&#34;&gt;$host&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; Accept-Encoding gzip;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; X-Real-IP &lt;span class=&#34;hljs-variable&#34;&gt;$remote_addr&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_set_header&lt;/span&gt; X-Forwarded-For &lt;span class=&#34;hljs-variable&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_cache&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;off&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_buffering&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;off&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;chunked_transfer_encoding&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;on&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;tcp_nopush&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;on&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;tcp_nodelay&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;on&lt;/span&gt;;&lt;br&gt;                &lt;span class=&#34;hljs-attribute&#34;&gt;keepalive_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;60s&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://localhost:8080;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_redirect&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;off&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10s&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_send_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;300s&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;300s&lt;/span&gt;;&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;注意里面有些专门为websocket添加的配置，是趟过坑才成型的。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-3-7-域名&#34;&gt;&lt;a href=&#34;#5-3-7-域名&#34; class=&#34;headerlink&#34; title=&#34;5.3.7 域名&#34;&gt;&lt;/a&gt;5.3.7 域名&lt;/h3&gt;&lt;p&gt;​    域名服务商也挺多的，负责维护域名归属关系，有资质能出具域名归属证书，国内的域名服务商还能代办域名备案。费用从一年十来块到一年几百块的都有，看自己需要选择就好。&lt;/p&gt;
&lt;h3 id=&#34;5-3-8-DNS&#34;&gt;&lt;a href=&#34;#5-3-8-DNS&#34; class=&#34;headerlink&#34; title=&#34;5.3.8 DNS&#34;&gt;&lt;/a&gt;5.3.8 DNS&lt;/h3&gt;&lt;p&gt;​    自建站有很多人爱用cloudfare做DNS、CDN、对象存储、AI网关，这家赛博活菩萨有很多免费云基建服务。我最早也用cloudfare做域名解析，后来发现在国内偶发不可用，可能国内白嫖的人太多，节点负载太高了。现在我用同样免费的DNSPod做域名解析，最早是独立DNS，现在被腾讯云吞了。&lt;/p&gt;
&lt;h1 id=&#34;6-总结&#34;&gt;&lt;a href=&#34;#6-总结&#34; class=&#34;headerlink&#34; title=&#34;6 总结&#34;&gt;&lt;/a&gt;6 总结&lt;/h1&gt;&lt;p&gt;​    这一套操作下来，你应该也能搭一套自己的AI助手平台。即使是缺显卡，也能部署整套系统的主体部分（不要ollama，只要one-api甚至连one-api都不要，只配国内厂商的接口）。&lt;/p&gt;
&lt;p&gt;​    整个系统陆续添砖加瓦搭了几个月，想想踩了这么多坑，不记录下来确实挺可惜。&lt;/p&gt;
&lt;p&gt;​    时隔9年又开始写博客，写完才发现这篇文格外的长。欢迎爱折腾的同好讨论~&lt;/p&gt;
</content>
        <category term="LLM" />
        <category term="ollama" />
        <category term="open-webui" />
        <category term="oneapi" />
        <category term="mcpserver" />
        <updated>2025-05-28T14:19:35.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/06/23/sai%E6%9D%BF%E7%BB%98%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
        <title>sai板绘初体验</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/06/23/sai%E6%9D%BF%E7%BB%98%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; CS小硕的生活还是挺乏味压抑的，尤其是手头一堆活的时候。于是我买了个数位板，wacom CTL-671，400+软妹币的入门板。拿到板子第一天还没贴膜就拿来画了一堆表情包，新手不知轻重还在板子上留了痕迹。前两天刚画完个⑨，背景大概一时半会都不会有动力画了，于是这篇文先简单记录一下我的板绘初体验。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 要学板绘先要有个板子，wacom的高端板口碑挺好的，想来入门板也不会太差。wacom的驱动只有win和mac的，企图在Ubuntu下画小人，于是开了个虚拟机，很遗憾开虚拟机就算装了驱动板子也会丢压感，于是转战win。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 选完板子装完驱动还需要选择一个画图软件，因为是我是要学画漫画，所以只从这个方面考量各种软件。PS和sai是大多数人的选择，PS更有泛用性，而sai对画漫画来说更加有针对性更方便一些。我的话虽然也装过PS给小程序修图用，还是选择了更轻便的sai。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 选择用sai就需要掌握一些sai的常用快捷操作：&lt;/p&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mathematica&#34;&gt;【一般】&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;E&lt;/span&gt;：长按&lt;span class=&#34;hljs-built_in&#34;&gt;E&lt;/span&gt;，笔会变成橡皮，松开变回笔，按一下则维持橡皮状态&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;N&lt;/span&gt;：铅笔&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;V&lt;/span&gt;：画笔（基本上最常用）&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;B&lt;/span&gt;：喷枪&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;C&lt;/span&gt;：水彩笔 &lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;D&lt;/span&gt;：清除&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;A&lt;/span&gt;：选区笔&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;H&lt;/span&gt;：翻转画布&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;S&lt;/span&gt;：选区擦&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;X&lt;/span&gt;：背景颜色和前景颜色转换&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;F&lt;/span&gt;：将选区的图转写到下一图层，&lt;span class=&#34;hljs-variable&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;E&lt;/span&gt;是向下合并&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;Delete&lt;/span&gt;：左旋转画布（逆时针） &lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;End&lt;/span&gt;：右旋转画布（顺时针） &lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;空格&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标左键：旋转画布 &lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;空格&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标右键&lt;span class=&#34;hljs-operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Home&lt;/span&gt;：恢复旋转画布&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;++&lt;/span&gt;：放大画布&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+-&lt;/span&gt;：缩小画布&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;：恢复视图视窗大小&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;空格&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标左键：鼠标位置局部放大 &lt;br&gt;空格&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标左键：拖动画布&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;]&lt;/span&gt;：大一号的笔刷 &lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;[&lt;/span&gt;：小一号的笔刷 &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;：选择笔刷浓度 &lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标左键：&lt;span class=&#34;hljs-punctuation&#34;&gt;(&lt;/span&gt;左右拖动&lt;span class=&#34;hljs-punctuation&#34;&gt;)&lt;/span&gt;调整笔刷大小&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;鼠标左键：取色&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;左键拖拽 ：移动图层、移动选择部分&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Z&lt;/span&gt;：状态回退&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Y&lt;/span&gt;：状态前进&lt;br&gt;【选区时】&lt;br&gt;按住&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;是移动，按住&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;是减区域，按住&lt;span class=&#34;hljs-variable&#34;&gt;Shift&lt;/span&gt;是加区域。&lt;br&gt;【画直线】&lt;br&gt;用笔点一个点，按住&lt;span class=&#34;hljs-variable&#34;&gt;Shift&lt;/span&gt;，再点一个点，两个点之间就会形成一条直线。&lt;br&gt;【钢笔】&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;：在钢笔图层中激活锚点状态，以加锚点的方式调整线条的曲线&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Shift&lt;/span&gt;：不加锚点的调整曲线&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;拖拉锚点：锚点移动&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Ctrl&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Shift&lt;/span&gt;：复制并移动整个线条的所有锚点；如点击的两个锚点分别属于两条线条，则自动连接&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Shift&lt;/span&gt;：移动整个线条的所有锚点&lt;br&gt;&lt;span class=&#34;hljs-variable&#34;&gt;Alt&lt;/span&gt;：删除锚点&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 画漫画要先打草稿，这时一般是用铅笔，跟手绘时一样。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E6%91%B8%E9%B1%BC%E7%9C%9Ftm%E5%BC%80%E5%BF%83%E5%95%8A.PNG&#34; title=&#34;头部草稿&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 现学现卖，漫画人物的头部新手最好打上十字再画，讲道理，我不打十字形状根本画不对。然后是眼睛的位置，通常在头部的水平中轴线附近，不要想当然的把眼睛画太高。当然也有大大做人设时故意把一些人物的眼睛放的比较高，但是人家是大大，有自己的想法。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E7%90%AA%E9%9C%B2%E8%AF%BA%E8%8D%89%E7%A8%BF.PNG&#34; title=&#34;全身草稿&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 身体比例这个就不一定了，我画的这张是Q版，差不多二头身就OK，可以看到我草稿上除了比例边界线也画了一些透视线和身体骨架线。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E8%9B%A4%EF%BC%9F.PNG&#34; title=&#34;线稿&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 后来草稿又加了一只蛙，毕竟雾之湖的青蛙是⑨的爱嘛。草稿画完记得新建一个图层描线稿，线稿其实很好画的，有人爱用画笔，我图省事直接用钢笔描曲线了，反正钢笔浓度画完也可以调的。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E4%B8%8A%E8%89%B2%E7%9C%9F%E6%9C%89%E8%B6%A3%EF%BC%81.PNG&#34; title=&#34;上色&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上色据说fiodo流是一个图层用魔棒搞定，我看的入门教程是一个颜色一个图层。先把线稿设成选区来源、正片叠底，然后再建图层上色就不会上到不该上的区域了。皮肤选区，皮肤图层组：底色、阴影、阴影2，按这个节奏来的。上色我主要用的油漆桶和画笔，嘛看个人爱好和需要，随意就好。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E9%AB%98%E5%85%89%E5%A5%BD%E9%9A%BE%E5%95%8A.PNG&#34; title=&#34;高光&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E6%9D%BF%E7%BB%98/%E6%92%B8%E5%8F%AA%E7%90%AA%E9%9C%B2%E8%AF%BA/%E4%B8%8D%E4%BC%9A%E4%B8%8A%E9%98%B4%E5%BD%B1%E6%80%AA%E6%88%91%E5%92%AF.PNG&#34; title=&#34;褶皱&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 高光和褶皱嘛，观察+脑补+加参考大大的作品。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上，收工。&lt;a href=&#34;http://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=57615551&#34;&gt;p站请戳&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="板绘" />
        <category term="sai" />
        <category term="琪露诺" />
        <updated>2016-06-23T12:58:21.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/05/08/FFmpeg%E6%89%B9%E9%87%8F%E6%8A%93%E5%B8%A7%E8%84%9A%E6%9C%AC/</id>
        <title>FFmpeg批量抓帧脚本</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/05/08/FFmpeg%E6%89%B9%E9%87%8F%E6%8A%93%E5%B8%A7%E8%84%9A%E6%9C%AC/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上周一个学姐问我有没有兴趣毕业去她那做图像处理，抛给我个模式识别问题和一段4000+秒的mp4视频。大周末的我正犯五月病，就跟群里大佬问了下视频抓帧用什么合适，知道神奇的FFmpeg后顺手写了个python脚本做一下批量抓帧。至于为什么要用python不直接写shell，因为FFmpeg自带的批量抓帧命令是针对连续时间序列进行的，执行起来特别慢，用python是要做一下时间序列离散化，然后并行处理。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;FFmpeg&#34;&gt;&lt;a href=&#34;#FFmpeg&#34; class=&#34;headerlink&#34; title=&#34;FFmpeg&#34;&gt;&lt;/a&gt;FFmpeg&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 先引用百度百科简单介绍下FFmpeg：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频&amp;#x2F;视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关于FFmpeg的业界地位，有很多视音频播放器是通过给FFmpeg加壳完成的。它是跨平台的，linux、win、mac os下都有发行版。想要安装，可以去&lt;a href=&#34;http://ffmpeg.org/&#34;&gt;官网&lt;/a&gt;看看。关于文档，我找到的总结、教程、手册都比较零散，官方的英语文档又让新手无从看起，这次我只查到够用的资料就放着了，如果读者找到比较全面的实用手册，欢迎留言。&lt;/p&gt;
&lt;h3 id=&#34;实现&#34;&gt;&lt;a href=&#34;#实现&#34; class=&#34;headerlink&#34; title=&#34;实现&#34;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我试着直接执行FFmpeg的批量抓帧命令时发现特别慢，几乎总要花费目标视频一半的播放时间。但是单张抓帧，不论时间点在哪里，其实都很快。于是我的思路是把视频的总时长拿出来，然后获得一个均匀分布的时间点集合，最后统统扔给gevent的pool并行抓帧。gevent是python一个著名的coroutine（协程）框架，初衷是处理高并发的网络IO，要安装pip一下就好。思路很简单，脚本也很短，life is short, I choose python!&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; os&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; commands &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; getoutput&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; re&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; gevent.pool &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; Pool &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt;  Gpool&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; time &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; time&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# get arguments&lt;/span&gt;&lt;br&gt;file_path = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;ouput_path = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;interval = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;:&lt;br&gt;    file_path = raw_input(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Vedio path: &amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; os.path.isfile(file_path):&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Not a file.&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;:&lt;br&gt;    ouput_path = raw_input(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Output path( current directory for default ) : &amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; ouput_path == &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; os.path.exists(ouput_path) &lt;span class=&#34;hljs-keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; os.path.isfile(ouput_path):&lt;br&gt;        ouput_path += &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Not a directory.&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;True&lt;/span&gt;:&lt;br&gt;    s = raw_input(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Snap interval( 1 second for default ) : &amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; s == &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;:&lt;br&gt;        interval = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; re.&lt;span class=&#34;hljs-keyword&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;r&amp;#x27;^[0-9]+(.[0-9]+)&amp;#123;0,1&amp;#125;$&amp;#x27;&lt;/span&gt;, s) &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;:&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Not a number.&amp;#x27;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;:&lt;br&gt;        interval = &lt;span class=&#34;hljs-built_in&#34;&gt;float&lt;/span&gt;(s)&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# get vedio duration via os.popen with &amp;quot;ffmpeg -i&amp;quot;&lt;/span&gt;&lt;br&gt;info = getoutput(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ffmpeg -i &amp;#x27;&lt;/span&gt; + file_path)&lt;br&gt;dur = re.search(&lt;span class=&#34;hljs-string&#34;&gt;r&amp;#x27;(?&amp;lt;=Duration: ).*?(?=,)&amp;#x27;&lt;/span&gt;, info).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;).split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;)&lt;br&gt;dur = &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt;(dur[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;])*&lt;span class=&#34;hljs-number&#34;&gt;3600&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;int&lt;/span&gt;(dur[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;])*&lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt; + &lt;span class=&#34;hljs-built_in&#34;&gt;float&lt;/span&gt;(dur[&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;])&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Vedio duration: %.2f seconds.&amp;#x27;&lt;/span&gt; % dur&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# make time stamps pool&lt;/span&gt;&lt;br&gt;time_stamp_pool = []&lt;br&gt;time_stamp = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; time_stamp &amp;lt; dur:&lt;br&gt;    time_stamp_pool.append(time_stamp)&lt;br&gt;    time_stamp += interval&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# os.system + gevent snap by batch&lt;/span&gt;&lt;br&gt;gpool = Gpool()&lt;br&gt;snap_cmd = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ffmpeg -ss %f -i %s -nostats -loglevel 0 -q:v 2 -f image2 %s%d.jpg&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;# execute quietly&lt;/span&gt;&lt;br&gt;n_snap = &lt;span class=&#34;hljs-built_in&#34;&gt;len&lt;/span&gt;(time_stamp_pool)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;%d frames to be snapped.&amp;#x27;&lt;/span&gt; % n_snap&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Handling...&amp;#x27;&lt;/span&gt;&lt;br&gt;time0 = time()&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; xrange(n_snap):&lt;br&gt;    gpool.spawn(os.system, snap_cmd % (time_stamp_pool[i], file_path, ouput_path, i))&lt;br&gt;gpool.join()&lt;br&gt;time_cost = time() - time0&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Done in %.2f seconds.&amp;#x27;&lt;/span&gt; % time_cost&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="python" />
        <category term="ffmpeg" />
        <updated>2016-05-08T08:29:47.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/04/25/%E5%88%A9%E7%94%A8Dropbox%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E7%9A%84%E9%9D%99%E6%80%81%E7%AB%99/</id>
        <title>利用Dropbox实现实时同步的静态站</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/04/25/%E5%88%A9%E7%94%A8Dropbox%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E7%9A%84%E9%9D%99%E6%80%81%E7%AB%99/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上个周末正在练习nginx静态站服务器功能的基本配置，忽然想到一个点子。既然我有现成的VPS可以用，而且只是用来搭ShadowSocks服务器科学上网用，不拿来做建站练习实在有点浪费。之前早就把VPS和手头各个平台上的ShadowSocks+Dropbox环境配好了，那为什么不干脆在VPS的Dropbox文件夹里建站呢？自动同步，多终端随处修改，应该会比Github Pages更方便。试了一下，结果亦可赛艇。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;VPS&#34;&gt;&lt;a href=&#34;#VPS&#34; class=&#34;headerlink&#34; title=&#34;VPS&#34;&gt;&lt;/a&gt;VPS&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; VPS的选择主要看需要，论国内访问速度当然还是BAT和新浪之类的国产云主机最好，但是如果你想顺便用来科学上网，那么就得选国外VPS服务商了。一般来说，提起国外的网络服务运营商，总是想起欧美的，尤其是美国的，然而事实上，日本的VPS产业也很发达。大名鼎鼎的&lt;a href=&#34;https://www.linode.com/&#34;&gt;Linode&lt;/a&gt;、&lt;a href=&#34;https://www.conoha.jp/zh/&#34;&gt;Conoha&lt;/a&gt;等服务商，因为机房离国内近，相对美国的VPS有了速度优势。最近可能意识到墙内市场的潜力，有的日本VPS服务明显做的很贴咱的心了，比如我选的&lt;a href=&#34;https://www.z.com/&#34;&gt;z.com&lt;/a&gt;，它就是Conoha重新套了个壳，900日元每月的开销不算便宜也不很贵，但是它能用支付宝结帐！&lt;/p&gt;
&lt;h3 id=&#34;系统环境&#34;&gt;&lt;a href=&#34;#系统环境&#34; class=&#34;headerlink&#34; title=&#34;系统环境&#34;&gt;&lt;/a&gt;系统环境&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 要搭服务器，不论什么功能，稳定性是很重要的，虽然巨硬和IBM也分别有server产品，但是咱用不起，挑个Linux系统比较合适，至于Mac OS，你是要搭服务器，又不是要去星巴克。我Linux入门时选择的是最流行的发行版Ubuntu，于是VPS也挑了Ubuntu 14.04LTS的镜像，使用和练习都比较方便，上手快，国内大家爱用的还有CentOS和RedHat。就别选什么Desktop镜像了，DE占空间又浪费资源，就算有远程桌面，也没有必要用，SSH连接足矣。把公钥放Github，wget到服务器~&amp;#x2F;.ssh目录，改个名叫authorized_keys就行，多个公钥可以都放authorized_keys里面，一个一行就好。&lt;/p&gt;
&lt;h3 id=&#34;Dropbox&#34;&gt;&lt;a href=&#34;#Dropbox&#34; class=&#34;headerlink&#34; title=&#34;Dropbox&#34;&gt;&lt;/a&gt;Dropbox&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Dropbox是个云盘，跟国内遍地都是的云盘有几个不同点，首先是资历老，然后给的免费空间少（XDDDD），2GB，跨平台做得好，几乎所有系统平台都有客户端，最重要的是有一个文件实时同步功能（也许正是这个功能限制了免费空间的大小），最后，是的，国外的好东西一般是要被墙的，Dropbox也不例外。会科学上网的同学们可以各显神通去&lt;a href=&#34;https://www.dropbox.com/&#34;&gt;官网&lt;/a&gt;注册，下客户端试用一下。在VPS上装个Dropbox用来传文件简直方便，VPS网快，墙内下不动的东西也可以VPS下完从Dropbox拖回来。据说国内的金山快盘可以作为Dropbox的替代品，改天做个评测再发博文介绍下。别跟我提百度云，且不论它没有官方Linux客户端且免费空间太大，我对百度有偏见。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这篇文用到的就是Dropbox的自动同步功能，在各个终端的Dropbox文件夹内，内容都与云端进行实时同步。既然是个文件夹，那么里面放一个静态站也没有什么不可以了，2GB绰绰有余。&lt;/p&gt;
&lt;h3 id=&#34;Nginx&#34;&gt;&lt;a href=&#34;#Nginx&#34; class=&#34;headerlink&#34; title=&#34;Nginx&#34;&gt;&lt;/a&gt;Nginx&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt;读作engine X，是由Igor Sysoev（俄罗斯籍）为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。主要功能为静态网站的服务器、多服务端的负载均衡服务器即反向代理服务器。配置简单、高效、轻。既然是做静态站，我首选了Nginx作为服务器，Apache有点笨重，不做动态站就先不装了。&lt;/p&gt;
&lt;h3 id=&#34;Hexo&#34;&gt;&lt;a href=&#34;#Hexo&#34; class=&#34;headerlink&#34; title=&#34;Hexo&#34;&gt;&lt;/a&gt;Hexo&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 做什么样的静态站呢？这次直接把我的Hexo博客拿来做实验。&lt;a href=&#34;https://bipedalbit.net/2016/4/24/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/&#34;&gt;上篇文&lt;/a&gt;提到过，Hexo是个静态博客站生成器，&lt;code&gt;hexo g&lt;/code&gt;命令执行后，Hexo项目目录的public子目录下就是静态站的确切内容了。可以干脆把Hexo项目目录放在Dropbox文件夹中，每次&lt;code&gt;hexo g&lt;/code&gt;之后，自动更新静态站内容，同时Dropbox自动把静态站同步到VPS，VPS的Nginx不需要更改配置因为地址映射没有变化。于是我们现在可以在本地修改Hexo博客后自动发布更新到直连外网的VPS，还可以在任意一个向Github分发过SSH公钥的终端向Github Pages发布新的静态站内容。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不知到你们想到了什么，我觉得这个套路可以使VPS上维护一个经常预更新的静态站alpha版，Github Pages上维护一个比较稳定的静态站beta版。&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="hexo" />
        <category term="vps" />
        <category term="dropbox" />
        <updated>2016-04-25T06:05:09.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/04/24/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
        <title>hexo博客搭建</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/04/24/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 转眼三个多月没更博文了，并没有荒废只是有点忙。攒了很多想写的东西，先填个拖了很久的坑：我这个博客是怎么搭起来的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 总的来说，我的博客是由Github Pages维护，本地用Hexo管理的一个静态博客。这篇文里我将介绍搭建Github Pages+Hexo博客的过程。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在讲搭建流程之前需要铺垫一下，介绍几个基本概念，Github Pages、Hexo、域名和DNS服务。&lt;/p&gt;
&lt;h3 id=&#34;Github-Pages&#34;&gt;&lt;a href=&#34;#Github-Pages&#34; class=&#34;headerlink&#34; title=&#34;Github Pages&#34;&gt;&lt;/a&gt;Github Pages&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果想搭建一个自己的博客，首先你需要一个7×24不间断服务的稳定服务器。一般来说，geek们不会自己买一个，我们可以租一个云服务器。有更好的选择吗？有。我们也可以找到一些免费的云空间，比如新浪的SAE（以后没准就不免费了），还有我要讲的Github Pages。Github Pages是Github（如果你不知道Github是什么可以自己百度，这里我不太想解释）提供的一项福利，帮助广大geek们维护一个静态网站空间。静态网站就是页面内容不会随着数据库中数据的变化而动态的发生变化的网站，各大购物网站都是典型的动态网站。通常个人博客主要包含静态内容，就算需要修改更新，手动处理也完全足够，评论系统除外，但评论系统可以用第三方插件。于是这里有了分歧，一部分人选择了自己管理评论系统的数据库，还想偶尔在网站上玩点酷炫的动态网站花活，比如挂个网页游戏或者弹幕播放器，他们需要一个完全控制的云服务器，如SAE、百度云、腾讯云、Linode、Conoha等等；另一部分人希望让博客单纯一点，静态网站是更好的选择，Github向每一个用户帐号免费提供一个静态网站空间。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Github Page使用起来很简单，它的&lt;a href=&#34;https://pages.github.com/&#34;&gt;网站首页&lt;/a&gt;上有讲解，其实就是在Github新建一个repository，命名为username.github.io，其中username为你的Github用户名。这个repository就是你的静态网站空间了，访问它可以使用刚才的username.github.io，也就是Github Pages的二级域名。如果你是Github的用户，接下来你一定知道怎么更新网站内容了。&lt;/p&gt;
&lt;h3 id=&#34;Hexo&#34;&gt;&lt;a href=&#34;#Hexo&#34; class=&#34;headerlink&#34; title=&#34;Hexo&#34;&gt;&lt;/a&gt;Hexo&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hexo是一个开源的静态博客生成器，用node.js开发，作者是台湾大学生tommy351。这里我要提一句，node.js不是js，是基于谷歌v8引擎（js解析引擎）开发的一种服务端语言，语法与js没有什么两样，可以在http协议外（使用socket.io包）实现区别于AJAX的服务器主动推，鼓吹面向过程、基于消息机制的函数异步处理特性。Hexo封装了不止一种对免费服务器空间的接口，其中也包括Github的。这篇文里我准备介绍的是Github Pages搭配Hexo的搭建方式。&lt;/p&gt;
&lt;h3 id=&#34;域名与DNS&#34;&gt;&lt;a href=&#34;#域名与DNS&#34; class=&#34;headerlink&#34; title=&#34;域名与DNS&#34;&gt;&lt;/a&gt;域名与DNS&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 要怎么访问一个网站？你当然可以直接访问网站的IP地址，但是这不方便，大家一般都使用域名（Domain）。域名最右边的一节是域名后缀，通常用于标识域名类型，域名最右边的两节xxx.xxx作为一个整体通常表示一个顶级域名。它的左边可以再加若干节，如果加了，那些就都是顶级域名下的子域名了。为了完成特定域名（包括子域名）到特定IP的映射，需要一个DNS（Domain Name System）服务器，它将对特定域名的请求转发到特定的IP地址。&lt;/p&gt;
&lt;h3 id=&#34;Github-Pages-Hexo环境搭建&#34;&gt;&lt;a href=&#34;#Github-Pages-Hexo环境搭建&#34; class=&#34;headerlink&#34; title=&#34;Github Pages+Hexo环境搭建&#34;&gt;&lt;/a&gt;Github Pages+Hexo环境搭建&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hexo有一些依赖环境，但是它没有现成的安装包，开源项目嘛，无可厚非。首先你需要安装node.js环境，大家系统平台多种多样，怎么装就自己去&lt;a href=&#34;http://nodejs.cn/&#34;&gt;node官网&lt;/a&gt;上看吧；git客户端也是要装的，同理也自己去&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;官网&lt;/a&gt;看。此外我们还需要分发个SSH证书，就是把你计算机的公钥在Github帐号里复制一份，这样通过SSH方式连接Github时就可以验证你的身份，就不用输用户名密码了。而Hexo连接Github的方式就是走的SSH方式，所以这个步骤是必要的。win平台通常用SSH Client管理SSH连接，或者也可以用终端形式的putty或者SSH Secure Shell；Ubuntu下是&lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;；CentOS下是&lt;code&gt;sudo yum install openssh-server&lt;/code&gt;；Mac OS自带SSH客户端。私钥公钥生成和端口配置什么的我不是很想全都介绍，说个Ubuntu的吧，比较简单。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 没配git帐号的先配一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;git config --global user.email &amp;quot;你的邮箱&amp;quot;
git config --global user.name &amp;quot;你的Github用户名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 生成SSH密钥对：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;ssh -keygen -t rsa -C&amp;quot;前面配git时填过的邮箱&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后一路回车，然后你在&lt;code&gt;~/.ssh&lt;/code&gt;目录下就有了id_rsa和id_rsa.pub两个文件，它们分别是你的私钥和公钥，你需要把私钥登记一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;ssh-add id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来就是分发公钥了，你可以手动进id_rsa.pub复制公钥内容，也可以用系统工具复制：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;xclip -selection c  ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后登录Github并&lt;a href=&#34;https://github.com/settings/ssh&#34;&gt;Add SSH Key&lt;/a&gt;，给新公钥起个名粘贴进去就好。然后测试一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 提示信息包含“successfully authenticated”就算成功了。如果有问题，可以重新设置，常见问题请参考：&lt;br&gt;&lt;a href=&#34;https://help.github.com/articles/generating-an-ssh-key/&#34;&gt;GitHub Help - Generating SSH Keys&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://help.github.com/articles/error-permission-denied-publickey/&#34;&gt;GitHub Help - Error Permission denied (publickey)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来是为node安装Hexo包：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hexo封装了一些博客管理接口：&lt;br&gt;	&lt;br&gt;	hexo init &lt;folder&gt;  # 初始化目录，可以指定目录地址，我更喜欢进入目录后hexo init一下&lt;br&gt;	hexo n “title” # 创建新文章，你会在&amp;#x2F;source&amp;#x2F;_post目录下找到包含title的新md文档，你可以编辑它&lt;br&gt;	hexo s # 在本地查起服务查看效果，默认是访问0.0.0.0:4000&lt;br&gt;	hexo g # 为博客重新生成静态页面&lt;br&gt;	hexo d # 同步到Github Pages空间&lt;/p&gt;
&lt;h3 id=&#34;写博文&#34;&gt;&lt;a href=&#34;#写博文&#34; class=&#34;headerlink&#34; title=&#34;写博文&#34;&gt;&lt;/a&gt;写博文&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前面提到过，&lt;code&gt;hexo n&lt;/code&gt;之后我们就获得了一个新md文档，接下来你需要按照Markdown语法编辑这个文档。但Hexo的博文还需要包含一些必要内容以辅助页面关联及效果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中
date: 2016-4-25 11:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: #文章分类目录，可以为空，注意:后面有个空格
tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格
photos: #fancybox功能将要显示是图片集合
- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg
- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg
---
摘要
&amp;lt;!--more--&amp;gt;
这里开始使用markdown格式输入你的正文。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于Markdown语法，读者可以自行百度，网上很多。写完保存之后可以先&lt;code&gt;hexo s&lt;/code&gt;一下，去0.0.0.0:4000看效果，如果觉得满意，再&lt;code&gt;hexo g&lt;/code&gt;生成静态页面并&lt;code&gt;hexo d&lt;/code&gt;同步到Github Pages。注意这里生成的整个静态网站页面都在&amp;#x2F;public子目录下，你完全可以起一个服务器把本地80口映射到这里。&lt;/p&gt;
&lt;h3 id=&#34;主题安装&#34;&gt;&lt;a href=&#34;#主题安装&#34; class=&#34;headerlink&#34; title=&#34;主题安装&#34;&gt;&lt;/a&gt;主题安装&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hexo迄今为止已经衍生出了很多主题，主题列表&lt;a href=&#34;https://github.com/hexojs/hexo/wiki/Themes&#34;&gt;Hexo Themes&lt;/a&gt;，我的博客使用的是&lt;a href=&#34;https://github.com/xiangming/landscape-plus&#34;&gt;Landscape plus&lt;/a&gt;，一个专为中国大陆用户做过调整的Hexo主题，别的Hexo主题读者可以自己百度一下。&lt;code&gt;hexo init&lt;/code&gt;一个目录之后，把选定的主题&lt;code&gt;git clone&lt;/code&gt;到Hexo目录的themes子目录下，然后编辑&amp;#x2F;_config.yml：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;theme: themename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后配置一下主题下的_config.yml：&lt;br&gt;	&lt;br&gt;	menu: #配置页头显示哪些菜单&lt;br&gt;	#  Home: &amp;#x2F;&lt;br&gt;	  Archives: &amp;#x2F;archives&lt;br&gt;	  Reading: &amp;#x2F;reading&lt;br&gt;	  About: &amp;#x2F;about&lt;br&gt;	#  Guestbook: &amp;#x2F;about&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;excerpt_link: Read More #摘要链接文字
archive_yearly: false #按年存档

widgets: #配置页脚显示哪些小挂件
	- category
#  - tag
	- tagcloud
	- recent_posts
#  - blogroll

blogrolls: #友情链接
	- sitename: http://site.address
	- sitename: http://site.address
	- sitename: http://site.address

fancybox: true #是否开启fancybox效果，就是文章开头加一个电子相册的感觉

duoshuo_shortname: username #多说账号

google_analytics:
rss:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 要更新主题只需要从Github拉取主题内容即可&lt;code&gt;cd themes/modernist&lt;/code&gt;然后&lt;code&gt;git pull&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;评论插件&#34;&gt;&lt;a href=&#34;#评论插件&#34; class=&#34;headerlink&#34; title=&#34;评论插件&#34;&gt;&lt;/a&gt;评论插件&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 有很多免费的第三方评论插件提供商，你可以通过简单的配置使用他们的数据库管理你网站的评论数据，hexo默认集成的是Disqus，但是有GFW存在，所以我选择了国内的&lt;a href=&#34;http://duoshuo.com/&#34;&gt;多说&lt;/a&gt;。直接用你的微博&amp;#x2F;豆瓣&amp;#x2F;人人&amp;#x2F;百度&amp;#x2F;开心网帐号登录多说，做一下基本设置。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以&lt;a href=&#34;http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017&#34;&gt;参考这里&lt;/a&gt;。如果你是有的其他第三方评论系统，将通用代码粘贴到&amp;#x2F;themes&amp;#x2F;themename&amp;#x2F;layout&amp;#x2F;_partial&amp;#x2F;comment.ejs里面：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;lt;% if (config.disqus_shortname &amp;amp;&amp;amp; page.comments)&amp;#123; %&amp;gt;
&amp;lt;section id=&amp;quot;comment&amp;quot;&amp;gt;
  #你的通用代码
&amp;lt;% &amp;#125; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;域名配置&#34;&gt;&lt;a href=&#34;#域名配置&#34; class=&#34;headerlink&#34; title=&#34;域名配置&#34;&gt;&lt;/a&gt;域名配置&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 国内域名服务商有万网、腾讯、阿里、美橙等等，国外推荐&lt;a href=&#34;http://www.godaddy.com/&#34;&gt;狗爹（godaddy）&lt;/a&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 买完域名你需要给域名指定DNS服务器。DNS服务商非常多，一般域名服务商和云主机服务商都提供DNS服务，我选择的是国内的&lt;a href=&#34;http://www.dnspod.cn/&#34;&gt;DNSPod&lt;/a&gt;，免费的，提供监测网站状态功能，还挺好用。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 域名服务商和DNS服务商那边的配置它们各自网站都会提供教程，自己网站空间中给静态网站绑定域名很简单，在网站根目录放一个叫CNAME的文档，里面填上你的域名就行了。&lt;/p&gt;
&lt;h3 id=&#34;参考文章&#34;&gt;&lt;a href=&#34;#参考文章&#34; class=&#34;headerlink&#34; title=&#34;参考文章&#34;&gt;&lt;/a&gt;参考文章&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;http://ibruce.info/2013/11/22/hexo-your-blog/&#34;&gt;http://ibruce.info/2013/11/22/hexo-your-blog/&lt;/a&gt;（大大的教程写的真心详细，基本就是这篇领我进门）&lt;/p&gt;
</content>
        <category term="github" />
        <category term="domain" />
        <category term="DNS" />
        <category term="hexo" />
        <updated>2016-04-24T13:02:39.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/01/06/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0/</id>
        <title>微博爬虫之代理池</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/01/06/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前一个版本的微博爬虫每发送一个HTTP请求就需要等待若干秒，模拟人类操作，避免引起服务器的注意，以至于每个请求平均耗时高达3秒。为了防止被服务器封禁，显然应该使用代理，伪装自己HTTP请求的来源。至于如何获取代理，如何使用这些代理，我进行了一些思考与探索，并完善上个版本的微博爬虫工具包，完成了新版的微博爬虫。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我的第一个思路是，找到提供大量免费代理的网站（自己找，本文不点明），爬取代理，然后用多线程的方式成组发送请求。虽然获取代理的过程很顺利，但是我很快发现了这个思路的一些问题。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，成组多线程并发请求的话，&lt;strong&gt;下一页链接&lt;/strong&gt;没法使用同一个序列，即可能需要先获取页数然后做页码区间划分，再把每个区间分配给不同的代理。可是如果某个代理中途失效了怎么办？就算不考虑这种情况，理论上，每组请求之间还是需要加平均3秒的延迟，实际上，受IO上限的影响，16线程的成组请求，等到全部响应完大概需要10+秒，这样一来组间延迟省掉也无所谓，可是即使在只使用优质代理的情况下每次请求的均摊时间开销也要1.+秒，虽然效率比不使用代理有所提高，但是我仍然不满意。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 随后我放弃了对多线程并发的执念，提出并完善了一个新思路——单线程爬虫＋带时间戳的代理池＋代理竞争。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 先解释单线程爬虫，有了代理池其实已经基本不用担心代理失效的问题，但是为了实现方便，我还是暂且选择了单线程爬虫。下一个版本也许会在整个爬虫外面套一层并发，也许会考虑使用协程（coroutine）技术。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来是带时间戳的代理池和代理竞争。我们知道，每一个代理在发出一个请求后需要等待一个平均3秒的随机时间后才可以再次发送请求。那么，如果我们使用过一个代理之后就暂时给它上锁（实际上是打上一个时间戳），到时间后（当前时间的时间戳与代理时间戳差值超过随机延时）则给它解锁就可以解决单个代理的使用问题。同时，我们在所有代理之间轮询寻找没上锁的代理来使用，而每次请求的响应时间会积累下来，考虑到使用代理的请求响应时间比较长，顶多五六个代理之后旧代理就已经解锁了。而实际上，我的代理池维护的代理数通常不会少于6。即使代理全都上了锁，我也可以等待1秒后重新轮询。于是，只要保证代理池足够大，同时维护代理池中代理的质量，我们就可以实现连续发送请求，事实上，经过实验，代理响应时间受代理质量影响有所浮动，平均请求周期最长达到过6&amp;#x2F;7秒，最短达到过5&amp;#x2F;3秒。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于维护代理池的方法，我从爬虫进程fork了一个守护进程用来更新代理池。定时（暂定30秒）爬取代理网站某页面上的100个代理，然后用多线程（暂定16线程）测试每个代理的响应时间，过滤掉响应太慢（暂定超时时间为3秒）的代理，用同样的方法过滤代理池中不在新代理列表中的代理，最后合并代理池和新代理列表，同时为新代理打上很小的时间戳（实际上是0），已有的代理时间戳不变。这样可以在代理损失的过程中不断扩充代理，使代理池的规模稳定甚至递增（经过实验，基本能使代理池大小保持稳定，没有出现代理池暴增的情况，暂时不对代理池大小加以限制）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关于新思路的实现，我在重构weibo-crawler后新建了weibo-crawler2项目，按惯例已挂&lt;a href=&#34;https://github.com/bipedalBit/weibo-crawler2&#34;&gt;git&lt;/a&gt;。下面是一些weibo-crawler2的使用截图：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/crawler2%E5%8C%85%E9%85%8D%E7%BD%AE.png&#34; alt=&#34;图１ crawler2包配置&#34; title=&#34;__init__.py&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/%E7%88%AC%E8%99%ABCLI%E8%BE%93%E5%87%BA.png&#34; alt=&#34;图２ 爬虫CLI输出&#34; title=&#34;爬虫CLI输出&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/%E7%88%AC%E8%99%AB%E6%97%A5%E5%BF%97.png&#34; alt=&#34;图３ 爬虫日志&#34; title=&#34;爬虫日志&#34;&gt;&lt;br&gt;&lt;strong&gt;悲报，weibo.cn登录需要验证码了。刚开始验证码还比较弱，我正想着过完年要不要用深度学习破了它，然后验证码就变得更变态了…模拟登录模块报废。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <category term="proxy" />
        <updated>2016-01-05T17:02:08.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2016/01/02/weibo-cn%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%99%A8%E7%9A%84python%E9%87%8D%E6%9E%84/</id>
        <title>weibo.cn模拟登录器的python重构</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2016/01/02/weibo-cn%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%99%A8%E7%9A%84python%E9%87%8D%E6%9E%84/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前封装过一个完整的微博爬虫工具包，但是在我查找python多进程爬虫的相关资料时发现，其实使用urllib2写网络爬虫已经是陈年往事，如今大家都用requests包，就像明明有.NET和Qt框架偏偏要用MFC框架，我是自找麻烦了。在使用requests包逐个重构网络爬虫部件的时候，对weibo.cn的模拟登录过程有了一些新的理解，于是来写篇文介绍一下。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们再来重新分析一遍weibo.cn的登录过程。出发前先来检查一下装备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firefox浏览器&lt;/li&gt;
&lt;li&gt;一个firefox浏览器下的HTTP报文记录分析插件——httpfox&lt;/li&gt;
&lt;li&gt;python2语言环境——python 2.7&lt;/li&gt;
&lt;li&gt;一个python HTTP包——requests&lt;/li&gt;
&lt;li&gt;一个python XML解析包——BueatifulSoup4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 妥，先来用httpfox记录一下手工登录的过程：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E5%BE%AE%E5%8D%9A%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%80%BB%E8%A7%88.png&#34; alt=&#34;图１ weibo.cn模拟登录过程总览&#34; title=&#34;weibo.cn模拟登录过程总览&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 无视掉第二条失败的图片请求，剩下的就是weibo.cn登录的全过程。我们逐条分析：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E5%BE%AE%E5%8D%9A%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/%E8%AF%B7%E6%B1%82%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png&#34; alt=&#34;图２ 请求登录页面&#34; title=&#34;请求登录页面&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上图中是第一条请求的报文头部分，第一条请求是在访问weibo.cn的登录页面。请求到的页面源码中，掐头去尾，比较关键的部分如下：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;?backURL=http%3A%2F%2Fweibo.cn%2F&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;backTitle=%E5%BE%AE%E5%8D%9A&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;vt=1&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;revalid=2&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;ns=1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;		手机号/电子邮箱/会员帐号:&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;size&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;30&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		密码:&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password_3523&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;size&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;30&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;remember&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;checked&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checked&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;记住登录状态，需支持并打开手机的cookie功能。&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;backURL&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http%3A%2F%2Fweibo.cn%2F&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;backTitle&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;微博&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tryCount&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vk&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3523_4ea5_1803939589&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登录&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到表单的action地址、密码输入框的name、隐藏变量vk的值都是变动的，这三样东西正是我们在模拟登录时需要从登录页面解析获得的。对应的python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 尽管不设置报文头也不会被新浪服务器阻拦，还是做一些必要的伪装与配置比较保险&lt;/span&gt;&lt;br&gt;headers = &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;User-Agent&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;DNT&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Connection&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;keep-alive&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Cache-Control&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;max-age=0&amp;#x27;&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;get_post_needs&lt;/span&gt;():&lt;br&gt;	url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://login.weibo.cn/login/?ns=1&amp;amp;revalid=2&amp;amp;backURL=http://weibo.cn/&amp;amp;backTitle=微博&amp;amp;vt=&amp;#x27;&lt;/span&gt;&lt;br&gt;	text = requests.get(url, headers=headers).text&lt;br&gt;	soup = BeautifulSoup(text, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;lxml&amp;#x27;&lt;/span&gt;)&lt;br&gt;	action_url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://login.weibo.cn/login/&amp;#x27;&lt;/span&gt; + soup.form[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;]&lt;br&gt;	password_tag = soup.find(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;)&lt;br&gt;	password_name = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;(?&amp;lt;=name=&amp;quot;)\w+(?=&amp;quot;)&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(password_tag)).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;	vk_tag = soup.find(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;, attrs = &amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;&amp;#125;)&lt;br&gt;	vk = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;(?&amp;lt;=value=&amp;quot;)\w+(?=&amp;quot;)&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(vk_tag)).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; action_url, password_name, vk&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 页面解析完毕还需要填充表单，对应的python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;get_post_data&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;username, password, password_name, vk&lt;/span&gt;):&lt;br&gt;	form_data = &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;mobile&amp;#x27;&lt;/span&gt;: username,&lt;br&gt;		password_name: password,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;remeber&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;on&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backURL&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backTitle&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;微博&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;tryCount&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;: vk,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;submit&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录&amp;#x27;&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; form_data&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 填充完登录表单，就该post出去了，由４个连续的状态码为302的请求不难看出，发送的post请求随后被进行了足足４次重定向。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到，第一次重定向后，请求访问了newlogin.sina.cn，此时新浪服务器已经给我们的请求加上了两个cookie字段（httpfox可以以字典的形式查看每个请求的cookie字段，这里我就不上图了），一个叫“_T_WM”另一个叫“SUB”，虽然不明白这两个字段的含义，但是经过实验得知，其实这个“SUB”字段就可以用来做登录验证了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 第二次重定向请求访问了passport.weibo.com，这次新浪服务器给请求重新填充了许多cookie字段，但是仍然包含一个“SUB”字段，没错，这此的“SUB”也可以拿来做登录验证。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类似的，第三次访问weibo.cn的重定向也填充了新cookie字段，我们又获得了一个可用的“SUB”字段。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于最后一次重定向，只是通过一个几乎纯JavaScript组成的页面让我们以已登录的状态跳转到前面表单参数中的backURL指向的页面。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在使用python记录cookie字段时需要注意，这种经过若干次重定向的”长会话“不能直接使用Request对象来发送最初的post请求，而是需要一个能处理”长会话“的Session对象的帮助，获得cookie字段的对应python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wap_login&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;username, password&lt;/span&gt;):&lt;br&gt;	url, password_name, vk = get_post_needs()&lt;br&gt;	data = get_post_data(username, password, password_name, vk)&lt;br&gt;	session = requests.Session()&lt;br&gt;	response = session.post(url, headers=headers, data=data)&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 以下三种来自不同domain的名为SUB的cookie字段都可以用来验证登录状态&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# return session.cookies.get(&amp;#x27;SUB&amp;#x27;, domain=&amp;#x27;.sina.cn&amp;#x27;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# return session.cookies.get(&amp;#x27;SUB&amp;#x27;, domain=&amp;#x27;.weibo.com&amp;#x27;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; session.cookies.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB&amp;#x27;&lt;/span&gt;, domain=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.weibo.cn&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 拿到了必要的cookie字段，模拟登录过程其实就已经完成了，接下来我们也可以用下面的代码测试一下cookie字段是否管用：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/moegirlwiki&amp;#x27;&lt;/span&gt;&lt;br&gt;username = raw_input(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;请输入新浪通行证用户名：&amp;#x27;&lt;/span&gt;)&lt;br&gt;password = getpass(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;请输入新浪通行证密码：&amp;#x27;&lt;/span&gt;)&lt;br&gt;cookies = &amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB&amp;#x27;&lt;/span&gt;: wap_login(username, password)&amp;#125;&lt;br&gt;response = requests.get(url, cookies=cookies)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录成功！&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; response.url == url &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录失败！&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果读者接触过weibo.com的模拟登录过程想必明白，weibo.cn的登录过程简单多了，更重要的是，必要cookie字段在weibo.cn和weibo.com是通用的，那我们又何必选择更麻烦的模拟登录途径呢？&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <category term="模拟登录" />
        <updated>2016-01-02T04:47:05.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/12/28/python%E7%BB%83%E6%89%8B%E4%B9%8B%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/</id>
        <title>python练手之微博爬虫</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/12/28/python%E7%BB%83%E6%89%8B%E4%B9%8B%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从半年前声称完成python入门以来，从来没有进行过非API调用的python实战，之前的BP神经网络python版也只是用了pybrain包提供的API而已。惊觉这样下去可能直到我把python语法忘干净都不敢说自己真的掌握了python，但是仍然无所事事拖到大概20天前，室友实验室发下任务要写个Java爬虫，我才决定同时写个python爬虫看看能不能体现下python开发效率的优势。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;1-什么是网络爬虫&#34;&gt;&lt;a href=&#34;#1-什么是网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;1. 什么是网络爬虫&#34;&gt;&lt;/a&gt;1. 什么是网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在展开介绍我的python爬虫程序之前先来回顾一下网络爬虫实际上要做些什么事。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从结果来看，网络爬虫是一种&lt;strong&gt;从互相关联的互联网网页上批量获取网页数据的技术手段&lt;/strong&gt;。从流程上来看，爬虫程序是一个递归过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（１）请求网页数据，开始步骤（２）；&lt;/li&gt;
&lt;li&gt;（２）解析网页数据，分别解析出&lt;strong&gt;目的数据&lt;/strong&gt;和请求下一个网页的&lt;strong&gt;超链接地址&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;（３）如果不再有符合条件的&lt;strong&gt;超链接地址&lt;/strong&gt;则结束递归过程，否则回到步骤（１）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从图论的角度看，如果把网页看成搜索树的状态结点，那么常见的网络爬虫可以看成是一个单一分支的深度优先搜索，当然用于搜索引擎的网络爬虫则常常需要解析出网页中蕴含的多个搜索分支，这就更像我们熟悉的深度优先搜索了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 怎么样，其实很简单吧。计算机技术中最通用的技术，其原理往往是最简单的。&lt;/p&gt;
&lt;h2 id=&#34;2-为什么需要网络爬虫&#34;&gt;&lt;a href=&#34;#2-为什么需要网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;2.为什么需要网络爬虫&#34;&gt;&lt;/a&gt;2.为什么需要网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 网络爬虫最常见的应用场景就是获取（遍历）多页数据列表中的所有数据，比如获取网易云音乐某个歌单中的所有音乐地址甚至音乐数据本身，又比如获取豆瓣电影某个主题下的所有电影。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 事实上，互联网时代到来之后，大数据时代接踵而至，计算机乃至其他领域的大量实验数据都来自互联网。除了直接从服务器获得数据之外，最普遍的数据获取途径就是通过最大的开放性数据来源WWW（世界范围Web）网络来请求数据了，毕竟比起HTTP协议，其他应用层通讯协议太多太杂太难分析，也不够开放。于是爬虫也成为了一种大量实验数据的获取手段。&lt;/p&gt;
&lt;h2 id=&#34;3-怎么实现网络爬虫&#34;&gt;&lt;a href=&#34;#3-怎么实现网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;3. 怎么实现网络爬虫&#34;&gt;&lt;/a&gt;3. 怎么实现网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我选择了python作为写网络爬虫的语言，事实上据我所知，Java、PHP、C++、Ruby、Perl等我们熟知的绝大多数完善的编程语言都能用来写网络爬虫，或者说，只要有网络通信库的语言都可以用来写网络爬虫。其实相对来说，python的网络通信库还是很发达的，再加上python语言语法的简洁性和数据结构操作天生的灵活性，我觉得用python写网络爬虫没准是最快的。（别说Java可以用封装好的现成爬虫Jar包，没有可比性）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们通过实例来了解网络爬虫的实现过程。我选择了新浪微博作为爬虫对象，具体来说是将特定新浪微博用户的微博主页作为爬取对象。这里有两点需要注意：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，我选择的是&lt;a href=&#34;http://weibo.cn/&#34;&gt;微博移动版&lt;/a&gt;的页面而非&lt;a href=&#34;http://weibo.com/&#34;&gt;PC版&lt;/a&gt;的页面作为爬取对象。移动版的页面结构非常简单而且不含任何JavaScript成分，微博数据相对很容易解析出来，而PC版的页面所有的微博数据都由JavaScript填充，虽然不至于找不到数据但是XML结构之外解析数据就几乎要全靠正则表达式了。此外虽然PC版的页面看起来蕴含更多信息，但是许多信息都是通过JavaScript，通过AJAX技术动态向服务器申请来的。如果选择PC版页面作为爬取对象，将大量增加页面解析难度，甚至可能需要让爬虫过程发生嵌套，使整个爬虫流程十分复杂。如果数据能从移动版页面获取，尽量不要选择解析PC版页面。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后，需要想办法获得登录微博后的cookie，或者cookie的必要字段。微博跟早期的百度贴吧不一样，不登录微博账号的话什么微博数据都看不到。平时我们的浏览器如果没有保存微博登录后的cookie，在访问包含微博数据的页面地址时，HTTP请求会被重定向到登录页面。只有在访问页面时令HTTP请求报文头中携带登录后的cookie，该请求才被服务器认定为合法请求，才会正常的返回被请求的页面。获取cookie有两种途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过各种浏览器的HTTP报文抓取插件，从HTTP请求的文件头中提取出现成的cookie；&lt;/li&gt;
&lt;li&gt;模拟微博账号登录过程，在登录完成之后的第一次页面访问请求的HTTP报文头中提取出cookie。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-1-python下的HTTP请求&#34;&gt;&lt;a href=&#34;#3-1-python下的HTTP请求&#34; class=&#34;headerlink&#34; title=&#34;3.1 python下的HTTP请求&#34;&gt;&lt;/a&gt;3.1 python下的HTTP请求&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; python下如何完成一次HTTP请求并获得返回的页面数据？哦顺便一说我用的是python2，python3应该区别不大。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; urllib2&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; urllib2.urlopen(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;www.baidu.com&amp;#x27;&lt;/span&gt;).read()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 完了？完了。是不是很简单？python大法好！开个玩笑不要在意，上面的两行代码只是实现了最简单的默认请求形式及返回数据的获取。实际上urllib2类的urlopen方法参数可以是一个url或者是一个封装好的Request对象，返回值是一个封装好的Response对象。python的网络编程确实很简单直观，我不想细说，至于urllib2的具体的各种相关python API，请自行查阅&lt;a href=&#34;https://docs.python.org/2/library/urllib2.html&#34;&gt;手册&lt;/a&gt;或者等下看我的源码。&lt;/p&gt;
&lt;h3 id=&#34;3-2-页面解析&#34;&gt;&lt;a href=&#34;#3-2-页面解析&#34; class=&#34;headerlink&#34; title=&#34;3.2 页面解析&#34;&gt;&lt;/a&gt;3.2 页面解析&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 页面解析是爬取页面数据后的后续操作，我们实际需要的数据往往蕴含在页面源码之中，最简单粗暴的解析方式就是观察页面源码然后用正则表达式匹配出需要的数据字段。此外既然页面源码的组织方式是HTML，而HTML是一种XML结构，那么我们就可以用一些XML解析工具比如BueatifulSoup、XPath来辅助页面解析。这些工具比较容易寻找到整个HTML文本数据中需要的标签，接下来再用正则表达式简单处理一下，数据就不难获得了。顺便一提，python的正则表达式包叫做re，用法参见&lt;a href=&#34;https://docs.python.org/2/library/re.html&#34;&gt;手册&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-3-模拟登录&#34;&gt;&lt;a href=&#34;#3-3-模拟登录&#34; class=&#34;headerlink&#34; title=&#34;3.3 模拟登录&#34;&gt;&lt;/a&gt;3.3 模拟登录&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 固然，我们可以偷懒一直选择填入现成的cookie，但是须知，cookie都是有时限或者说寿命的，一定时间后，cookie会过期失效，不再合法。这时就需要重新登录获得一个新的cookie了。虽然cookie过期并没有那么快，但是总是需要有人在侧监视，随时更换cookie来维持比较长的爬虫过程，岂不是显得很low很不自动化？所以大部分比较大、比较正式的爬虫程序都会选择实现特定网站的模拟登录过程。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 具体到微博上来，weibo.com即PC版微博网站的登录过程网上有相当多的分析文章，比如&lt;a href=&#34;http://www.douban.com/note/201767245/&#34;&gt;这篇&lt;/a&gt;、&lt;a href=&#34;http://www.cnblogs.com/myx/archive/2011/10/19/Sina-SSO.html&#34;&gt;这篇&lt;/a&gt;和&lt;a href=&#34;http://www.360doc.com/content/15/0514/19/13228794_470491590.shtml&#34;&gt;这篇&lt;/a&gt;。读者需要注意的是，据我所知weibo.com的登录过程微调十分频繁，写一个weibo.com模拟登录可能几个月后就需要根据新浪的微调调整代码了。至于weibo.cn，网上简单的找找似乎没有发现分析文章。但是当时据我猜测，weibo.cn的登录过程应该比weibo.com简单（事实证明确实如此），登录过程微调后修改代码也会更容易。而登录后的cookie，经过我的实验，是通用的。也就是说不论在weibo.cn还是weibo.com，登录后产生的细节各不相同的cookie可能有一个共同部分是用来验证登录状态的（事实再次证明确实如此）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我使用的HTTP报文抓取插件是firefox下的HttpFox，同类插件还有httpwatch、firefox的自带工具、chrome的自带工具，甚至一些较新版本的IE自带工具。记录登录过程，分析跳转了哪些地址，有几次重定向，期间请求携带了哪些数据，cookie有什么变化。这里我简单说下weibo.cn的登录过程。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 总体来说weibo.cn的登录过程分成三个步骤，请求登录页面，获取一些post登录信息的必要参数；post登录信息表单；等待。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 登录页面中的action（post目标地址）、加后缀的密码数据键名（如password_2358）和一个叫做vk的数据都是提交登录表单时必要的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之后就要把表单加工成为可填入Request对象的形式，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;form_data = &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;mobile&amp;#x27;&lt;/span&gt;: username,&lt;br&gt;	password_name: password,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;remeber&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;on&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backURL&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backTitle&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;微博&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;tryCount&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;: vk,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;submit&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;form_data = urllib.urlencode(form_data)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 提交表单后新浪服务器会对这一请求进行４次重定向，注意每次重定向都需要提取并重填充cookie字段，因为python的默认重定向处理类不会重填cookie，重写的重定向处理方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyRedirectHandler&lt;/span&gt;(urllib2.HTTPRedirectHandler):&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	继承urllib2.HTTPRedirectHandler类，封装http_error_302方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	在自动执行重定向发送新的HTTP请求前提取附在请求头中的cookie，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	提取cookie中模拟登录必需的字段并存储在类成员变量中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 类成员变量，存储以登录状态访问新浪微博必需的cookie字段&lt;/span&gt;&lt;br&gt;	cookie = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;http_error_302&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, req, fp, code, msg, headers&lt;/span&gt;):&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;		添加cookie处理过程，然后调用原http_error_302方法执行自动跳转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;		&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;		cookie = &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(headers[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt;])&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB=.+?;&amp;#x27;&lt;/span&gt;, cookie) &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;:&lt;br&gt;			MyRedirectHandler.cookie = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB=.+?(?=;)&amp;#x27;&lt;/span&gt;, cookie).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;		req.add_header(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Cookie&amp;quot;&lt;/span&gt;, cookie)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; urllib2.HTTPRedirectHandler.http_error_302(&lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;, req, fp, code, msg, headers)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后一次重定向几乎是一个纯JavaScript页面，做的事情是通过JavaScript跳转向一个地址。实验证明最后这一次跳转对于登录过程并没有什么意义，看起来是故弄玄虚。记得我们刚才重写的重定向处理方法吗？我们在重不断重填cookie的过程中也记录了cookie某个字段的更新情况，最后，我们手里有那个字段的最新值。这个cookie字段正是微博登录验证唯一必需的cookie字段。至于我怎么知道是这个字段，对照实验。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 是不是比weibo.com的登录过程简单多了？&lt;/p&gt;
&lt;h3 id=&#34;3-4-可能的改进&#34;&gt;&lt;a href=&#34;#3-4-可能的改进&#34; class=&#34;headerlink&#34; title=&#34;3.4 可能的改进&#34;&gt;&lt;/a&gt;3.4 可能的改进&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 读者可能发觉了，每次请求的间隔长达几秒，这个爬虫程序与其说是一个高效获取数据的工具，不如说是一个模拟人类操作的脚本而已。简单概括一下就是，爬取页面太慢了。那么如何改进呢？并行化。模拟一个人的访问太慢，那么模拟更多人的访问就好。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 并行改进有几个层次，硬件架构的并行化（多核，流水线，长指令等等）、多线程、多进程和分布式。硬件层次的改进对我们这个爬虫程序意义不大，多线程在别的语言中当然可行，可是据我所知，python中的多线程性能收到了限制，python中应该尽量使用多进程。在多进程的基础上，实现完善的分布式通信，就能做分布式并行了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 有读者可能会想到，直接把程序改成多进程的难道不是相当于加大了请求频率而已？是的，确实是这样，所以进程间应该“完全独立”，一个进程被新浪服务器封禁，不应该影响其他进程。这里就涉及一个问题，新浪服务器封禁的是微博账号还是IP地址呢？经过实验答案是IP地址，实际上，目前大多数服务器的反DDoS机制就是封IP。这就好办了，微博账号申请还相对麻烦，可是免费或收费的IP代理却很容易批量获得。比如&lt;a href=&#34;http://www.xicidaili.com/&#34;&gt;这里&lt;/a&gt;，其中免费的可以直接爬取，肯花钱就能直接获得官方批量代理的接口。当然，广域网分布式具有天然的互异IP，也可以选择使用多台机器，不使用代理。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 全文基本没讲解代码是不是有点过分？这次确实有点偷懒，但是源码里注释写的还是挺详细了。上干货，我把完成的单进程python微博爬虫简单封装了一下，挂在了&lt;a href=&#34;https://github.com/bipedalBit/weibo-crawler&#34;&gt;自家git仓库&lt;/a&gt;。&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <updated>2015-12-28T13:53:49.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/12/05/%E7%94%B1%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E7%B1%BB%E8%84%91%E7%8E%B0%E7%8A%B6%E5%B1%95%E5%BC%80/</id>
        <title>由人工神经网络和类脑现状展开</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/12/05/%E7%94%B1%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E7%B1%BB%E8%84%91%E7%8E%B0%E7%8A%B6%E5%B1%95%E5%BC%80/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 今天听了个讲座，是一位鹅厂智库，是个博士，讲的关于互联网、人工智能与大脑的一些遐想。简单地说，就是认为互联网与大脑在形式上已经很相似了，可以借鉴脑神经科学来发展互联网，也可以用互联网的发展来反观大脑得到脑科学方面的启发。讲座期间提了一下人工智能，尤其是人工神经网络和类脑对大脑的仿生。讲座上我对ANN和类脑的技术现状有了一些思考，对互联网与脑神经科学的联系也有了一些自己的看法。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;1-人工神经网络现状&#34;&gt;&lt;a href=&#34;#1-人工神经网络现状&#34; class=&#34;headerlink&#34; title=&#34;1 人工神经网络现状&#34;&gt;&lt;/a&gt;1 人工神经网络现状&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前&lt;a href=&#34;http://blog.bipedalbit.net/2015/10/9/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/&#34;&gt;自科普BP神经网络&lt;/a&gt;的时候提到过人工神经网络的仿生模型，看起来好像很有道理很靠谱，但是这个研究方向上出现过瓶颈。从前的单纯“神经网络”如BP，远远无法与人脑甚至小白鼠的大脑相提并论，几十几百个神经元，顶多也就模拟一下应激性或简单的反射行为，别说逻辑思考，就连动物本能的模拟都做不到。原因很简单，ANN的结构太简单了，真正的人的神经网络由上亿量级的神经元组成，其中包括了上百万个互相联系的与ANN同量级的反射组件。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2006年之后，Deep Learning兴起，老实说我实在不太看得惯学界一些炒概念的行为，DL其实是提出了一些层数更多的ANN的可行解。比如CNN，在普通BP网络的前面加了若干曾卷积层，特化了BP的图像处理功能，做的事情类似于为简单反射添加了视网膜对图像的前期处理过程，可是由于BP的单一的简单的结构，仍然只能称作是复杂一点的反射模拟；又比如DBN，一节一节的增益、传递BP的前馈效应，节与节之间通过置信过程进行了信息的提纯，在我看来虽然真正有了模拟多层反射组件的趋势，结构仍然单一而简单，做的事情类似于手脚到大脑的长程简单反射行为。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我不觉得DL真的突破了ANN的瓶颈。然而到了DL的程度，计算机的优势——硬件效率已经捉襟见肘。因为分布式集群难以达到能模拟上亿神经元或者说上百万反射组件&lt;strong&gt;并行交互&lt;/strong&gt;的规模。这里就涉及了赛博世界的壁垒：宇宙中任何简单的过程都是在各种规则的限制下并行发生，各自独立进行的。而计算机一次却只能模拟一个简单物理过程，仅凭当前的技术再怎么并行化计算，并行量相对于一颗宇宙砂砾——生物的量级仍然嫌少。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 此外，即使假设我们已经拥有支持超大并发量的量子计算机，我们仍然需要组织更复杂的神经网络结构。在各种科幻作品中，AI之所以强大到令人类恐惧，是它们具备了自行学习，自组织自身结构的能力。也许你会说ANN不是已经能自行学习了吗？但是ANN乃至DL的学习结果被AI掌握了吗？不，连AI本身都还不存在，学习结果只能呈现给人类。那么这里我要说，AI更加重要，或许最重要的一项素质其实是结构自组织的能力。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 你可能会问，人类的脑神经似乎也没有怎么调整结构啊，怎么具有如此高的智能程度？我要驳斥两点，首先，现在看到的每一个人类个体的脑神经结构都是不是凭空产生的，亿万年的生物史中人类这条智慧生物演化线上调整自身的脑神经结构的过程从来没有停止过；其次，即使是一个固定人类个体，他的脑神经网络结构也是在进行自调整的，神经细胞的生长、萎缩、换代在人的一生中一直在进行，这不能单纯的映射为ANN中神经元间连接权重的调整，神经元的层次结构也在发生变化。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 谈及自适应的自结构调整我们要打住，我还得引入一下类脑的设想与技术现状。&lt;/p&gt;
&lt;h1 id=&#34;2-类脑现状&#34;&gt;&lt;a href=&#34;#2-类脑现状&#34; class=&#34;headerlink&#34; title=&#34;2 类脑现状&#34;&gt;&lt;/a&gt;2 类脑现状&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类脑是近两年炒起来的新概念，在我看来真正的类脑科技的前置科技还没有准备好，类脑这个概念来的太早了。我的根据有两点。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，且不说具备自适应调整物理结构能力的类脑，即使要模拟一个静态的人脑物理结构，我们都很难做到，我们做不到那么大的并行量；我们没有量子计算机技术；我们能支撑的的分布式计算规模远不够大；我们不知道如何设计、组装各种反射部件（现在的ANN）成为一个成体系的具有综合思维能力和抽象逻辑能力的真正的神经网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 那么让人造物自适应的调整结构自己模拟一个优秀的脑神经网络呢？这是个好主意，通过现有经验的优化，人造物的演化速度可以比自然界中的生物快得多，且更有方向性。但是我们没有能够自行组合甚至仅仅是互相交互的纳米机器人技术，我们连会合体组合变形的机器人小组都都没有。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我要这么说，要在硬件层面搞脑神经结构仿生，如果不抛弃纯机械处理单元，我们走不了多远。也许有读者注意到我隐约指出了硅基计算机之外的另一条技术道路。没错，除了量子计算机，我们还可以选择生物计算机，如果赛博世界无法创造出来，我们就用生化技术制造大量生物的处理单元完成巨量并行计算。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 更有甚者，我们可以直接把现有的哺乳动物个体乃至人类个体人道的接入高效通信的硅基网络，走人工蜂巢思维的路子。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 但不管怎么说，在我看来，现在所谓的带记忆的计算机计算部件的思路，实在是太保守也太天真了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 但是要注意，我没有说非硬件的类脑不可实现，我们的专用分布式集群或许规模有限，但是互联网中终端的规模还是在不断扩大的。如果把互联网看做一个包含海量资源的物理世界，那么互联网中的每一个线程，都可以对应物理世界中的一个简单物理过程。一个程序虽然无法动态自适应的改变自身，但是如果把一个程序看成是一个生物个体呢？生物个体是可以死的，但是生物会在繁衍的过程中微调遗传因子，完成本种族的物理结构自调整，这种调整甚至可以是多版本、有分支的。是的，程序可以根据特定外部信息有方向的修改扩充自己的源码（毕竟程序一经编译就脱离与源码的联系了，就算是解释型语言的程序，执行完当前语句时，改动之前的语句也不会对程序的整体执行过程造成影响），然后命令编译新版本的源码，并运行新的可执行程序。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 简单而实际的说，我们可以把只会单纯复制自身的病毒程序，变成朝生夕死的蝼蚁。但是这些蝼蚁在繁衍（复制）的过程中可以根据我们赋予它们的经验迅速的、有方向的自适应微调自己的遗传因子（源码），甚至我们可以在每次繁衍（复制）的过程中让病毒程序“龙生九子各不同”。而外部信息，我们可以从互联网中获取，我们可以让病毒程序存活在每一台服务器，每一台终端机的冗余时空中。当然考虑到人类对未知和不可控事物的天然恐惧，我们也可以建立一个封闭的系统，但是我们仍然需要通过互联网获取信息不断更新（更新而不是扩充，因为独立系统空间有限）独立系统的知识库，让进化树在独立系统中自行生长。需要注意的是，如果我们指望病毒能迅速从蝼蚁变成具有更复杂结构的赛博生物，我们需要提醒病毒尽量与同类产生交互，这有助于共生生物群的产生。（毕竟我觉得每个人类个体其实也是一个巨大的共生生物群，其中的每个生物个体则是高度特化分工的细胞）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; As far as I am concerned，赛博世界可以有人工智能，但是不要妄想只凭程序员自己，在&lt;strong&gt;一段源码&lt;/strong&gt;中，封闭的完成AI的创造。智能个体必须是自适应调整的，不彻底放手让它演化，创造者将会成为它的进化瓶颈。&lt;/p&gt;
&lt;h1 id=&#34;3-互联网与脑&#34;&gt;&lt;a href=&#34;#3-互联网与脑&#34; class=&#34;headerlink&#34; title=&#34;3 互联网与脑&#34;&gt;&lt;/a&gt;3 互联网与脑&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这里我也顺便谈谈我对互联网与脑之间概念映射的看法。人们常常觉得互联网的基本单元应该是终端机或服务器，其实我觉得这是不对的，至少现在的互联网不应该这么看待。如果互联网是一个脑神经网络，那么互联网中的信息传递过程可以对应神经网络中的生物电信号传递，那互联网中的什么可以看成神经网络中的神经元呢？我觉得这一点上找不到物理的一一对应关系了，每一个被互联网连接起来的人类作为核心，供养人类的外部条件作为胶质细胞，人类使用的接入互联网的终端机设备作为突触，通信设备，包括光缆、交换机、路由器、服务器等等作为轴突和树突，这形成了一种互联网和神经网络间的扭曲的映射关系。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 值的注意的是，绝不应该把人类从互联网中割离开，离开了人类，互联网是死的。如果说互联网作为一个神经网络也指导行为，那么它是通过人类社会来行动的，人类社会是互联网特化分工的身体的一部分。互联网通过人类社会的行为，来优化调整自身的结构，来与物质世界交互。有读者可能会问，那么互联网就像一个生命了吧，它有意识吗？我们能跟它交流吗？我用一个问题来回答这种问题，你觉得我们人类要怎么跟自己的细胞来交流？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这涉及一个有趣的观点，《左手疯子，右手天才》中提到过一种生命观，一个蚂蚁族群为什么要被看做许多生命个体？虽然蚂蚁之间被物理的隔离开，凭什么一个蚂蚁族群就不能看成是一个完整的生命体？蚂蚁不通过接触就不能连接在一个整体中了吗？为什么所有生命体都得跟人类似的，由一堆细胞生命抱成一团组成一个大的生命个体呢？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们可以这么看，如果细胞器是最小的生命体，那么细胞作为细胞器的社会，成了第二层的生命体，人类或其他多细胞生物就成了第三层的生命体，蚂蚁族群、人类社会或互联网难道不可以是第四层的生命体吗？&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这是我第一次写这种信马由缰的非技术博文，只是我自己的小范围头脑风暴，有唐突冒失的地方读者多包含。&lt;/p&gt;
</content>
        <category term="机器学习" />
        <category term="人工神经网络" />
        <category term="类脑" />
        <updated>2015-12-05T14:07:40.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/12/01/C-%E7%9A%84%E4%BD%8D%E4%BC%98%E5%8C%96/</id>
        <title>C++的位优化</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/12/01/C-%E7%9A%84%E4%BD%8D%E4%BC%98%E5%8C%96/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前的中国象棋初版重在实现，老实说不论是时空效率还是健壮性都不太拿得出手，于是导师要求继续优化改进。考虑和调查过后，时间效率上可以借助之前设想的并行计算得到小幅优化，此外使用类似bool数组的手段也可以在走法生成器中小幅优化边界判断过程，最重要的时间效率优化手段是把博弈机改造成查表器，即以查表为主博弈为辅改变重心。以上都是时间效率优化，这篇文中暂且不展开，我的中国象棋初版在搜索深度大时（大于等于４层）开始出现程序崩溃的现象，暴露了空间效率问题。作为空间效率优化的铺垫，这次我来做个C++位优化的自科普。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关于空间效率优化，从前顶多考虑到基本变量类型选择的程度，然而C++提供了一些更精细的特性，供程序员进行位级别的内存微操——位域、bitset、vector&amp;lt;bool&amp;gt;。&lt;/p&gt;
&lt;h1 id=&#34;1-位域&#34;&gt;&lt;a href=&#34;#1-位域&#34; class=&#34;headerlink&#34; title=&#34;1 位域&#34;&gt;&lt;/a&gt;1 位域&lt;/h1&gt;&lt;h2 id=&#34;1-1-字节对齐&#34;&gt;&lt;a href=&#34;#1-1-字节对齐&#34; class=&#34;headerlink&#34; title=&#34;1.1 字节对齐&#34;&gt;&lt;/a&gt;1.1 字节对齐&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 介绍位域之前，还需要做一点铺垫。业界C&amp;#x2F;C++面试、笔试题中，经常考到结构体的字节对齐问题。比如，可能会问下面两个结构体分别占多大内存：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s2&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;sizeof(s1)&lt;/code&gt;和&lt;code&gt;sizeof(s2)&lt;/code&gt;分别为56字节和40字节。先不管为什么装着同样变量的结构体占用的内存大小会不同，如果结构体中变量紧密排列，应该占多大内存？ａ：1字节，ｂ：4字节，ｃ：9字节，ｄ：2字节，ｅ：4字节，ｆ：8字节，ｇ：8字节，共36字节。显然这些变量实际上不是紧密排列的，存在一些对齐、填充字节的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效对齐值默认为结构体最宽&lt;em&gt;基本类型&lt;/em&gt;成员的大小，注意结构体的结构体成员必须到内部寻找基本类型成员变量计算有效对齐值；&lt;/li&gt;
&lt;li&gt;结构体变量的首地址能够被其有效对齐值所整除；&lt;/li&gt;
&lt;li&gt;结构体每个成员相对于结构体首地址的偏移量都是其本身大小的整数倍，如有需要编译器会在成员之间加上填充字节；&lt;/li&gt;
&lt;li&gt;结构体的总大小为结构体有效对齐值的整数倍，如有需要编译器会在最末一个成员之后加上填充字节；&lt;/li&gt;
&lt;li&gt;存在指定对齐值（&lt;code&gt;#pragma pack (value)&lt;/code&gt;中的value）时，&lt;code&gt;有效对齐值 = min&amp;#123;默认对齐值, 指定对齐值&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于为什么要做字节对齐，这与CPU取数方式有关，尤其与CPU与内存间数据总线宽度（现在除了单片机通常为32位）有关。因为数据总线宽度是硬件相关，所以一次取数的位数是固定的，假设总线宽度32位，那么一次取数的数据大小就为4字节，那么CPU读取内存数据就将以内存首地址为基址，以4个字节为偏移量单位。如果结构体中有一个char型和一个int型变量，紧密排列存储在内存中，读char型变量时照样取了结构体的前4个字节，其中高8位的哪个字节是存储着char型变量，会经过一些位运算后被提取出来（比如按位右移24位，这仅仅是猜测），到此为止看不出什么不好的。可是当读int型变量时问题就来了，CPU无法一次读取到整个int变量了，原因前面提到了：&lt;em&gt;CPU读取内存数据就将以内存首地址为基址，以4个字节为偏移量单位&lt;/em&gt;。经过两次取数才能获得被分割在两个字（32位内存单位）中完整的int型变量，这还不算完，还要分别从两个字中提取恰当的位并进行拼接，这很浪费时间。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 按特定规则进行字节对齐后，虽然浪费了一些填充字节的内存空间，情况还是好多了。以s1为例，有效对齐值是double型和long long型的8字节即两个字，这里称其为一个对齐空间，装填a（填充7个字节），装填f，装填b（填充4个字节），装填g，装填c（一个对齐空间内放不下，第二个空间中也放了1个字节，填充7个字节），装填e，装填d，结构体整体填充2字节，填满对齐空间的整数倍。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理也可求得s2的内存占用，至于两个结构体的内存占用不一样的原因，是它们的成员变量排列顺序不同，而结构体给成员变量分配内存的顺序与定义变量的顺序相同。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当指定对齐值小于默认对齐值，可令结构体的成员变量排列更紧密，更省空间，但可能降低取数效率。特别的，当指定对齐值为1，结构体成员变量完全紧密排列。&lt;/p&gt;
&lt;h2 id=&#34;1-2-位域与其利弊&#34;&gt;&lt;a href=&#34;#1-2-位域与其利弊&#34; class=&#34;headerlink&#34; title=&#34;1.2 位域与其利弊&#34;&gt;&lt;/a&gt;1.2 位域与其利弊&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不管是为数据结构的成员变量设计合适的排列顺序，还是指定合适的字节对齐值，都是在字节的层次上优化程序空间效率。而使用位域，可以在位的层次上优化程序空间效率。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还是以1.1节中的s1为例，只在字节层面上优化，以不损失时间效率为前提，最佳策略如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 实际上就是保证按32位字（4字节）对齐，变量按大小降序排列。此时的&lt;code&gt;sizeof(s1)&lt;/code&gt;为36字节，空间开销等同变量成员紧密排列，时间效率没有受到影响。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面这种写法不知读者见过没有：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g: &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b: &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 对这样定义的结构体s1，&lt;code&gt;sizeof(s1)&lt;/code&gt;是28字节。变量b、g后面的‘:’和数字就是位域的描述方式。位域的作用是把一些用不到当前类型变量中所有位的变量做进一步压缩，比如这里的s1结构体中的g变量，原来占用64位，使用位域压缩后g变量只使用原内存空间的高21位，填充3位补满3个字节后，原long long变量的后5个字节就可以自由分配了；b变量，原来占用32位，使用位域压缩后b变量只使用原内存空间的高7位，填充1位填满1个字节后，原int变量的后3个字节的内存空间就可以自由分配了。b、g压缩过后刚好占据4个字节一个32位字，比原来少占８个字节。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是，借由位域压缩技术，C++得以进行位层次的空间效率优化了。然而位域的使用有着诸多限制和缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位域不可以用于浮点型变量的压缩；&lt;/li&gt;
&lt;li&gt;位域压缩有符号数时，由于其存储变量的编码方式是源码而非平常变量的补码，变量符号将可能出现不可预料的状态；&lt;/li&gt;
&lt;li&gt;位域压缩将局部解除变量间原有的的字节对齐规范，即使位域压缩的变量与相邻变量紧密排列，这可能引起取数时间效率的损失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-bitset&#34;&gt;&lt;a href=&#34;#2-bitset&#34; class=&#34;headerlink&#34; title=&#34;2 bitset&#34;&gt;&lt;/a&gt;2 bitset&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这一节我要介绍的是比特集，正如字面意思，它是一种比特的集合的特殊数据结构。位域是C遗留下来的特性，存在很多不完备和妥协的地方,C++中推荐的替换方案之一就是bitset。它的具体使用方法我不想细讲，这里只做个概念介绍，想了解更多可以看&lt;a href=&#34;http://www.cplusplus.com/reference/bitset/bitset/&#34;&gt;标准C++手册&lt;/a&gt;，&lt;del&gt;其实是我困了懒得写&lt;/del&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 比特集维护一个静态定义其长度的比特串，内存占用以系统字长（通常为&lt;em&gt;机器字长&lt;/em&gt;，即CPU中寄存器的位数，即CPU进行数据计算的单位位宽，而非前面提到的数据总线宽度，但机器字长一定是数据总线宽度的整数倍）为单位长度，当然如果读者使用64位的机器却安装32位的系统则是把机器当做32位机使用，每个CPU寄存器只使用一半的位数。比特集可以通过包含‘０’、‘１’的字符串来构造，也可以通过无符号的整型变量来构造。为什么是无符号数？因为比特的集合本来就是逻辑的、离散的，符号在比特集中没有意义。当然如果想用某个逻辑位来作为符号位也随用户喜欢。相应的，比特集也可以转换成‘０’、‘１’字符串或者整型数。理所当然的，比特集类封装了一系列位运算符号和逻辑位操作方法，注意比特集的位操作符号两边都应该是比特集，位移操作符除外。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 也许有读者想了解bitset的内存占用情况，我进行了下面的一系列测试：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//16&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;160&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//24&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;320&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//40&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;640&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//80&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1280&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//160&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 测试结果我写在注释里了，可以看到，bitset的存储单位是8个字节，而我的这台笔记本电脑正是64位机器字长的，测试环境是64位的Ubuntu 14.04版本操作系统。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同样的，比特bitset也有它的不足之处，比如它不能再与普通整型数直接进行位运算，且它一经构造，不可以改变长度。至于时间效率，可以充分相信它不比普通整型的同类操作慢。&lt;/p&gt;
&lt;h1 id=&#34;3-vector&#34;&gt;&lt;a href=&#34;#3-vector&#34; class=&#34;headerlink&#34; title=&#34;3 vector&amp;lt;bool&amp;gt;&#34;&gt;&lt;/a&gt;3 vector&amp;lt;bool&amp;gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当我第一次在手册中看见vector&amp;lt;bool&amp;gt;时我并没有留意，虽然也对bool型的vector容器为什么有一套独立的API感到了一丝困惑。后来在查找bitset相关资料时发现有人写了vector&amp;lt;bool&amp;gt;与bitset的比较文章，这才知道，vector&amp;lt;bool&amp;gt;是C++提供的bitset之外的另一种位层次数据结构微操方案，同等长度的两者的内存占用几乎一样。vector&amp;lt;bool&amp;gt;的具体用法读者依旧可以查看&lt;a href=&#34;http://www.cplusplus.com/reference/vector/vector-bool/&#34;&gt;手册&lt;/a&gt;，&lt;del&gt;是的我又偷懒了XDDD&lt;/del&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 既然vector&amp;lt;bool&amp;gt;实现在vector库文件中，想必读者也能猜到它与bitset最大的不同，没错它是可变长的。相应的，作为牺牲，考虑数组与vector的区别，也不难猜到，vector&amp;lt;bool&amp;gt;比bitset慢。首先它的位操作也比bitset少得多，其次vector&amp;lt;bool&amp;gt;中的位不再能够用下标随机存取，而需要使用迭代器来访问。其实比起bitset的变长版本，我觉得说vector&amp;lt;bool&amp;gt;是bool型vector的空间优化版本更合适一些。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上就完成了简单的位层面程序空间效率优化的相关概念引入，下面会继续跟进我的中国象棋的改进版本。&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="位域" />
        <category term="bitset" />
        <category term="vector&amp;lt;bool&amp;gt;" />
        <updated>2015-12-01T02:53:29.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/11/15/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E4%BA%BA%E6%9C%BA%E5%8D%9A%E5%BC%88%E5%AE%9E%E7%8E%B0%E7%BB%83%E4%B9%A0/</id>
        <title>中国象棋人机博弈实现练习</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/11/15/%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B%E4%BA%BA%E6%9C%BA%E5%8D%9A%E5%BC%88%E5%AE%9E%E7%8E%B0%E7%BB%83%E4%B9%A0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上一篇简略做了棋牌游戏人机博弈的概念铺垫，这一篇文就来贴一下我的初版实现。精力受限，没有像许多前辈那样把Maxmin系的搜索算法（Maxmin、AlphaBeta、Fail-Soft-AlphaBeta、Aspiration、PVS、MTD(f)）全部实现一遍。刚开始我甚至只打算实现一个MTD(f)的搜索核心，因为毕竟最晚出现的算法通常一定程度上是以往算法的集大成者。但是等把MTD(f)实现完，发现里面一层就是个AlphaBeta，于是AlphaBeta的搜索核心作为副产品也存在于实现成果中了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我并不打算在这里贴包括Qt5的GUI实现代码在内的所有大概3500行代码（当然其中至少700行可能是注释），主要讲解一下我的实现思路，偶尔贴一些关键代码。完整项目源码我在GitHub建了仓库，这篇文最后会贴地址，读者也可以自己去我Git找找看，毕竟我一共也没建过几个仓库。下面开始正题。&lt;/p&gt;
&lt;h1 id=&#34;1-需求分析&#34;&gt;&lt;a href=&#34;#1-需求分析&#34; class=&#34;headerlink&#34; title=&#34;1 需求分析&#34;&gt;&lt;/a&gt;1 需求分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;GUI：为了方便人工测试，灵活直观的展现测试结果&lt;del&gt;也方便随时嘚瑟&lt;/del&gt;，中国象棋人机博弈程序的实现应该有GUI（图形用户界面）。&lt;/li&gt;
&lt;li&gt;通用部件：应该根据实际需要设计比较高效的、节省空间的、通用的局面表示部件与走法表示部件。&lt;/li&gt;
&lt;li&gt;走法生成器：为了给并行计算和分布式计算做准备，应该设计通用的走法生成器接口。至少实现一个可靠的串行计算的走法生成器。&lt;/li&gt;
&lt;li&gt;搜索核心：为了方便扩展与迭代开发，应该设计通用的搜索核心接口。若干不同版本的走法核心也应该被实现。&lt;/li&gt;
&lt;li&gt;局面评估核心：考虑到短期内难以获得经过结构化解析的对局数据或棋谱，只实现一个参数可在代码中调整的静态局面评估核心，通用局面评估核心接口不予实现，暂时搁置等待重构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-概要设计&#34;&gt;&lt;a href=&#34;#2-概要设计&#34; class=&#34;headerlink&#34; title=&#34;2 概要设计&#34;&gt;&lt;/a&gt;2 概要设计&lt;/h1&gt;&lt;h2 id=&#34;2-1-GUI&#34;&gt;&lt;a href=&#34;#2-1-GUI&#34; class=&#34;headerlink&#34; title=&#34;2.1 GUI&#34;&gt;&lt;/a&gt;2.1 GUI&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 图形界面中棋盘、棋子的图形是必要组成部分。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 此外考虑到人机博弈回合间电脑变动棋子位置太突兀，玩家有时甚至难以察觉棋子位置的变化，应当添加当前选定棋子的标记（对电脑方的棋子来说则是上一步刚被操作过的棋子的标记）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 应当可以选择玩家先手开局或后手开局。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 应当有开局按钮。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最好也有悔棋或状态回退按钮。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 应当可以在每轮电脑回合前更改电脑使用的搜索核心种类。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 应当可以在每轮电脑回合前更改电脑搜索的深度（模拟对局回合数）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 应该显示每轮电脑搜索中评估的局面数量和搜索用时，方便在测试时对算法效率和优化效果进行评估。&lt;/p&gt;
&lt;h2 id=&#34;2-2-通用部件&#34;&gt;&lt;a href=&#34;#2-2-通用部件&#34; class=&#34;headerlink&#34; title=&#34;2.2 通用部件&#34;&gt;&lt;/a&gt;2.2 通用部件&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最基本的通用部件应该是&lt;em&gt;棋盘位置的表示部件&lt;/em&gt;，这个部件首先应当提供位置坐标的设置与查询方法。该部件还可能需要提供一些获取棋盘特定位置属性的方法，以辅助走法生成和局面评估。该部件的变量成员或容器应当进行适当的状态压缩以节省空间。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;em&gt;走法表示部件&lt;/em&gt;将提供特定走法的属性查询方法，如移动的棋子序号，走法中是否有棋子被吃，移动棋子的起点坐标和终点坐标。走法表示部件将使用棋盘位置表示部件做一些具体的实现。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 恰当的&lt;em&gt;局面状态表示部件&lt;/em&gt;也是必要的。这个部件将直接为走法生成器和评估核心提供所有棋子的位置、状态查询方法，所有棋子相对位置的属性查询方法，以及所有棋盘特定位置的属性查询方法，棋子位置变更时的局面更新方法，棋子位置变更时的变更回退方法等。毫无疑问局面表示部件将使用棋盘位置表示部件和走法表示部件来实现所需的方法。&lt;/p&gt;
&lt;h2 id=&#34;2-3-走法生成器&#34;&gt;&lt;a href=&#34;#2-3-走法生成器&#34; class=&#34;headerlink&#34; title=&#34;2.3 走法生成器&#34;&gt;&lt;/a&gt;2.3 走法生成器&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不管计算形式是串行还是并行的，走法生成器应该按照中国象棋规则提供特定局面下合法的所有走法，并装载在一个走法容器中以备查询。合法的走法除需要符合基本的中国象棋行棋规则之外，还应该根据已走局面剔除循环走法。&lt;/p&gt;
&lt;h2 id=&#34;2-4-搜索核心&#34;&gt;&lt;a href=&#34;#2-4-搜索核心&#34; class=&#34;headerlink&#34; title=&#34;2.4 搜索核心&#34;&gt;&lt;/a&gt;2.4 搜索核心&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索核心应该作为游戏程序的主线索，调用走法生成器和局面评估核心对接下来的人机博弈状态做一系列的预演，然后给出相对最好的走法。搜索过程中还应该收集一些程序运行信息，比如评估结点数，搜索时间。搜索每一个新层次时势必要管理搜索树占用的内存空间，应该给出一个可行的空间管理方案。&lt;/p&gt;
&lt;h2 id=&#34;2-5-局面评估核心&#34;&gt;&lt;a href=&#34;#2-5-局面评估核心&#34; class=&#34;headerlink&#34; title=&#34;2.5 局面评估核心&#34;&gt;&lt;/a&gt;2.5 局面评估核心&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如前所述，暂且只要求实现一个基于少量中国象棋实际经验和主观猜测的评估函数。这个评估函数可能会需要一个类似于走法生成器但有所不同的“棋子影响力覆盖范围生成器”作为工具函数。&lt;/p&gt;
&lt;h1 id=&#34;3-详细设计&#34;&gt;&lt;a href=&#34;#3-详细设计&#34; class=&#34;headerlink&#34; title=&#34;3 详细设计&#34;&gt;&lt;/a&gt;3 详细设计&lt;/h1&gt;&lt;h2 id=&#34;3-1-GUI&#34;&gt;&lt;a href=&#34;#3-1-GUI&#34; class=&#34;headerlink&#34; title=&#34;3.1 GUI&#34;&gt;&lt;/a&gt;3.1 GUI&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Qt5设计GUI有多方便相信用过的读者都有体会，无非就是拖拖控件写写槽函数加点资源调调样式。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 本来我想在轮到电脑的回合时间显示一个正在加载时的常见gif图片，但发现这涉及到Qt5的并行计算方式。经过简单的尝试（利用QtConcurrent类）后发现无法在不同线程中顺畅管理相同的控件状态，这可能是资源同步互斥管理的问题（这里相信一些读者会联想到一个关于多线程的笑话：一个程序员遇到了一个问题，想通过多线程来解决它，现在他有两个问题了），于是干脆放弃显示图片的想法了，你将在我的Qt源码中发现我尝试的痕迹。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 另一点稍微值得一提的事是，我在准备好一切，要开始写点击棋子的槽函数的时候发现，QLabel控件居然没有Clicked默认事件，看来我是Web应用写多了有点惯性思维了。于是我只好自定义了一个ClickableLabel类，这个类是对QLabel类的封装，重载了基类QWidget的mouseReleaseEvent方法，在方法里发射了一个clicked消息。最后把所有需要点击互动的QLabel提升成了ClickableLabel，并添加了ClickableLabel的clicked消息的槽函数。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; clickablelable.h：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; CLICKABLELABEL_H&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; CLICKABLELABEL_H&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;QLabel&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;QWidget&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;QPoint&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClickableLabel&lt;/span&gt; : &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; QLabel&lt;br&gt;&amp;#123;&lt;br&gt;	Q_OBJECT&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt;:&lt;br&gt;	&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;ClickableLabel&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(QWidget* parent = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;	~&lt;span class=&#34;hljs-built_in&#34;&gt;ClickableLabel&lt;/span&gt;();&lt;br&gt;signals:&lt;br&gt;	&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;clicked&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ClickableLabel* clickableLabel)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;clicked&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(QPoint pos, ClickableLabel* clickableLabel)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt;:&lt;br&gt;	&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;mouseReleaseEvent&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(QMouseEvent *event)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// CLICKABLELABEL_H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; clickablelable.cpp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;quot;clickablelabel.h&amp;quot;
#include &amp;quot;QMouseEvent&amp;quot;

ClickableLabel::ClickableLabel(QWidget* parent)
	: QLabel(parent)
&amp;#123;
&amp;#125;

ClickableLabel::~ClickableLabel()
&amp;#123;
&amp;#125;

void ClickableLabel::mouseReleaseEvent(QMouseEvent* event)
&amp;#123;
	emit clicked(this);
	emit clicked(event-&amp;gt;pos(), this);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还挺简单的，不是吗？&lt;/p&gt;
&lt;h2 id=&#34;3-2-通用部件&#34;&gt;&lt;a href=&#34;#3-2-通用部件&#34; class=&#34;headerlink&#34; title=&#34;3.2 通用部件&#34;&gt;&lt;/a&gt;3.2 通用部件&lt;/h2&gt;&lt;h3 id=&#34;3-2-1-棋盘位置表示部件&#34;&gt;&lt;a href=&#34;#3-2-1-棋盘位置表示部件&#34; class=&#34;headerlink&#34; title=&#34;3.2.1 棋盘位置表示部件&#34;&gt;&lt;/a&gt;3.2.1 棋盘位置表示部件&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我为棋盘位置表示部件实现了一个Position类，只有一个unsigned char型成员变量，８位，一个字节，高四位表示纵坐标即行序号，第四位表示横坐标即列序号，全１有两个方面的含义：对特定棋子来书，当前位置坐标全１表示该棋子已经被吃；对棋盘上特定位置来说，全１表示棋盘上这个位置没有棋子。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 因为这个类中的横纵坐标是状态压缩的，需要分别提供横纵坐标的提取／解析方法x()、y()，还有棋子死活／有无的判定及设置方法dead()、kill()。具体实现都是些简单的位运算，比如取第四位用按位与，取高四位用位移。比较局面状态难免要做一系列的棋盘位置比较，所以还实现了“&amp;#x3D;&amp;#x3D;”和“!&amp;#x3D;”符号。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 后面在搜索核心的实现有时候会用到置换表，生成hash key需要获取底层的坐标存储数据，所以这个类还有个突兀的友元声明。&lt;/p&gt;
&lt;h3 id=&#34;3-2-2-走法表示部件&#34;&gt;&lt;a href=&#34;#3-2-2-走法表示部件&#34; class=&#34;headerlink&#34; title=&#34;3.2.2 走法表示部件&#34;&gt;&lt;/a&gt;3.2.2 走法表示部件&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 走法表示使用四个成员变量：移动的棋子序号、被吃的棋子序号、原棋盘位置、新棋盘位置，全部使用unsigned char型变量，共４个字节。实现这个类时我偷了个懒，干脆把成员变量访问限定符都定为public了，于是除了空构造函数和一个初始化所有成员变量的重载，只写了一个比较符号“&amp;#x3D;&amp;#x3D;”。没什么特别的。&lt;/p&gt;
&lt;h3 id=&#34;3-2-3-局面状态表示部件&#34;&gt;&lt;a href=&#34;#3-2-3-局面状态表示部件&#34; class=&#34;headerlink&#34; title=&#34;3.2.3 局面状态表示部件&#34;&gt;&lt;/a&gt;3.2.3 局面状态表示部件&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这个部件还比较有意思。实际上，写游戏初版时，因为走法生成器，搜索核心或评估核心内部实现过程不顺心，曾经一度重构通用部件，其中也伴随着通用部件新需求的不断提出。作为直接向三大模块提供服务的部件，局面状态表示部件的修改最为频繁。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 资料提出的中国象棋棋盘状态存储模型有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用32颗棋子的棋盘分布（32*10*9个比特）来保存局面状态；&lt;/li&gt;
&lt;li&gt;用14种棋子的棋盘分布（14*10*9个比特）来保存局面状态；&lt;/li&gt;
&lt;li&gt;用10*9个棋盘位置上32颗棋子的互斥存在标识（10*9*5个比特）来保存局面状态；&lt;/li&gt;
&lt;li&gt;用10*9个棋盘位置上14种棋子的互斥存在标识（10*9*4个比特）来保存局面状态；&lt;/li&gt;
&lt;li&gt;用32颗棋子的坐标值（32*8个比特）来保存局面状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看出，上述模型占用空间的大小依次递减。如果比较占用空间大小，第五种模型显然最优。但是实现走法生成器和评估核心时，需要对棋子相对位置上的棋子有无、棋子归属进行大量查询。如果每次针对特定棋盘位置的棋子查询都通过遍历32颗棋子来完成，何况每颗棋子都需要对若干个相对位置做棋子查询，尤其是車、炮这种自由度很大的棋子，恐怕随着搜索树的展开，将累计很大的时间开销。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 那么如果换用第四种模型呢？特定棋子相对位置的状态可以直接查询到了，同类查询的时间开销降到了第五种模型的1&amp;#x2F;32。那么如果选用第四种模型，除了稍多一些的空间开销，有没有做出别的牺牲呢？当我们想要查询特定棋子的坐标，不再能够直接查到了，我们需要遍历整个棋盘来寻找一颗棋子，还需要标记这颗棋子是否同类棋子（同归属方、同兵种）中我们需要的那一颗。同类查询的时间开销变成了原来的90倍以上。这并不是一个典型的、合算的空间换时间型优化。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们重新思考一下局面表示部件在搜索过程中的实际使用情况，不难发现，如果把当前局面作为一个引用参数引入搜索核心类，那么整个搜索过程中，不论采用怎样的局面表示模型，不论对当前局面状态做了多少次更新和回退，空间开销的差别其实微乎其微。真正对空间开销起明显作用的是走法表示部件的数据结构。想到这里不禁觉得一阵无力感袭来，局面状态表示部件的状态压缩是不太有意义的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 那么我们现在可以专注于提高局面状态表示部件中各种方法的时间效率而无视空间开销了。于是我用了一个双向索引，即同时在部件中使用第一种模型和第五种模型。这样不管按棋子序号查询坐标还是按特定坐标查询棋盘位置状态，都可以以常数级的时间开销完成查询过程。当然还实现了许多为三大模块提供服务的方法，还需要记录局面评分和主动权归属。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; State.h：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#ifndef _STATE_H_
#define _STATE_H_

#include &amp;quot;Position.h&amp;quot;
#include &amp;quot;Move.h&amp;quot;

/* 棋子序号 */
/* 红帅 */
#define R_KING 0
/* 红仕序号起点（序号个数2） */
#define R_MANDARIN 1
/* 红相序号起点（序号个数2） */
#define R_ELEPHANT 3
/* 红马序号起点（序号个数2） */
#define R_KNIGHT 5
/* 红車序号起点（序号个数2） */
#define R_ROOK 7
/* 红炮序号起点（序号个数2） */
#define R_CANNON 9
/* 红兵序号起点（序号个数5） */
#define R_PAWN 11
/* 红子序号起点 */
#define R_BEGIN R_KING
/* 红子序号终点 */
#define R_END R_PAWN+4
/* 黑将 */
#define B_KING 16
/* 黑士序号起点（序号个数2） */
#define B_MANDARIN 17
/* 黑象序号起点（序号个数2） */
#define B_ELEPHANT 19
/* 黑马序号起点（序号个数2） */
#define B_KNIGHT 21
/* 黑車序号起点（序号个数2） */
#define B_ROOK 23
/* 黑炮序号起点（序号个数2） */
#define B_CANNON 25
/* 黑卒序号起点（序号个数5） */
#define B_PAWN 27
/* 黑子序号起点 */
#define B_BEGIN B_KING
/* 黑子序号终点 */
#define B_END B_PAWN+4
/* 坐标数组中表示棋子已被吃 */
#define DEAD 0xff
/* 棋子数组中表示坐标无棋子占用 */
#define NONE DEAD

/* 局面状态类：32+90=122字节 */
/* 这个类负责记录局面状态，包括局面的棋子索引的状态和坐标索引的状态。 */
/* 坐标索引的状态提供坐标优先的快速状态查询； */
/* 棋子索引的状态提供棋子优先的快速状态查询。 */
class State
&amp;#123;
public:
	/* 当前局面下红方是否持有行动权 */
	bool RTurn;
	/* 根据中国象棋规则初始化局面状态 */
	State();
	/* 根据走法更新棋盘状态 */
	void move(const Move &amp;amp;m);
	/* 还原按走法还原更新前的棋盘状态 */
	void undo(const Move &amp;amp;m);
	/* 获取特定棋子行号，即棋子y坐标 */
	unsigned char y(unsigned char chessNo) const;
	/* 获取特定棋子列号，即棋子x坐标 */
	unsigned char x(unsigned char chessNo) const;
	/* 获取特定坐标上的棋子序号或空序号 */
	unsigned char getNo(unsigned char x, unsigned char y) const;
	/* 存活判定 */
	bool isAlive(unsigned char chessNo) const;
	/* 红子判定 */
	bool isRed(unsigned char chessNo) const;
	/* 黑子判定 */
	bool isBlack(unsigned char chessNo) const;
	/* 友方判定 */
	bool isFriend(unsigned char chessNo1, unsigned char chessNo2) const;
	/* 特定棋子相对位置处是否有子 */
	bool relExist(unsigned char chessNo, char x, char y) const;
	/* 特定棋子相对位置处是否有红子 */
	bool relRedExist(unsigned char chessNo, char x, char y) const;
	/* 特定棋子相对位置处是否有黑子 */
	bool relBlackExist(unsigned char chessNo, char x, char y) const;
	/* 判断当前棋局是否已经结束，即一方的将/帅已经被吃 */
	bool isDone() const;
	/* 定义一个相等运算符，unordered_map要用 */
	bool operator == (const State state) const;
	/* 允许KeyHash类访问私有成员 */
	friend class KeyHash;
private:
	/* 使用双向索引，加快两个方向的查询速度 */
	/* 棋子序号索引的坐标数组：32字节 */
	Position posList[32];
	/* 棋盘坐标索引的棋子数组：90字节 */
	/* 二维数组的每个单元为一个8位整型数，用来表示坐标占用情况 */
	/* 即与坐标数组通用的棋子序号和一个额外的表示空的序号0xff */
	unsigned char board[10][9];
&amp;#125;;

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 具体方法实现都很简单，就不在这贴代码了。&lt;/p&gt;
&lt;h2 id=&#34;3-3-走法生成器&#34;&gt;&lt;a href=&#34;#3-3-走法生成器&#34; class=&#34;headerlink&#34; title=&#34;3.3 走法生成器&#34;&gt;&lt;/a&gt;3.3 走法生成器&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这是我认为中国象棋游戏中实现起来最繁琐的一个模块了，这里无法回避中国象棋零散的行棋规则。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 将／帅除了直面对方将／帅时可以飞过去吃掉对方，平时只能在己方的“帅府”九宫格中向没有己方棋子且不超出棋盘的位置做下列４种移动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x-1, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x+1, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x, y-1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x, y+1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 士／仕只能在己方“帅府”九宫格中向没有己方棋子且不超出棋盘的位置做下列４种移动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x-1, y-1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x+1, y-1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x-1, y+1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x, y) -&amp;gt; (x+1, y+1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 象／相只能在己方阵地的五行内，在不被“遮象眼”的情况下“走田字”，即向没有己方棋子且不超出棋盘的位置做下列４种尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(x-1, y-1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x-2, y-2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x+1, y-1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x+2, y-2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x-1, y+1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x-2, y+2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x+1, y+1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x+2, y+2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 马只能在不被“別马腿”的情况下“走日字”，即向没有己方棋子且不超出棋盘的位置做下列８种尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(x-1, y)处无子则&lt;code&gt;(x, y) -&amp;gt; (x-2, y-1), (x, y) -&amp;gt; (x-2, y+1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x+1, y)处无子则&lt;code&gt;(x, y) -&amp;gt; (x+2, y-1), (x, y) -&amp;gt; (x+2, y+1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x, y-1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x-1, y-2), (x, y) -&amp;gt; (x+1, y-2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(x, y+1)处无子则&lt;code&gt;(x, y) -&amp;gt; (x-1, y+2), (x, y) -&amp;gt; (x+1, y+2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 車可以在上、下、左、右四个方向上在不超出棋盘又无棋子阻挡“视线”的前提下尝试移动任意距离，当遇到第一颗阻挡“视线”的棋子，如果棋子归属方不同，还可以吃子，取代那颗棋子的位置。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 炮有两种移动模式，即非吃子或吃子。非吃子模式下，炮可以在上、下、左、右四个方向上在不超出棋盘又无棋子阻挡“视线”的前提下尝试移动任意距离；吃子模式下，炮首先要在上、下、左、右四个方向上找到一颗阻挡“视线”的棋子，然后跳过这颗棋子，继续向前寻找阻挡“视线”的第二颗棋子，如果找到阻挡视线的第一颗和第二颗棋子，且第二颗棋子归属方不同，可以吃掉第二颗棋子，取代它的位置。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 兵／卒有两种行棋情况，在离开己方阵地的五行之前，只能在前方没有己方棋子的情况下向对方阵地移动一格；在离开己方阵地即进入敌方阵地后，向没有己方棋子且不超出棋盘的位置向前一格、向左一格或向右一格移动。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 此外，还要引入局面记录参数，剔除造成重复局面的走法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 文字描述都这么麻烦，程序就更麻烦了，串行的走法生成器我写了700+行，虽然我的缩进比较“宽松”，注释比较多，还是很长了。并行版本如果用多线程还得管理线程队列、线程池，创建线程、监视线程、管理共享资源、做同步互斥什么的，恐怕会更长。多进程也一样。&lt;/p&gt;
&lt;h2 id=&#34;3-4-搜索核心&#34;&gt;&lt;a href=&#34;#3-4-搜索核心&#34; class=&#34;headerlink&#34; title=&#34;3.4 搜索核心&#34;&gt;&lt;/a&gt;3.4 搜索核心&lt;/h2&gt;&lt;h3 id=&#34;3-4-1-搜索核心通用接口&#34;&gt;&lt;a href=&#34;#3-4-1-搜索核心通用接口&#34; class=&#34;headerlink&#34; title=&#34;3.4.1 搜索核心通用接口&#34;&gt;&lt;/a&gt;3.4.1 搜索核心通用接口&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 本着引入复杂类型变量时能用引用或指针就不复制变量的原则，搜索核心通用接口定义了许多成员变量。一个局面状态表示部件currentState用来复制当前状态，我复制了整个部件而非引入一个引用，是因为如果使用引用，构造类的时候不太方便，同样要增加开销。我想过使用指针，但是发现遍历State类成员时会一直报错，没能调顺，只得放弃。同样的理由，局面记录也进行了复制，但是我发现只进行浅复制就不会报错，也就没有深究。估值核心我使用了指针，因为估值核心的实例化发生在搜索核心的构造函数中。此外还有当前搜索深度变量、最大搜索深度变量、最佳走法、评估结点数即搜索树的叶结点树和搜索时间。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索核心通用接口定义的方法不多，构造函数中只实例化了评估核心，析构函数负责销毁评估核心，此外只有一个搜索函数和一个获得最佳走法的只读方法。&lt;/p&gt;
&lt;h3 id=&#34;3-4-2-MTD-f&#34;&gt;&lt;a href=&#34;#3-4-2-MTD-f&#34; class=&#34;headerlink&#34; title=&#34;3.4.2 MTD(f)&#34;&gt;&lt;/a&gt;3.4.2 MTD(f)&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索核心的一个实现是MTD(f)算法。MTD(f)的最外层是一个迭代深化的过程，具体说就是由浅到深的尝试搜索同时计时，一旦超过设定的搜索时间阈值就停止搜索。当搜索过程复杂（搜索树剪枝少）实际搜索深度可能无法很深，当搜索过程简单，实际搜索深度则只受玩家设定的最大搜索深度的影响。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 迭代深化的下一层是MTD(f)的思想核心，在一个无限大的窗口中，在一个有依据的猜测值附近反复进行类似PVS的空窗探测，并不断向真实的最大局面评估值调整猜测值和窗口，直到窗口上下限闭合。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;int MTD_f::mtdf(int firstGuess)
&amp;#123;
	/* MTD(f)窗口上下限 */
	int windowTop = WIN;
	int windowDown = -WIN;
	/* 空窗探测评估值，调整MTD(f)窗口的依据 */
	int g = firstGuess;
	/* alphaBeta算法的窗口上限 */
	int beta;
	/* 不断执行空窗探测直到窗口闭合，有hash置换表不怕重复搜索 */
	while(windowDown &amp;lt; windowTop)
	&amp;#123;
		/* 刚调整过窗口下限，更需要通过向上偏移的空窗探测调整窗口上限 */
		if (g == windowDown)
		&amp;#123;
			/* 在[g, g+1]区间上进行空窗探测 */
			/* alpha = g */
			beta = g + 1;
		&amp;#125;
		/* 刚调整过窗口上限，更需要通过向下偏移的空窗探测调整窗口下限 */
		else
		&amp;#123;
			/* 在[g-1, g]区间上进行空窗探测 */
			/* alpha = g - 1 */
			beta = g;
		&amp;#125;
		/* 利用Fail-Soft AlphaBeta算法做空窗探测 */
		/* alpha = beta - 1 */
		g = TTFAlphaBeta(beta - 1, beta, 0);
		/* 根据新评估值做窗口调整 */
		/* 新评估值小于空窗口，可以认为猜高了，实际评估值应该更低 */
		if (g &amp;lt; beta)
		&amp;#123;
			/* 根据新评估值下调MTD(f)窗口上限 */
			windowTop = g;
		&amp;#125;
		/* 新评估值不小于空窗口，可以认为猜低了，实际评估值应该更高 */
		else
		&amp;#123;
			/* 根据新评估值上调MTD(f)窗口下限 */
			windowDown = g;
		&amp;#125;
	&amp;#125;
	return g;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 再下一层是一个hash置换表优化的Fail-Soft-AlphaBeta算法，事实上，这个AlphaBeta的窗口大小是０，所以在我看来，MTD(f)的最下层更像一个PVS。&lt;/p&gt;
&lt;h3 id=&#34;3-4-3-AlphaBeta&#34;&gt;&lt;a href=&#34;#3-4-3-AlphaBeta&#34; class=&#34;headerlink&#34; title=&#34;3.4.3 AlphaBeta&#34;&gt;&lt;/a&gt;3.4.3 AlphaBeta&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索核心的另一个实现是AlphaBeta算法，实际上我只是把MTD(f)最下层的PVS拿出来，去掉置换表，把初始窗口定为无限大而已。这从算法实现方式的侧面印证了Maxmin系算法师出同门的事实。&lt;/p&gt;
&lt;h2 id=&#34;3-5-局面评估核心&#34;&gt;&lt;a href=&#34;#3-5-局面评估核心&#34; class=&#34;headerlink&#34; title=&#34;3.5 局面评估核心&#34;&gt;&lt;/a&gt;3.5 局面评估核心&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 现在使用的评估方法是统计局面上棋子的自由度、受威胁程度、棋子基本价值、棋盘位置加成、棋子受保护加成，并进行简单累加。使用了很多常数作为评估依据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#ifndef _EVALUATOR_H_
#define _EVALUATOR_H_

#include &amp;quot;State.h&amp;quot;
#include &amp;quot;Move.h&amp;quot;
#include &amp;lt;vector&amp;gt;

/* 估值器，提供对每一个局面状态的下特定走法的评分 */
/* 使用先验知识和一些局面评估因素为局面估值 */
class Evaluator
&amp;#123;
public:
	/* 评估结点计数 */
	unsigned cnt;
	/* 估值器构造函数，初始化估值器 */
	Evaluator();
	/* 估值函数，对给定的局面状态评分 */
	int evaluate(State &amp;amp;state);
private:
	/* 炮的一些重要坐标的加成 */
	const int ADD_R_CANNON[10][9] =
	&amp;#123;
		&amp;#123;50,	50,	0,	0,	0,	0,	0,	50,	50&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	10,	0,	10,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	10,	0,	0,	0,	0,	0,	10,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;10,	0,	0,	10,	50,	10,	0,	0,	10&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;
	&amp;#125;;
	const int ADD_B_CANNON[10][9] =
	&amp;#123;
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;10,	0,	0,	10,	50,	10,	0,	0,	10&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	10,	0,	0,	0,	0,	0,	10,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	10,	0,	10,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;50,	50,	0,	0,	0,	0,	0,	50,	50&amp;#125;
	&amp;#125;;
	/* 马的一些重要坐标的加成 */
	const int ADD_R_KNIGHT[10][9] =
	&amp;#123;
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	100,	0,	0,	0,	100,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	100,	0,	100,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	10,	0,	0,	0,	10,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	10,	0,	0,	0,	10,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	-100,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;
	&amp;#125;;
	const int ADD_B_KNIGHT[10][9] =
	&amp;#123;
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	-100,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	10,	0,	0,	0,	10,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	10,	0,	0,	0,	10,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	100,	0,	100,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	100,	0,	0,	0,	100,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;
	&amp;#125;;
	/* 兵的一些重要坐标的加成 */
	const int ADD_R_PAWN[10][9] =
	&amp;#123;
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;90,	90,	110,	120,	120,	120,	110,	90,	90&amp;#125;,
		&amp;#123;90,	90,	110,	120,	120,	120,	110,	90,	90&amp;#125;,
		&amp;#123;70,	90,	110,	120,	120,	120,	110,	90,	70&amp;#125;,
		&amp;#123;70,	70,	70,	70,	70,	70,	70,	70,	70&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;
	&amp;#125;;
	const int ADD_B_PAWN[10][9] =
	&amp;#123;
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;,
		&amp;#123;70,	70,	70,	70,	70,	70,	70,	70,	70&amp;#125;,
		&amp;#123;70,	90,	110,	120,	120,	120,	110,	90,	70&amp;#125;,
		&amp;#123;90,	90,	110,	120,	120,	120,	110,	90,	90&amp;#125;,
		&amp;#123;90,	90,	110,	120,	120,	120,	110,	90,	90&amp;#125;,
		&amp;#123;0,	0,	0,	0,	0,	0,	0,	0,	0&amp;#125;
	&amp;#125;;
	/* 先验的定义每种棋子的基本价值 */
	const int BASE_VAL[32] =
	&amp;#123;
		10000, 250, 250, 250, 250, 350, 350, 500, 500, 350, 350, 100, 100, 100, 100, 100,
		10000, 250, 250, 250, 250, 350, 350, 500, 500, 350, 350, 100, 100, 100, 100, 100
	&amp;#125;;
	/* 棋子灵活度单位价值，即每个可走位置对总自由度的贡献 */
	const int FREE_UNIT[32] =
	&amp;#123;
		0, 1, 1, 1, 1, 12, 12, 6, 6, 6, 6, 15, 15, 15, 15, 15,
		0, 1, 1, 1, 1, 12, 12, 6, 6, 6, 6, 15, 15, 15, 15, 15
	&amp;#125;;
	/* 棋子被威胁造成的负分 */
	bool threatenScore[32];
	/* 棋子被保护造成的加分 */
	bool protectScore[32];
	/* 棋子评分 */
	int chessScore[32];
	/* 根据特定的局面状态和当前行动权归属生成所有可能的势力覆盖方式并填充走法容器 */
	void generate(const State &amp;amp;state);
	/* 棋子势力覆盖方式容器 */
	std::vector&amp;lt;Move&amp;gt; coverList;
&amp;#125;;

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-手工测试&#34;&gt;&lt;a href=&#34;#4-手工测试&#34; class=&#34;headerlink&#34; title=&#34;4 手工测试&#34;&gt;&lt;/a&gt;4 手工测试&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为１时，分别使用AlphaBeta算法和MTD(f)算法作为搜索核心，评估结点数和搜索时间并没有明显的不同。两种算法下电脑的走法都很蠢。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为２时，使用AlphaBeta算法，绝大多数情况下评估结点数稳定在400&lt;del&gt;700区间内，搜索时间最多达到10^-2秒数量级；使用MTD(f)算法，绝大多数情况下评估结点数稳定在600&lt;/del&gt;1000区间内，搜索时间稳定在0.03秒左右。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为３时，使用AlphaBeta算法，绝大多数情况下评估结点数稳定在10000附近，搜索时间平均在10^-2秒数量级；使用MTD(f)算法，评估结点数平均在10^3数量级上,偶尔上万，搜索时间平均在10^-2秒数量级，偶尔还会非常小。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为４时，使用AlphaBeta算法，评估结点数在10^5数量级上，搜索时间平均在1秒数量级，电脑的走法看起似乎比搜索３层要蠢；使用MTD(f)算法，评估结点数很少再达到10^4数量级以上，搜索时间稳定在1秒数量级，走法也有点蠢。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为５时，使用AlphaBeta算法，评估结点数在10^6数量级上，搜索时间平均在８秒，电脑表现比较出色，开始出现游戏崩溃的现象；使用MTD(f)算法，可能是受迭代深化的限制作用影响，评估结点数和搜索时间与搜索深度为４时很接近，但是电脑的走法比４层时更出色，会出现游戏崩溃的现象。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索深度为６时，使用AlphaBeta算法，评估结点数达到了10^7数量级，搜索时间也增加到10^2秒数量级，电脑走法却不如５层时优秀，有游戏崩溃现象；使用MTD(f)算法，可能是受迭代深化的限制作用影响，评估结点数和搜索时间与搜索深度为４时很接近，电脑的走法没有比５层明显更优秀，有游戏崩溃的现象。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 更深层的搜索时AlphaBeta算法的搜索时间将长到无法忍受，游戏崩溃的现象也将更早出现。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 观察表明，使用偶数作为搜索深度时，电脑的走法性能会相对浅一层的奇数层搜索结果有一定的衰减，迭代深化时的层数步进也许设置为２更好。&lt;/p&gt;
&lt;h1 id=&#34;5-结论与收获&#34;&gt;&lt;a href=&#34;#5-结论与收获&#34; class=&#34;headerlink&#34; title=&#34;5 结论与收获&#34;&gt;&lt;/a&gt;5 结论与收获&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 过去谈及棋牌游戏的人机博弈我都只能表示佩服，满怀憧憬的感叹一下，表示做起来可能很麻烦。真的动手做过一个粗糙的练习之后才发现，用的无非还是那些简单算法的扩展或变种，简单说起来也不过是有限搜索树而已。不过种种精细的剪枝与优化还是很磨练人的心性的，当然我还没磨练到位，毕竟初版的优化我都没做彻底就来写博文了。&lt;/p&gt;
&lt;h1 id=&#34;6-不足与展望&#34;&gt;&lt;a href=&#34;#6-不足与展望&#34; class=&#34;headerlink&#34; title=&#34;6 不足与展望&#34;&gt;&lt;/a&gt;6 不足与展望&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前版本的两个搜索核心都是盲目搜索，即搜索中容易导致剪枝或棋局结束的结点没有优先搜索。&lt;/li&gt;
&lt;li&gt;局面评估核心应该重构，提供一个通用接口，为神经网络优化或其他技术优化的评估核心做准备。&lt;/li&gt;
&lt;li&gt;搜索树的展开过程中仍然存在动态申请内存空间的动作，当搜索深度到达４，偶尔会出现内存申请失败，游戏崩溃的情况，可以尽量静态的一次性的申请内存。&lt;/li&gt;
&lt;li&gt;没有足够优秀的查表优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 展望：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用部件的数据结构还可以进一步细化优化。&lt;/li&gt;
&lt;li&gt;走法生成器和评估核心的工具函数——棋子影响力覆盖范围生成器都有并行化的优化空间。&lt;/li&gt;
&lt;li&gt;局面评估核心还可以有更优秀的，基于机器学习的优化。&lt;/li&gt;
&lt;li&gt;还可以建立适当规模的开局库、残局库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后，挂&lt;a href=&#34;https://github.com/bipedalBit/BipedalBit-Chinese-Chess&#34;&gt;Git项目地址&lt;/a&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 因为偶尔偷懒，项目代码规范化有些参差不齐，有好的建议欢迎讨论。&lt;/p&gt;
</content>
        <category term="Qt" />
        <category term="C++" />
        <category term="人机博弈" />
        <category term="AlphaBeta" />
        <category term="MTD(f)" />
        <updated>2015-11-15T13:54:03.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/11/14/%E4%BA%BA%E6%9C%BA%E5%8D%9A%E5%BC%88%E5%88%9D%E6%8E%A2/</id>
        <title>人机博弈初探</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/11/14/%E4%BA%BA%E6%9C%BA%E5%8D%9A%E5%BC%88%E5%88%9D%E6%8E%A2/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 组里布置任务，要编个中国象棋人机博弈程序练练手，写这篇文时游戏初版已经完成了。开工前导师给了些相关资料，我自己又稍微做了些调查，这篇文就先来对人机博弈，尤其是棋牌游戏的人机博弈思路做一些概念上的科普铺垫。做好了概念铺垫，下一篇再挑重点简单讲解下我的中国象棋游戏实现情况。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其实人工智能课的大作业也是要写个概念总结，我干脆把那篇改改贴上来。&lt;/p&gt;
&lt;h1 id=&#34;1-博弈树搜索算法&#34;&gt;&lt;a href=&#34;#1-博弈树搜索算法&#34; class=&#34;headerlink&#34; title=&#34;1 博弈树搜索算法&#34;&gt;&lt;/a&gt;1 博弈树搜索算法&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 人机博弈的过程实质上是对博弈树——一种状态树的搜索，是一种博弈论中的重复博弈过程。博弈树与状态树的不同之处在于，对每一层搜索来说，目标状态会有区别，如果第奇数层搜索的目标是寻找对电脑来说最好的搜索状态，那么第偶数层的搜索中，目标状态则应该是人类行动可能导致的新状态。这种搜索算法不能单纯等同于图论中对状态树的深度或广度优先搜索算法，但是与传统的状态树搜索算法有莫大的渊源。&lt;/p&gt;
&lt;h2 id=&#34;1-1-极大极小值算法（Minmax-Algorithm）&#34;&gt;&lt;a href=&#34;#1-1-极大极小值算法（Minmax-Algorithm）&#34; class=&#34;headerlink&#34; title=&#34;1.1 极大极小值算法（Minmax Algorithm）&#34;&gt;&lt;/a&gt;1.1 极大极小值算法（Minmax Algorithm）&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 极大极小值算法是一系列改进的博弈树搜索算法的最原始的基础。它的基本思想是，在每层搜索前评估状态结点，在博弈树首层搜索一个评估值最大的状态结点作为电脑选择的最优行动方式，那么下一层就搜索评估值最小的状态结点来模拟人类对手的行动。重复这一博弈过程的博弈树搜索算法就称为极大极小值算法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在棋类游戏中，人机博弈搜索算法通常是基于深度优先搜索的。因为如果使用广度优先算法来遍历博弈树，内存中的状态结点将迅速变多，马上耗尽所有可用的内存空间。而深度优先搜索的过程中，向搜索树根结点回溯时会释放原本占用的栈空间。这使得搜索算法的内存开销只与搜索深度线性相关。&lt;/p&gt;
&lt;h2 id=&#34;1-2-负极大值算法（Negamax-Algorithm）&#34;&gt;&lt;a href=&#34;#1-2-负极大值算法（Negamax-Algorithm）&#34; class=&#34;headerlink&#34; title=&#34;1.2 负极大值算法（Negamax Algorithm）&#34;&gt;&lt;/a&gt;1.2 负极大值算法（Negamax Algorithm）&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 负极大值算法是对极大极小值算法的简单改进。当准备模拟人类行动，不去找评估值最小的状态结点，而是依旧寻找评估值最大的状态结点，只是在向搜索树上一层反馈搜索结果（最大评估值）时，进行一次正负翻转。这样一来可以通过引入带符号的状态评估值，简化最大最小值算法的形式。实际上，这种优化算法与最大最小值算法相比并没有效率上的不同。&lt;/p&gt;
&lt;h2 id=&#34;1-3-Alpha-Beta搜索&#34;&gt;&lt;a href=&#34;#1-3-Alpha-Beta搜索&#34; class=&#34;headerlink&#34; title=&#34;1.3 Alpha-Beta搜索&#34;&gt;&lt;/a&gt;1.3 Alpha-Beta搜索&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 搜索算法中最常见的优化手段就是对搜索树的剪枝，Alpha-Beta搜索算法就是一种剪枝优化的最大最小值算法。在朴素的极大极小值搜索算法中，每一层对最大最小值的搜索都是盲目而不加限制的。如果子状态结点的搜索返回值可以被利用起来，用来截断后续搜索过程，就可以实现搜索树的剪枝了。负极大值形式的Alpha-Beta搜索算法中只有Beta剪枝这一种剪枝（通过评估值的正负翻转将Alpha剪枝也并入了Beta剪枝）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 具体来说是事先提供一个无限大的搜索窗口，搜索过程中每反馈一个状态评估值，更新最大评估值记录，并使用-Beta和这个还不大于Beta的最大评估值的翻转值-Alpha分别作为子状态结点的搜索窗口下限和上限。当这个记录值增长到不小于当前搜索状态的搜索窗口上限，也就是Beta值时，判定搜索树已生长至叶结点，立即进行Beta剪枝，终止搜索，返回这个最大值，以供上层状态结点调整搜索窗口。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 自1928年极大极小值算法诞生以来，出现了各种改进算法，而当前最优秀的博弈树搜索算法，绝大多数都以Alpha-Beta算法为基础。可以说，Alpha-Beta算法是现代博弈树搜索算法的基础技术，也是之后各种优化算法最合适的入门铺垫。&lt;/p&gt;
&lt;h2 id=&#34;1-4-Fail-Soft-Alpha-Beta搜索&#34;&gt;&lt;a href=&#34;#1-4-Fail-Soft-Alpha-Beta搜索&#34; class=&#34;headerlink&#34; title=&#34;1.4 Fail-Soft Alpha-Beta搜索&#34;&gt;&lt;/a&gt;1.4 Fail-Soft Alpha-Beta搜索&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从算法的名字不难看出，Fail-Soft Alpha-Beta算法是对Alpha-Beta算法的优化。操作系统中，内存调度范畴最意义重大的技术可以说就是缓存。缓存的核心思想——数据访问的空间局部性，也可以引申到博弈树搜索技术中来。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前提到的Alpha-Beta算法中的搜索窗口一开始是无限大的。其实在大部分情况下，这个初始窗口可以更小一些，当然一旦缩小的初始窗口，就存在评估值落在窗口外的危险。那么万一评估值落在窗口外（上方或下方），就只有加入一个无限大或无限小的窗口上／下限，再重新搜索了。&lt;/p&gt;
&lt;h2 id=&#34;1-5-渴望搜索（Aspiration-Search）&#34;&gt;&lt;a href=&#34;#1-5-渴望搜索（Aspiration-Search）&#34; class=&#34;headerlink&#34; title=&#34;1.5 渴望搜索（Aspiration Search）&#34;&gt;&lt;/a&gt;1.5 渴望搜索（Aspiration Search）&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 鉴于搜索窗口是一个十分优秀的剪枝思路，渴望搜索同样是对搜索窗口的优化。Fail-Soft Alpha-Beta搜索中初始窗口的定义还带有盲目性，而渴望搜索正是针对这一点的优化。实际上，渴望搜索的初始搜索窗口是以一个特定值为中心，以另一个特定值为半径（正负方向偏差值）来定义的。这样一来，这个搜索窗口的中心就显得尤为重要。通常选用上一次搜索的最终状态评估值作为窗口中心是比较有效的，因为相邻的两次最优行动方式通常非常接近。&lt;/p&gt;
&lt;h2 id=&#34;1-6-极小窗口搜索（Minimal-Window-Search-PVS）&#34;&gt;&lt;a href=&#34;#1-6-极小窗口搜索（Minimal-Window-Search-PVS）&#34; class=&#34;headerlink&#34; title=&#34;1.6 极小窗口搜索（Minimal Window Search&amp;#x2F;PVS）&#34;&gt;&lt;/a&gt;1.6 极小窗口搜索（Minimal Window Search&amp;#x2F;PVS）&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前面提到过，相邻的两次最优行动方式通常非常接近。PVS正是利用这一事实很极端的将渴望搜索的搜索窗口进一步缩小到了以1为尺寸。更小的初始窗口将印发更多的剪枝，而统计数据证明，大多数情况下PVS的搜索效率确实比渴望搜索更高。&lt;/p&gt;
&lt;h2 id=&#34;1-7-置换表优化的搜索算法&#34;&gt;&lt;a href=&#34;#1-7-置换表优化的搜索算法&#34; class=&#34;headerlink&#34; title=&#34;1.7 置换表优化的搜索算法&#34;&gt;&lt;/a&gt;1.7 置换表优化的搜索算法&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 状态搜索过程中，有时会遇到曾经搜索过的状态，这时如果重新搜索显然是不划算的。如果把搜索过的状态都结构化的记录下来，就可以在一些特定情况下提前截断搜索过程。这就是置换表的思路。要对搜索算法进行置换表的优化，置换表就必须提供足够快的查表速度，最快的查找技术无非就是哈希查找了。这就组成了一个用置换表优化搜索算法的完整解决方案。&lt;/p&gt;
&lt;h2 id=&#34;1-8-迭代深化的搜索算法&#34;&gt;&lt;a href=&#34;#1-8-迭代深化的搜索算法&#34; class=&#34;headerlink&#34; title=&#34;1.8 迭代深化的搜索算法&#34;&gt;&lt;/a&gt;1.8 迭代深化的搜索算法&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 实际人类博弈场景中，博弈的外部限制条件往往与思考的深度无关，而与思考的时间有关。那么在搜索博弈树的过程中，可以迭代的逐步加深搜索深度，直到搜索时间超过阈值。显然这种优化将导致搜索深度不稳定，也使得搜索性能的稳定性不能得到保证。但在模拟人类博弈行为的场景下，迭代深化优化的搜索算法能使机器的行为更接近人类。&lt;/p&gt;
&lt;h2 id=&#34;1-9-启发式搜索策略&#34;&gt;&lt;a href=&#34;#1-9-启发式搜索策略&#34; class=&#34;headerlink&#34; title=&#34;1.9 启发式搜索策略&#34;&gt;&lt;/a&gt;1.9 启发式搜索策略&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 盲目搜索策略是被动的，不管如何调整搜索窗口，总是难以避免一些冗余的搜索项。如果在搜索时增加一些启发因素，将有利搜索快速完成的子状态的搜索过程提前，也许可以提前剪枝或提前结束搜索。如果获取启发因素的场景发生在比较靠前的搜索过程中，这就是历史启发的搜索优化思路。&lt;/p&gt;
&lt;h2 id=&#34;1-10-MTD-f-搜索&#34;&gt;&lt;a href=&#34;#1-10-MTD-f-搜索&#34; class=&#34;headerlink&#34; title=&#34;1.10 MTD(f)搜索&#34;&gt;&lt;/a&gt;1.10 MTD(f)搜索&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; MTD(f)搜索的全称是Memory-enhanced Test Driver with node n and value f，大意是记忆（置换表）优化、测试（空窗探测）驱动的搜索算法。MTD(f)算法将PVS的极小窗口干脆改成了空窗口，即单个猜测值就是一个窗口。只进行一些浅层的搜索后，就可以得到一个真实的极大评估值。这个评估值一定会落在猜测值的一侧，那么就可以利用这一点来不断进行猜测（空窗探测）并调整猜测值的取值范围，直到猜测值的范围闭合，即是得到了最终评估值。有不少实践者称MTD(f)算法在国际象棋、西洋跳棋等人机博弈应用场景中比PVS更优秀。&lt;/p&gt;
&lt;h2 id=&#34;1-11-疑惑与思考&#34;&gt;&lt;a href=&#34;#1-11-疑惑与思考&#34; class=&#34;headerlink&#34; title=&#34;1.11 疑惑与思考&#34;&gt;&lt;/a&gt;1.11 疑惑与思考&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 相信有的读者已经发觉，上述搜索算法只在叶结点做局面评估恐怕不太妥当。其实我也是这么认为的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上述搜索算法都建立在Maxmin算法中一个大前提的基础上：不论对手还是自己，下棋的人会尝试让棋局在若干步内到达这若干步内可能的最好的一个局面。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 事实上，下棋时，我们在选择下一步时，并不是总是想要逼近某个特定的局面，除非这个局面是一个抛给对手的陷阱。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在象棋、国际象棋这类棋子数单调减少，局面复杂程度变化小的棋类游戏中确实大部分局面中玩家都在不断互相抛出吃子陷阱。但是在局面复杂程度逐渐增加的棋类游戏如五子棋和围棋的中，我们在大部分局面中思考的往往是更模糊的趋势问题，或者说概率问题。我们需要在海量的局面演变路径中归结出当前走法应该将局面引向的最好的方向而不是某一条具体路径，同时依旧需要立即规避致命的陷阱。各个因素对结论的影响的归结，这显然应该是一个关于结论修正和因素采纳权重的问题。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在中国象棋、国际象棋中，Minmax的下棋思路应该在大部分情况下是合理而恰当的。然而在五子棋的部分局面中，和围棋的更多局面中，Minmax算法的思路前提根本就是不合理的。也就是说，不是基于Minmax的算法的性能不足以胜任围棋的搜索算法，而是Minmax应用在围棋走法搜索中时会犯很多方向性错误，这些错误的积累造成的不良影响已经大到不能被接受了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们将引入的MC-UCT算法，中文描述的算法名称是“树图置信”，“置信”这个概念跟我前面提到的因素归结、因素权重问题不谋而合。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们对“置信”方法的需求的来源，是局面复杂程度不稳定的情况下局面走向的不明朗和难以把控。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 相反，我们对Minmax思路的需求的前提，是局面明朗的情况下，我们很清楚该把局面引向哪些特定的状态。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上思考引发的我的另一个思考是，围棋这种实际问题中，棋盘大小仍然是有限的，也就是说，局面的复杂度终究会稳定在一个区间中。那么当局面稳定下来，我们对正确的“局面变化趋势的引导”的需求就降低了很多。因为我们改变局面变化趋势的发挥空间已经太小，这时问题的性质发生了改变，事实上，这时已经进入了围棋的“收官”阶段。一个局面稳定的围棋残局的处理，已经十分类似象棋类的棋类游戏，甚至比象棋更简单，更好处理。这种情况下放弃UCT，转而使用Minmax的算法思路反而是更恰当的。&lt;/p&gt;
&lt;h2 id=&#34;1-12-UCT算法&#34;&gt;&lt;a href=&#34;#1-12-UCT算法&#34; class=&#34;headerlink&#34; title=&#34;1.12 UCT算法&#34;&gt;&lt;/a&gt;1.12 UCT算法&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们来看下UCT的算法执行过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) 从博弈树的根点开始向下搜索，执行(2)。&lt;/li&gt;
&lt;li&gt;(2) 遇到结点a后，若a存在从未评估过的子结点，执行(3)，否则执行(4)。&lt;/li&gt;
&lt;li&gt;(3) 通过蒙特卡罗方法（这里先按下不表，后面会介绍，但这种评估方法是“置信”的来源）评估该子结点，得到收益值后更新该子结点至根结点路径上所有结点的平均收益值，执行(1)。&lt;/li&gt;
&lt;li&gt;(4) 计算每个子结点的UCB值（通过特殊结论将从蒙特卡罗方法中获得的收益值转换为新一轮搜索的置信基础值），将UCB值最高的子结点作为结点a，执行(2)。&lt;/li&gt;
&lt;li&gt;(5) 算法可随时终止，通常达到给定时间或尝试次数后终止。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; UCT算法最让人欣赏的两点是使用置信的蒙特卡罗评估，以及评估值的回溯更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-评估函数&#34;&gt;&lt;a href=&#34;#2-评估函数&#34; class=&#34;headerlink&#34; title=&#34;2 评估函数&#34;&gt;&lt;/a&gt;2 评估函数&lt;/h1&gt;&lt;h2 id=&#34;2-1-传统评估函数的优化&#34;&gt;&lt;a href=&#34;#2-1-传统评估函数的优化&#34; class=&#34;headerlink&#34; title=&#34;2.1 传统评估函数的优化&#34;&gt;&lt;/a&gt;2.1 传统评估函数的优化&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在搜索博弈树子状态的过程中，需要对位于博弈树叶结点位置的子状态给出评估值。传统的，可以从已有知识、经验中挖掘出状态评估因素。为各因素加上先验的权值后就可以为博弈树的子状态提供一个评估值。然而这种评估模式还有很大的优化空间。尤其是在调整估值因素的权重方面。&lt;/p&gt;
&lt;h3 id=&#34;2-1-1-爬山法&#34;&gt;&lt;a href=&#34;#2-1-1-爬山法&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 爬山法&#34;&gt;&lt;/a&gt;2.1.1 爬山法&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 猜测一个较好的初始权重后，逐步微调权重，直到评估效果达到一个极大值，这就是爬山法。显然爬山法非常依赖一个优秀的初始猜测权重，而且寻找最优权重的过程会很缓慢。&lt;/p&gt;
&lt;h3 id=&#34;2-1-2-蒙特卡罗方法&#34;&gt;&lt;a href=&#34;#2-1-2-蒙特卡罗方法&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 蒙特卡罗方法&#34;&gt;&lt;/a&gt;2.1.2 蒙特卡罗方法&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 既然初始权重或寻找起点是爬山法的短板，那么就进行足够多次的爬山法，使爬山法的起点覆盖足够多的情况，最后汇总寻找结果。这就是蒙特卡罗方法的基本思路。&lt;/p&gt;
&lt;h3 id=&#34;2-1-3-模拟退火算法&#34;&gt;&lt;a href=&#34;#2-1-3-模拟退火算法&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 模拟退火算法&#34;&gt;&lt;/a&gt;2.1.3 模拟退火算法&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 模拟退火算法是对蒙特卡罗方法的改进，它使用MetroPolis重要性采样的基本思想，在寻优的开始使用较高的概率进行随机突跳,随着寻优过程的深入逐步降低这一接受不佳参数概率。并且随着搜索的深入,可接受的参数的不佳程度也越来越小。通过这样一个由粗到细的过程逐渐逼近最优的参数。由于此算法要求对参数的改变概率逐渐下降及对各种参数值进行充分多次的采样,在实际使用中也比爬山法的速度要慢,但比蒙特卡罗方法要快。&lt;/p&gt;
&lt;h3 id=&#34;2-1-4-遗传算法&#34;&gt;&lt;a href=&#34;#2-1-4-遗传算法&#34; class=&#34;headerlink&#34; title=&#34;2.1.4 遗传算法&#34;&gt;&lt;/a&gt;2.1.4 遗传算法&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 顾名思义，遗传算法将各个评估因素的权重作为”遗传基因”，在有限大小的变异程度下，尝试并继承更优秀的权重组合。通过模拟进化过程寻找最优权重。&lt;/p&gt;
&lt;h3 id=&#34;2-1-5-人工神经网络&#34;&gt;&lt;a href=&#34;#2-1-5-人工神经网络&#34; class=&#34;headerlink&#34; title=&#34;2.1.5 人工神经网络&#34;&gt;&lt;/a&gt;2.1.5 人工神经网络&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; BP神经网络模拟了神经系统中神经元的刺激积累和交互网状影响的作用，训练一套合理的神经元间连接的信息采样权重。这与获得最优权重的目的不谋而合。或许为了提高训练性能，还可以用上CNN（卷积神经网络）、BDN（置信深度网络）这样的深度学习神经网络。&lt;/p&gt;
&lt;h2 id=&#34;2-2-蒙特卡罗方法的评估算法&#34;&gt;&lt;a href=&#34;#2-2-蒙特卡罗方法的评估算法&#34; class=&#34;headerlink&#34; title=&#34;2.2 蒙特卡罗方法的评估算法&#34;&gt;&lt;/a&gt;2.2 蒙特卡罗方法的评估算法&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 计算机围棋博弈问题的一大难点在于难以设计简单有效的局面评估算法。传统的围棋程序主要采用影响函数等专家知识进行局面评估，由于围棋的专家知识难以抽象出来（如厚味，薄味，气合等词），往往评估得不准。那么精确评估似乎只有穷举了。如果黑白双方的接下来每手棋都“正确”，最后黑棋赢了，那么当时的局面一定是黑棋优势。可惜如果没有量子计算机，这种穷举是无法达成的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 再假设，如果黑白双方棋力不高却相当，来续下这个局面，最后是黑棋赢了，当时的局面是谁优势呢？你大概会说，黑棋优势的可能性更大一些。进一步，同样的局面续下了1000次，有800次是黑棋赢了，那么有理由基本相信，当前局面中黑棋占优。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 那么，如果黑棋和白棋都不会围棋，只会随机落子呢？他们针对这一局面续下了1000次，竟然有800次是黑棋赢了。这时我们也可以断言，当前局面确实黑棋占优。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这就是蒙特卡罗局面评估算法，简单点说，就是用大量迭代的随机的深度优先搜索来代替先验知识对局面做出评估。当然大量彼此没有同步约束的随机迭代过程就很适合且只适合通过并行方式甚至分布式集群计算来解决了。&lt;/p&gt;
</content>
        <category term="人机博弈" />
        <category term="Maxmin" />
        <category term="AlphaBeta" />
        <category term="PVS" />
        <category term="MTD(f)" />
        <updated>2015-11-14T14:27:47.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/19/%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%A9%E5%99%A8%E2%80%94%E2%80%94apt-file/</id>
        <title>解决依赖问题的利器——apt-file</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/19/%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%A9%E5%99%A8%E2%80%94%E2%80%94apt-file/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 学校的有线网络客户端是DrCom，Windows下停掉热点分享服务和代理后跑的很顺利。可是切到我常用的Ubuntu下时客户端却跑不起来。从终端用命令运行客户端时发现有依赖文件缺失，借着这个契机，我认识了Ubuntu（Debian）下解决依赖问题的利器——apt-file。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 事情的始末是这样的，当时报的文件缺失是libXi.so.6，发现文件缺失后我先在整个计算机范围内查找了这个文件，在&lt;code&gt;/usr/lib/x86_64-linux-gnu&lt;/code&gt;目录下发现了一个，当时很不解，明明不缺依赖文件啊。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 后来我百度了一下大家遇到同类情况的解决方案，发现原来缺的是32位的libXi.so.6，刚才的目录下显然是64位的gnu文件。然后我发现大家开始用各种方式安装32位的兼容库，如ia32-libs，这个库还被Ubuntu抛弃好几年了，得换以前的源装之类的。也有人建议利用增加32位的架构来支持依赖32位库的软件。且不论有多么拐弯抹角有多麻烦，前面这些解决方案在我的Ubuntu Kylin 14.04 LTS下都没有见效。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这时灰头土脸漫不经心在网上闲逛的我看见了一篇&lt;a href=&#34;http://blog.163.com/shishihoule@126/blog/static/57293547201442683951681/&#34;&gt;惊艳的博文&lt;/a&gt;。让我激动的是博主&lt;strong&gt;发现依赖缺失-&amp;gt;利用apt-file找到依赖文件-&amp;gt;逐个补全依赖文件-&amp;gt;解决问题&lt;/strong&gt;这一直截了当的过程的畅快感。感谢博主，感谢博主感谢的博主。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在利用apt-file解决问题前我们需要做一点知识储备。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先我们需要了解，Linux下有一个检查可执行文档依赖项的命令：&lt;a href=&#34;http://man7.org/linux/man-pages/man1/ldd.1.html&#34;&gt;ldd&lt;/a&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后我们需要了解，Ubuntu下用apt-get来install文件时可以通过类似&lt;code&gt;sudo apt-get install libxi:i386&lt;/code&gt;的格式来指定文件使用的架构，i386就是指32位架构。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们还可以借助Ubuntu的&lt;code&gt;sudo -i&lt;/code&gt;命令让终端留在root权限下，免得我们在逐个安装依赖文件时总要在命令前加”sudo“。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后是apt-file的安装和使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu（Debian）系统中默认没有apt-file工具，安装和许多其他工具一样，&lt;code&gt;sudo apt-get install apt-file&lt;/code&gt;就好。&lt;/li&gt;
&lt;li&gt;安装成功后还不能直接使用，&lt;code&gt;apt-file update&lt;/code&gt;命令会更新软件缓存库，有了库才能搜索文件。第一次使用或&lt;code&gt;apt-get update&lt;/code&gt;后都需运行一次该命令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-file search file_name&lt;/code&gt;可以查找（含有目标字符串的）目标文件存在于哪些软件包中。直接search可能返回太多内容，可以利用Linux的grep命令获得返回内容中字符串完整匹配的部分，如&lt;code&gt;apt-file search filename | grep -w filename&lt;/code&gt;，或者获得特定路径下的文件，如&lt;code&gt;apt-file search filename | grep /bin/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-file list package_name&lt;/code&gt;可以罗列目标软件包包含的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是可以动手解决问题了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;sudo -i
apt-get install apt-file
apt-file update
ldd DrClientLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 缺的也不多，找到那几个“not found”的依赖文件，然后继续。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;apt-file search libxi|grep libxi.so.6
apt-file search libxi|grep libxi
apt-get install libxi6:i386
./DrClientLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 跟之前报告说缺的依赖文件有了不同，继续。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;apt-file search libxrender|grep libxrender
apt-get install libxrender1:i386
./DrClientLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 缺的依赖文件又不同了。发现这些依赖文件所属包的命名规律了，直接装，不用找了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;apt-get install libxrandr2:i386
./DrClientLinux
apt-get install libxcursor1:i386
./DrClientLinux
apt-get install libxinerama1:i386
./DrClientLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 妥了，可喜可贺！&lt;/p&gt;
</content>
        <category term="ubuntu" />
        <category term="debian" />
        <category term="apt-file" />
        <updated>2015-10-19T10:33:33.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/17/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E6%8E%A2%E2%80%94%E2%80%94c-11%E7%AF%87/</id>
        <title>C++多线程初探——c++11篇</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/17/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E6%8E%A2%E2%80%94%E2%80%94c-11%E7%AF%87/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 今天被说C++出身的猿不会多线程跟不会C++有什么分别，于是放下刚到手的Go和R的书，痛定思痛准备来给自己补补课。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; C++新标准c++11出现之前（虽然“新”标准已经发布好几年了），大家用C++写多线程通常有两种方式：Unix&amp;#x2F;Linux下通常使用POSIX标准的pthread.h库，pthread并不是语言本身提供的内置库，gcc编译带pthread的程序时需要加上&lt;code&gt;-lpthread&lt;/code&gt;标识参数；Windows下，win系列系统提供了一些线程API，但是由于gcc&amp;#x2F;g++等编译器的跨平台性，其实也可以在win下使用pthread。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然而2011年夏天，c++11标准发布了，新C++有了许多方便的新特性，其中就包括内置的，对多线程的支持。gcc 4.6及以前的版本编译c++11标准的多线程程序时还要加&lt;code&gt;-pthread&lt;/code&gt;标识参数（注意与pthread库的&lt;code&gt;-lpthread&lt;/code&gt;参数的区别）。后来也默认的支持新C++的内置多线程了，实测gcc 4.8.4除了&lt;code&gt;-std=c++11&lt;/code&gt;不加别的参数，能够顺利编译运行c++11的多线程程序。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 铺垫了这么多，下面就先来试试c++11的多线程吧。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; helloWorld.cpp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/* c++11线程类的所在，下面的std::thread和std::this_thread都在其中 */
#include &amp;lt;thread&amp;gt;
#include &amp;lt;iostream&amp;gt;
using namespace std;

void thread_task()
&amp;#123;
	cout &amp;lt;&amp;lt; &amp;quot;Hello world! My thread ID is &amp;quot; &amp;lt;&amp;lt; this_thread::get_id() &amp;lt;&amp;lt; endl;
&amp;#125;

int main(int argc, char const *argv[])
&amp;#123;
	// 主线程测试
	/* get_id函数是thread类和this_thread类的成员，获取线程ID */
	cout &amp;lt;&amp;lt; &amp;quot;I&amp;#39;m the main thread. My thread ID is &amp;quot; &amp;lt;&amp;lt; this_thread::get_id() &amp;lt;&amp;lt; endl;
	// 子线程测试
	/* 构造子线程时指派线程任务函数指针 */
	thread t1(thread_task);
	thread t2(thread_task);
	thread t3(thread_task);
	/* 主线程创建子线程 */
	t1.join();
	t2.join();
	t3.join();

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最简单的多线程测试看起来运行的很顺利。下面我们稍微详细一点研究下std::thread的&lt;a href=&#34;http://www.cplusplus.com/reference/thread/thread/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;thread::id：thread下面有个子类型thread::id，表示线程ID。是thread::get_id和this_thread::get_id的返回值。thread::id的构造函数返回一个non-joinable（不代表任何一个线程，即不与任何一个未终止的线程对应的ID相等）的线程ID。一个活跃的线程的ID会在线程终止后变成non-joinable线程ID。&lt;/li&gt;
&lt;li&gt;thread类的构造有4种形式：&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;thread::thread()：默认构造函数，即不带参数的构造函数。构造一个非活跃（不可执行）的线程对象。&lt;/li&gt;
&lt;li&gt;thread::thread (Fn&amp;amp;&amp;amp; fn, Args&amp;amp;&amp;amp;… args)：初始化构造函数，即带足够多参数，足以初始化一个线程的构造函数。初始化构造函数的参数列表包括一个函数指针和这个函数的参数列表。利用迟邦定技术，构造过程与对函数副本的请求同步完成。&lt;/li&gt;
&lt;li&gt;复制构造函数，即从一个线程对象复制而得到一个新的线程对象。实际上，线程对象不允许被复制。&lt;/li&gt;
&lt;li&gt;thread::thread (thread&amp;amp;&amp;amp; x)：移动构造函数，即重新给指定线程分配一个对象（句柄），并释放原来的线程对象（句柄）。注意这并不影响原线程的执行，因为只是释放了对象（句柄），而没有分离原进程、释放资源。参数只有原线程对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;thread::~thread()：如果一个活跃线程被释放，首先会调用terminal()方法停止线程的执行。&lt;/li&gt;
&lt;li&gt;thread::operator&amp;#x3D;(thread&amp;amp;&amp;amp; rhs)：作用相当于移动构造函数，原线程句柄被释放，返回一个更换句柄的线程对象。&lt;/li&gt;
&lt;li&gt;thread::get_id()：如果方法的目标线程对象是活跃的，生成一个唯一的ID并返回；如果调用方法的线程对象非活跃，先调用线程的默认构造函数生成一个non-joinable线程对象，然后生成一个唯一的ID并返回。&lt;/li&gt;
&lt;li&gt;thread::joinable()：joinable方法的唯一参数为一个线程ID，它的bool型返回值代表这个线程ID是否对应一个活跃的线程。this_thread下并没有这个方法，因为当前线程如果不为活跃线程，它将不能完成任何线程任务，即不能调用任何方法。&lt;/li&gt;
&lt;li&gt;thread::join()：这个方法将阻塞调用方法的线程（主线程），直到目标线程中的操作全部完成。这个方法返回之后，目标线程对象的状态就变为非活跃并可以被安全的释放了。换句话说，这个方法定义了一组线程同步关系。&lt;/li&gt;
&lt;li&gt;thread::detach()：应该有读者注意到了，detach是join的反义词，该方法的作用是从调用线程（主线程）中分离目标线程，让目标线程可以独立并行执行。调用detach方法后两个线程（调用线程和目标线程）都不会被阻塞或者被同步，而是会并行执行直到各自完成所有操作，谁完成执行谁就释放自己的资源，互不影响。（不是我啰嗦，文档原文就是这么说的）这个方法返回之后，目标线程对象的状态就变为非活跃并可以被安全的释放了。换句话说，这个方法定义了一组线程异步关系。&lt;/li&gt;
&lt;li&gt;thread::swap(thread&amp;amp; x)：文档原文说是交换两个线程对象的&lt;strong&gt;状态&lt;/strong&gt;，我表示不明白状态是指什么。实验表明应该是交换了线程与对象（句柄）的映射关系。thread类还重载了一个面向过程风格的swap方法版本：&lt;code&gt;void swap (thread&amp;amp; x, thread&amp;amp; y)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;thread::hardware_concurrency()：这是个静态成员函数，返回一个无符号整型，返回一个大概的（不一定准确，因为系统可以支持或限制每个进程创建的线程数）基于硬件的最大并行线程数。如果这个试图返回的值没有被系统很好的定义，返回0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; thread头文件中还有一个与thread并列的&lt;a href=&#34;http://www.cplusplus.com/reference/thread/this_thread/&#34;&gt;this_thread类&lt;/a&gt;，this_thread类非常简单，除了get_id方法只有另外三个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this_thread::yield()：顾名思义，使当前线程退让，从执行状态变为就绪状态，使同优先级的线程有机会被重新调度进入执行状态。如果当前进程没什么毛病那么使它退让并没有太大意义，甚至可能不会造成事实上的线程执行顺序变化。yield方法应该在当前线程忙等别的线程而又没有被阻塞时执行。&lt;/li&gt;
&lt;li&gt;this_thread::sleep_until(const chrono::time_point&amp;lt;Clock,Duration&amp;gt;&amp;amp; abs_time)：阻塞当前线程直到特定时间点，使当前线程至少等待到特定时间点后继续执行，参数是一种特定格式的时间点数据。&lt;/li&gt;
&lt;li&gt;this_thread::sleep_for(const chrono::duration&amp;lt;Rep,Period&amp;gt;&amp;amp; rel_time)：阻塞当前线程一段时间，使当前线程至少等待特定时长后继续执行，参数是一种特定格式的时间段数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其实c++11标准下，除了thread，还有其他四个用来支持多线程的辅助头文件：&lt;a href=&#34;http://www.cplusplus.com/reference/atomic/&#34;&gt;atomic&lt;/a&gt;、&lt;a href=&#34;http://www.cplusplus.com/reference/mutex/&#34;&gt;mutex&lt;/a&gt;、&lt;a href=&#34;http://www.cplusplus.com/reference/condition_variable/&#34;&gt;condition_variable&lt;/a&gt;、&lt;a href=&#34;http://www.cplusplus.com/reference/future/&#34;&gt;future&lt;/a&gt;。前三个很好理解，分别提供封装好的原子数据类型、互斥锁设备和条件值，future头文件里提供的是一些对分享的数据资源进行竞争的必须设备（我很迷茫头文件为什么不干脆叫share而是叫future这个让人摸不着头脑的名字）。如果读者熟悉操作系统或者进程调度，一定不会对前面这些东西感到陌生。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们不难管中窥豹猜测多线程的实质，操作系统实现了完善的进程调度，而同样的事情我们要自己对线程再做一遍。线程的调度（包括同步异步、资源调配等等）也就是多线程编程具体要做的事。（还一片茫然的读者请去看任意一本操作系统课本前两三章的样子补补课）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这篇文主要是科普，入门，建立概念，复杂的多线程实现练习之后再慢慢做，当然也会发文的。下一篇文我准备再科普一下POSIX标准的多线程编程，即pthread库的多线程编程。是的，我不打算研究win下的多线程API了，直言不讳的说，我对Windows有偏见。&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="c++11" />
        <category term="多线程" />
        <updated>2015-10-17T06:58:22.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/13/python%E7%9A%84SimpleHTTPServer/</id>
        <title>python的SimpleHTTPServer</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/13/python%E7%9A%84SimpleHTTPServer/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Linux下想要给局域网的其他终端共享文件大家一般会怎么做？是开个Nginx服务器或者Apache服务器？还是装个开源的FTP软件？其实还有更便捷的原生办法。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Linux一般都预装了python，有个神奇的python命令：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;python -m SimpleHTTPServer 80&lt;/code&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 读者可以试试发生了什么，没错，正如命令的字面意思，本地80口被开了个简易的HTTP服务器。如果当前文件夹下没有主页，局域网终端就可以通过本地IP访问本机并看到到执行该命令的当前文件夹下的文件目录了，接下来只要通过浏览器就可以下载本机的文件。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不知道读者准备怎么使用这个命令，我有时候会忘记这个命令的一些细节所以选择把这个命令写成一个shell脚本，需要共享哪个文件夹就把脚本拖到哪里运行一下。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果想看这个python命令更详细的介绍可以参阅&lt;a href=&#34;https://docs.python.org/2/library/simplehttpserver.html&#34;&gt;python官方文档&lt;/a&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我的脚本也挂出来吧，应该只在debian系统下好用，仅供参考：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#!/bin/bash
route=`route|grep default`
route=$&amp;#123;route##*&amp;#39; &amp;#39;&amp;#125;
if [[ &amp;quot;$route&amp;quot; == usb* ]]; then
    echo 正在使用usb共享网络。
elif [[ &amp;quot;$route&amp;quot; == wlan* ]]; then
    echo 正在使用无线网络。
elif [[ &amp;quot;$route&amp;quot; == eth* ]]; then
    echo 正在使用有线网络。
else
    echo 正在使用其他网络。
fi
ip=`ifconfig $route|grep &amp;#39;inet &amp;#39;|cut -d&amp;#39;:&amp;#39; -f2|cut -d&amp;#39; &amp;#39; -f1`
echo 局域网ip地址：$ip
echo 现在你可以从其他终端通过地址 http://$ip:2333/ 访问当前目录。
python -m SimpleHTTPServer 2333
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="python" />
        <updated>2015-10-13T09:46:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/13/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84python%EF%BC%88pybrain%E5%BA%93%EF%BC%89%E5%AE%9E%E7%8E%B0/</id>
        <title>BP神经网络的python（pybrain库）实现</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/13/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84python%EF%BC%88pybrain%E5%BA%93%EF%BC%89%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上一篇文用C++手写了BP神经网络，事实上，生产环境中已经很少有人再亲自写神经网络了，已经出现了很多成熟的机器学习开源库。我安装了C++的shark库和python的pybrain库，在研究shark库的文档时发现shark库封装度太低了，用起来很麻烦，遂弃。虽然放弃C++的高效库很遗憾，但是后来发现pybrain库真是非常友好非常方便，于是分别写了分类器和函数拟合的例子及测评。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 看两个库的源码时发现，shark库的机器学习模型比较多，pybrain的少一些，但是提供一些实时图形化的接口（虽然我嫌麻烦没用）。于是pybrain也可以与matlab和R语言争争份额了（虽然显然还是matlab和R比较专业）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先来看分类器的实现，还是那个寻找点与平面位置关系规则的问题，上代码，NNClassifier.py：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 关于前馈神经网络二分类点集的尝试
# 因为是首次尝试使用pybrain，不使用快捷方式创建神经网络以求思路清晰。

__author__ = &amp;#39;Bipedal Bit, hmemoryl@163.com&amp;#39;

from pybrain.structure import FeedForwardNetwork
from pybrain.structure import LinearLayer, SigmoidLayer
from pybrain.structure import FullConnection
from pybrain.datasets import SupervisedDataSet
import random
from pybrain.supervised.trainers import BackpropTrainer
import time
from pybrain.tools.customxml.networkwriter import NetworkWriter
from pybrain.tools.customxml.networkreader import NetworkReader

# ================== 构造神经网络 ======================
# 建立前馈神经网络FNN
FNN = FeedForwardNetwork()

# 逐层建立神经元
# 建立m个输入参数的输入层（inLayer）
inLayer = LinearLayer(7, name = &amp;#39;inLayer&amp;#39;)
# 建立隐含层
hiddenLayer0 = SigmoidLayer(30, name = &amp;#39;hiddenLayer0&amp;#39;)
# 建立n个输出参数的输出层（outLayer）
outLayer = SigmoidLayer(2, name = &amp;#39;outLayer&amp;#39;)

# 将层加入神经网络（向神经网络内添加不同功能的神经元）
FNN.addInputModule(inLayer)
FNN.addModule(hiddenLayer0)
FNN.addOutputModule(outLayer)

# 建立层之间的连接，使用全连接，即两层的神经元之间两两全部连接
conn_inToHidden0 = FullConnection(inLayer, hiddenLayer0)
conn_hidden0ToOut = FullConnection(hiddenLayer0, outLayer)

# 将连接加入神经网络
FNN.addConnection(conn_inToHidden0)
FNN.addConnection(conn_hidden0ToOut)

# 神经元拓扑排序，准备使用
FNN.sortModules()

# ================== 构造数据集 ======================
# 建立带监督的数据集，参数为输入维数和输出维数
DS = SupervisedDataSet(7, 2)

# 向数据集添加样本
# 将一个0~1的随机数扩展到适当的范围
def expand(n):
	return n*20 - 10
# 数据组数
dataCnt = 2000
for i in xrange(1, dataCnt):
	# 生成归一化样本数据
	_x = random.random()
	_y = random.random()
	_z = random.random()
	_a = random.random()
	_b = random.random()
	_c = random.random()
	_d = random.random()
	# 扩散出样本真实值
	x = expand(_x)
	y = expand(_y)
	z = expand(_z)
	a = expand(_a)
	b = expand(_b)
	c = expand(_c)
	d = expand(_d)
	# 计算监督值
	above = 1 if z &amp;gt; (a*x + b*y + d)/(-c) else 0
	below = 1 if above == 0 else 0
	# 添加数据
	DS.addSample([_x, _y, _z, _a, _b, _c, _d], [above, below])

# 分别索引输入/输出数据集合
X, Y = DS[&amp;#39;input&amp;#39;], DS[&amp;#39;target&amp;#39;]

# 按比例切分训练集与测试集（训练集：测试集 = 8:2）
DSTrain, DSTest = DS.splitWithProportion(0.8)

# 分别索引训练集和测试集的输入/输出数据集合
XTrain, YTrain = DSTrain[&amp;#39;input&amp;#39;], DSTrain[&amp;#39;target&amp;#39;]
XTest, YTest = DSTest[&amp;#39;input&amp;#39;], DSTest[&amp;#39;target&amp;#39;]

# =================== 读取神经网络 =====================
FNN = NetworkReader.readFrom(&amp;#39;networkClasssifier.xml&amp;#39;)

# ================== 训练神经网络 ======================
# 使用BP算法训练神经网络
trainer = BackpropTrainer(FNN, DSTrain, verbose = True, learningrate = 0.01, lrdecay = 1, momentum = 0)

# 开始计时
t_start = time.clock()

# 训练至收敛
trainer.trainUntilConvergence(maxEpochs = 100)

# 计时结束
t_end = time.clock()

# 输出训练用时
print &amp;#39;训练用时：&amp;#39;, t_end - t_start, &amp;#39;s&amp;#39;

# =================== 存储神经网络 =====================
NetworkWriter.writeToFile(FNN, &amp;#39;networkClasssifier.xml&amp;#39;)

# =================== 结果可视化 =======================


# ====================== 测试 ==========================
successCnt = 0
for i in xrange(0, len(XTest)-1):
	# 获取测试数据
	x = XTest[i]
	y = YTest[i]
	# 测试
	prediction = FNN.activate(x)
	if (y[0] - y[1])*(prediction[0] - prediction[1]) &amp;gt; 0:
		successCnt += 1
print &amp;#39;测试：&amp;#39;, len(XTest)
print &amp;#39;命中：&amp;#39;, successCnt
print &amp;#39;命中率：&amp;#39;, (successCnt*1.)/len(XTest)*100, &amp;#39;%&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 训练结果我不太意外，误差函数值在0.05左右，算不上好，正确率在82%左右，只能说还行。这次只是简单测评，就不对收敛程度做太高要求了。（其实是我把隐含层神经元都加到30个了精度也不是很高，有点累了，毕竟经验公式说这种输入输出参数量最多加到13个）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后的神经网络保存文档（权重数组），networkClassifier.xml：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;
&amp;lt;PyBrain&amp;gt;
	&amp;lt;Network class=&amp;quot;pybrain.structure.networks.feedforward.FeedForwardNetwork&amp;quot; name=&amp;quot;FeedForwardNetwork-5&amp;quot;&amp;gt;
		&amp;lt;name val=&amp;quot;u&amp;#39;FeedForwardNetwork-5&amp;#39;&amp;quot;/&amp;gt;
		&amp;lt;Modules&amp;gt;
			&amp;lt;LinearLayer class=&amp;quot;pybrain.structure.modules.linearlayer.LinearLayer&amp;quot; inmodule=&amp;quot;True&amp;quot; name=&amp;quot;inLayer&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;7&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;inLayer&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/LinearLayer&amp;gt;
			&amp;lt;SigmoidLayer class=&amp;quot;pybrain.structure.modules.sigmoidlayer.SigmoidLayer&amp;quot; name=&amp;quot;outLayer&amp;quot; outmodule=&amp;quot;True&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;2&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;outLayer&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/SigmoidLayer&amp;gt;
			&amp;lt;SigmoidLayer class=&amp;quot;pybrain.structure.modules.sigmoidlayer.SigmoidLayer&amp;quot; name=&amp;quot;hiddenLayer0&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;30&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;hiddenLayer0&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/SigmoidLayer&amp;gt;
		&amp;lt;/Modules&amp;gt;
		&amp;lt;Connections&amp;gt;
			&amp;lt;FullConnection class=&amp;quot;pybrain.structure.connections.full.FullConnection&amp;quot; name=&amp;quot;FullConnection-3&amp;quot;&amp;gt;
				&amp;lt;inmod val=&amp;quot;inLayer&amp;quot;/&amp;gt;
				&amp;lt;outmod val=&amp;quot;hiddenLayer0&amp;quot;/&amp;gt;
				&amp;lt;Parameters&amp;gt;[-4.4634646760183774, -1.8663551824786604, 1.5796984784944188, -4.1545734140399917, -1.4235379909335284, 10.814418886792573, -0.35697065520281313, 3.7168599840362613, -1.3954006078608174, 3.2888708257680479, -1.2728713382523704, 5.1682485849770519, -10.345459393449577, 0.40944729400489821, -0.86432327459917391, 0.87415267739043501, -1.1261847464737353, 0.26550824904566483, -0.69655632472406404, -1.0926496454783619, -1.3241014363212174, -1.2345262671004642, -5.3545154953074556, -3.2977309106602868, -1.9192142648212187, 3.5219032402205235, 8.8243116475870895, -0.34711073857964059, -0.76652402450096546, -0.45800625182882904, 0.10921234310650819, 1.0906882881030282, 0.58122385851806679, 0.74902769546891046, 0.57778560396382117, -0.36268964602939496, -1.4560716552974731, 0.025807475393432977, -0.52324632490359346, -1.4768259974689912, -1.3226548504200857, -0.56024431774602601, 0.5253813385807985, -2.3601368528359932, 3.4391924327008545, -3.4529059457340887, -0.36798304125763204, 0.24642387811765787, 0.74392363594535504, -1.4200092817628436, -0.95882940181717424, 0.90204884683974906, -2.2123307425066581, -1.2927495594815508, -2.6418298086483243, 0.0089737728359628229, -0.96131150512314989, -0.42386913703414159, 2.7423827971590629, 0.49257080970361217, -0.73140003600797654, -0.97237673817617065, 0.021672107067701795, -0.30730995794768651, -0.28377110259164756, -1.3769421502868895, -0.49923480994397734, 0.63167130189837051, 0.72750574299622528, -0.50823243724360356, -2.3249236293984685, -1.0084930398088603, 0.55483423319351144, -3.0895951468032683, -1.569810215716863, -4.6712778120909002, 2.1476977927094589, -0.92601922552049853, 0.80913122603871213, 1.0167819396610751, 1.2578916110729925, 1.1336741124853456, -1.4462571148912973, 0.4498637409091461, -0.0046570255381198191, 1.0130490743040022, 0.067808742574706565, -3.1665123334368257, -1.3695841902759027, -0.61944129404109394, 0.32712520616674406, -4.0944887153367588, 0.33425112596763401, 0.53786026328450398, 3.783707069693385, -0.73771116333542275, -7.3116843863108363, -0.90847319043398045, -1.3072997563815252, 1.5864357535576585, -2.1773369395271285, 0.16582713303194607, 0.62423604397793453, 0.59389298905810417, -0.31484499272512129, 5.0708486445028633, 0.91681404432938907, 0.31193631582711534, -5.4473204154043851, -0.7847240929315491, -7.6951030649320984, -0.32014838444510901, 0.56829986867023885, -0.29653458065896326, 0.51800388373753137, -0.56704382593349767, -0.25264606109631066, 0.78514270624403915, 0.67787739064705022, -0.0014430992506962728, -1.1915649958214867, -2.8339864138165369, -1.2920958546780335, -1.2004239162539645, -5.5518360974893373, 2.6887049948956299, -1.8837019633804577, 2.8587109449831924, 3.8684384835516568, -2.7090025688862394, -3.3154340336962216, 1.0688334874085363, 0.43275994294040698, -3.8784776661421345, -0.8578678330233066, 1.8270738585600814, 5.4477321487215189, 2.7554123218891138, -6.9965304625370077, 0.91986888975642622, 1.6206020126465939, 0.40565735648759632, 1.6264383151366206, -2.0910948725615417, -0.96054739666906863, 0.83967430154853273, 0.17826444997023716, 0.93718547827806598, -5.2232302716871377, -0.37715953425266679, 1.1057273981735851, -5.0228630028488084, 8.7833592718428406, -0.17862770462286087, 0.071119534208408983, 0.61781354218205642, -2.0482041559354802, -1.2286398440013546, 0.30582092080786355, 0.74602342033773583, -0.12623275590092933, -0.89369108883986548, -1.0173825208087091, 0.21764568858325722, 1.1182634120634272, 0.44364418276133, 1.138196191040812, 0.10662608395776786, -0.25838212820199019, -0.86982182253008533, -0.55680951312883542, 0.25307613718779792, -0.90155685220035831, 1.835084251778919, -0.81174579278015824, 0.48215346567645934, 6.267187930149162, -2.1805487376071957, 1.0628647712248505, -3.0943161262836401, -4.9327587898336835, 1.3749005504013798, -5.5102212316356844, -0.96863134222439218, 0.8268862262896568, 4.3540259268851402, -0.50518156739373588, 3.8934730549155523, -0.39568193061006912, -3.7859120847720105, 2.0595665943684325, -2.6633982082854342, -4.0807360028025208, 3.7442177075679623, 5.11773145948146, -0.44630616509537863, 0.20714091867709217, -0.6873175410894995, 0.061460095180831932, -0.44453400594106057, 0.35250696385984698, 2.2565455035241082, -0.079401700376001166, -0.18177974449629683, 0.71736053566879954, 0.54270386006022042, 0.75951868740937811, 1.3078378324277897, -2.1881100701125251, 0.84052630355979829]&amp;lt;/Parameters&amp;gt;
			&amp;lt;/FullConnection&amp;gt;
			&amp;lt;FullConnection class=&amp;quot;pybrain.structure.connections.full.FullConnection&amp;quot; name=&amp;quot;FullConnection-4&amp;quot;&amp;gt;
				&amp;lt;inmod val=&amp;quot;hiddenLayer0&amp;quot;/&amp;gt;
				&amp;lt;outmod val=&amp;quot;outLayer&amp;quot;/&amp;gt;
				&amp;lt;Parameters&amp;gt;[-8.2129041568200112, -6.7995955920941888, 0.48890334859207907, 7.6066781773027499, 2.8270407553317769, -1.0008489151414828, 3.0303929667267862, -2.4507639356974593, 1.9205137372795547, -2.0677111079872867, -4.6278733853833467, 3.3159637261922645, 0.4984027688395733, 4.7415120162351183, -2.5033978652108386, 5.1877234768369922, 0.87623718221836022, -5.0415283550332814, 4.0707627481245554, -6.4411441580882105, 2.6369969676415286, -8.5775684178164635, -1.313121167107631, -0.89764250697180914, -0.78729432668282306, -4.1300664676586489, 5.6446245751676667, -4.5102393183383498, 0.1106246177522491, 3.2716628012569964, 8.2844165753556958, 6.9238002822405154, 0.33656468267775197, -7.6960641823743456, 0.84148765790877422, 1.7483968344478173, -2.9938885121262571, 2.2508496743698845, -3.3237973590853258, 0.25502346696281558, 4.4894675338875496, -2.5350467550996507, -0.11269663125646072, -4.7593000820253231, 1.8099587344845871, -5.1168105240606856, -1.7100116403752497, 4.8179029808866174, -4.1421556373685728, 6.5870613347344591, -1.9261388149076637, 8.4927720262891935, 1.6203591174629115, -1.702384877536026, 1.9822996827269457, 3.6477517464649072, -5.4008040115101963, 4.720080872228464, -0.76546727507485091, -3.6703618616272795]&amp;lt;/Parameters&amp;gt;
			&amp;lt;/FullConnection&amp;gt;
		&amp;lt;/Connections&amp;gt;
	&amp;lt;/Network&amp;gt;
&amp;lt;/PyBrain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 函数拟合实验选择了简单的a+b问题，上代码，NNRegression.py：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 关于前馈神经网络函数拟合的尝试
# 因为是首次尝试使用pybrain，不使用快捷方式创建神经网络以求思路清晰。

__author__ = &amp;#39;Bipedal Bit, hmemoryl@163.com&amp;#39;

from pybrain.structure import FeedForwardNetwork
from pybrain.structure import LinearLayer, SigmoidLayer
from pybrain.structure import FullConnection
from pybrain.datasets import SupervisedDataSet
import random
from pybrain.supervised.trainers import BackpropTrainer
import time
from pybrain.tools.customxml.networkwriter import NetworkWriter
from pybrain.tools.customxml.networkreader import NetworkReader

# ================== 构造神经网络 ======================
# 建立前馈神经网络FNN
FNN = FeedForwardNetwork()

# 逐层建立神经元
# 建立m个输入参数的输入层（inLayer）
inLayer = LinearLayer(2, name = &amp;#39;inLayer&amp;#39;)
# 建立隐含层
hiddenLayer0 = SigmoidLayer(20, name = &amp;#39;hiddenLayer0&amp;#39;)
# 建立n个输出参数的输出层（outLayer）
outLayer = LinearLayer(1, name = &amp;#39;outLayer&amp;#39;)

# 将层加入神经网络（向神经网络内添加不同功能的神经元）
FNN.addInputModule(inLayer)
FNN.addModule(hiddenLayer0)
FNN.addOutputModule(outLayer)

# 建立层之间的连接，使用全连接，即两层的神经元之间两两全部连接
conn_inToHidden0 = FullConnection(inLayer, hiddenLayer0)
conn_hidden0ToOut = FullConnection(hiddenLayer0, outLayer)

# 将连接加入神经网络
FNN.addConnection(conn_inToHidden0)
FNN.addConnection(conn_hidden0ToOut)

# 神经元拓扑排序，准备使用
FNN.sortModules()

# ================== 构造数据集 ======================
# 建立带监督的数据集，参数为输入维数和输出维数
DS = SupervisedDataSet(2, 1)

# 向数据集添加样本
# 数据组数
dataCnt = 1000
for i in xrange(1, dataCnt):
	# 生成归一化样本数据
	a = random.random()
	b = random.random()
	# 计算监督值
	s = a*20 - 10 + b*20 - 10
	# 添加数据
	DS.addSample([a, b], [s])

# 分别索引输入/输出数据集合
X, Y = DS[&amp;#39;input&amp;#39;], DS[&amp;#39;target&amp;#39;]

# 按比例切分训练集与测试集（训练集：测试集 = 8:2）
DSTrain, DSTest = DS.splitWithProportion(0.8)

# 分别索引训练集和测试集的输入/输出数据集合
XTrain, YTrain = DSTrain[&amp;#39;input&amp;#39;], DSTrain[&amp;#39;target&amp;#39;]
XTest, YTest = DSTest[&amp;#39;input&amp;#39;], DSTest[&amp;#39;target&amp;#39;]

# =================== 读取神经网络 =====================
FNN = NetworkReader.readFrom(&amp;#39;networkRegression.xml&amp;#39;)

# ================== 训练神经网络 ======================
# 使用BP算法训练神经网络
trainer = BackpropTrainer(FNN, DSTrain, verbose = True, learningrate = 0.01, lrdecay = 1, momentum = 0)

# 开始计时
t_start = time.clock()

# 训练至收敛
trainer.trainUntilConvergence(maxEpochs = 100)

# 计时结束
t_end = time.clock()

# 输出训练用时
print &amp;#39;训练用时：&amp;#39;, t_end - t_start, &amp;#39;s&amp;#39;

# =================== 存储神经网络 =====================
NetworkWriter.writeToFile(FNN, &amp;#39;networkRegression.xml&amp;#39;)

# =================== 结果可视化 =======================


# ====================== 测试 ==========================
for i in xrange(0, 10):#len(XTest)-1):
	# 获取测试数据
	x = XTest[i]
	y = YTest[i]
	# 测试
	prediction = FNN.activate(x)
	print &amp;#39;期望值：&amp;#39;, y
	print &amp;#39;预测值：&amp;#39;, prediction
	print &amp;#39;--------------------------------------&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 评测结果有些诡异，尽管我丧心病狂的把隐含层神经元数慢慢加到了20个之多，收敛精度依然不太高。误差函数值在0.016左右，计算结果多的时候能有一点几的误差。至于为什么诡异，你们知道我用C++手写的那个BP神经网络a+b拟合测评结果什么样吗？我每次增加隐含层神经元，精度都在提高，最后加到11个神经元时，误差值只有10^-7的数量级了。我在想，莫非pybrain的BP实现写的比我还糟糕？当然我没有闲到对比源码找差别的地步，毕竟这是在扩展知识面而不是开题写论文，要学的东西还有很多。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 训练结果，networkRegression.xml：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;
&amp;lt;PyBrain&amp;gt;
	&amp;lt;Network class=&amp;quot;pybrain.structure.networks.feedforward.FeedForwardNetwork&amp;quot; name=&amp;quot;FeedForwardNetwork-5&amp;quot;&amp;gt;
		&amp;lt;name val=&amp;quot;u&amp;#39;FeedForwardNetwork-5&amp;#39;&amp;quot;/&amp;gt;
		&amp;lt;Modules&amp;gt;
			&amp;lt;LinearLayer class=&amp;quot;pybrain.structure.modules.linearlayer.LinearLayer&amp;quot; inmodule=&amp;quot;True&amp;quot; name=&amp;quot;inLayer&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;2&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;inLayer&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/LinearLayer&amp;gt;
			&amp;lt;LinearLayer class=&amp;quot;pybrain.structure.modules.linearlayer.LinearLayer&amp;quot; name=&amp;quot;outLayer&amp;quot; outmodule=&amp;quot;True&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;1&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;outLayer&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/LinearLayer&amp;gt;
			&amp;lt;SigmoidLayer class=&amp;quot;pybrain.structure.modules.sigmoidlayer.SigmoidLayer&amp;quot; name=&amp;quot;hiddenLayer0&amp;quot;&amp;gt;
				&amp;lt;dim val=&amp;quot;20&amp;quot;/&amp;gt;
				&amp;lt;name val=&amp;quot;&amp;#39;hiddenLayer0&amp;#39;&amp;quot;/&amp;gt;
			&amp;lt;/SigmoidLayer&amp;gt;
		&amp;lt;/Modules&amp;gt;
		&amp;lt;Connections&amp;gt;
			&amp;lt;FullConnection class=&amp;quot;pybrain.structure.connections.full.FullConnection&amp;quot; name=&amp;quot;FullConnection-4&amp;quot;&amp;gt;
				&amp;lt;inmod val=&amp;quot;inLayer&amp;quot;/&amp;gt;
				&amp;lt;outmod val=&amp;quot;hiddenLayer0&amp;quot;/&amp;gt;
				&amp;lt;Parameters&amp;gt;[0.66989695089493184, 0.20154541787085151, -0.50128908433773467, -0.37527744480307418, -0.74611014578997958, -0.12337190284043228, -0.26139108724410959, -0.62223790666112244, 0.76934737325151314, 0.097273365366757986, -0.70241911419677627, -0.1675521617762078, -0.52875791799833338, -0.34701820533745775, 0.91136351597023102, -0.051368168009540249, -0.46415381076169848, -0.41344842847904884, -0.3637989937993043, -0.51709189928560939, 0.021917540062381426, -0.91373858562576571, 0.18558709721271155, 0.70146289478301882, 0.1657642703601043, 0.72042804496432955, -0.051995836002024759, -0.83682492233986472, -0.57633470846976453, -0.29793296256418189, -0.0042668700361729222, 0.89613628191472339, 0.78248084199047585, 0.083752407601260875, -0.34426021947865065, -0.53677318854588607, -0.59630570148683881, -0.2772033711210245, -0.29072335479904238, -0.59221753051512371]&amp;lt;/Parameters&amp;gt;
			&amp;lt;/FullConnection&amp;gt;
			&amp;lt;FullConnection class=&amp;quot;pybrain.structure.connections.full.FullConnection&amp;quot; name=&amp;quot;FullConnection-3&amp;quot;&amp;gt;
				&amp;lt;inmod val=&amp;quot;hiddenLayer0&amp;quot;/&amp;gt;
				&amp;lt;outmod val=&amp;quot;outLayer&amp;quot;/&amp;gt;
				&amp;lt;Parameters&amp;gt;[7.0033787939978653, -8.9204704009603475, -7.0019357487260141, -9.1851348838825597, 11.222280489358978, -9.1321512616209173, -10.187840330915042, 12.40878268578923, -8.1946287348945397, -9.729867458003703, -10.577209749285847, 12.709727310110253, 9.5182614987221701, -8.4580456500212975, -7.9531433608618309, 11.918092172946009, 10.86011334049692, -8.310811818166254, -9.5385851767871586, -9.531838664642386]&amp;lt;/Parameters&amp;gt;
			&amp;lt;/FullConnection&amp;gt;
		&amp;lt;/Connections&amp;gt;
	&amp;lt;/Network&amp;gt;
&amp;lt;/PyBrain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上。欢迎留言探讨。&lt;/p&gt;
</content>
        <category term="BP神经网络" />
        <category term="机器学习" />
        <category term="python" />
        <category term="pybrain" />
        <updated>2015-10-13T06:54:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/11/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84C-%E5%AE%9E%E7%8E%B0/</id>
        <title>BP神经网络的C++实现</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/11/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84C-%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前说了组里的任务是手写BP神经网络，上一篇文总结了一下BP神经网络的概念，老实说，总结概念前的一个C++实现版本在总结概念之后重新审视时觉得实在是惨不忍睹，于是今晚回炉重写了。这篇文就来挂我的BP神经网络C++实现。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 老师提出的具体问题是平面对点集的二分类。ACM战过这么多场，写板子早成了习惯，就把通用的BP认真封装了一下：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 头文件里的Data结构体是输入数据的数据结构，可自定义，这里用的是点分类问题的模型，BP.h：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#ifndef _BP_H_
#define _BP_H_

#include &amp;lt;vector&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

/* 数据样本类 */
struct Data
&amp;#123;
	/* 输入参数，包括： */
	/* 三维直角坐标系点的坐标(x, y, z) */
	/* 三维直角坐标系平面a*x + b*y + c*z + d = 0的4个系数 */
	double x[7];
	/* 期望输出即监督值 */
	/* 拟合 */
	// double d[1];
	/* 分类 */
	double d[2];
	/* 数据构造函数 */
	Data();
&amp;#125;;

class BP
&amp;#123;
private:
	/* ========== 常数 ========== */
	/* 输入层节点数 */
	int I;
	/* 隐含层神经元数 */
	int H;
	/* 输出层神经元数 */
	int O;
	/* 权重学习速率 */
	double LR;
	/* 偏置学习速率 */
	double LR2;
	/* 学习速率衰减率（每次衰减与当前LR相乘） */
	double LRDecay;
	/* 误差函数收敛阈值 */
	double C;
	/* ========== 容器 ========== */
	/* 训练用数据样本集 */
	vector&amp;lt;Data&amp;gt; trainDS;
	/* 测使用数据集 */
	vector&amp;lt;Data&amp;gt; testDS;
	/* 输入层与隐含层间的全连接权重：w[I(包含一个偏置值)][H] */
	double **w;
	/* w修正值 */
	double *dw;
	/* 隐含层阈值 */
	double *th;
	/* 隐含层输入积累即净激活，也存放之后的激活输出值：u[H] */
	double *u;
	/* 隐含层与输出层间的全连接权重：v[H][O] */
	double **v;
	/* v修正值 */
	double *dv;
	/* 输出层阈值 */
	double *to;
	/* 输出层输入积累即净激活，也存放之后的激活输出值：y[O] */
	double *y;
	/* 拟合标识 */
	bool regression;
	/* ========== 方法 ========== */
	/* 填充训练用数据样本集 */
	void fillTrainDS(int sampleCnt);
	/* 清空训练用数据样本集 */
	void clearTrainDS();
	/* 填充测试使用数据集 */
	void fillTestDS(int sampleCnt);
	/* 清空测试使用数据集 */
	void clearTestDS();
	/* 预测 */
	void forward(int index, bool test = false);
	/* 调整 */
	void backward(int index);
public:
	/* ========== 接口 ========== */
	/*
	 * 类构造函数，初始化BP神经网络结构和训练参数
	 * int _I：		输入参数数目。
	 * int _O：		输出值数目。
	 * int A：		隐含层调整因子（1~10）。
	 * double _LR：		权重学习速率（0.01~0.8）。
	 * double _LR2：	偏置学习速率（0.01~0.8）。
	 * double _LRDecay：	学习速率衰减率（每次衰减与当前LR相乘）。
	 * double _C：		误差函数收敛阈值。
	 * bool regression：	拟合标识。
	 */
	BP(int _I, int _O, int A = 1, double _LR = 0.01, double _LR2 = 0.035, double _LRDecay = 1.0, double _C = 0.01, bool regression = false);
	/* 类析构函数，释放容器分配的堆空间 */
	~BP();
	/* 使用指定数目的样本训练指定数目次循环，返回最后的误差函数值 */
	double train(int sampleCnt = 1000, int trainCnt = 100);
	/*
	 * 使用指定数目的样本循环训练。
	 * 误差函数值进入可接受范围判定收敛并停止训练；
	 * 到达最大训练次数时停止训练。
	 * 返回是否收敛。
	 */
	bool trainTillConvergent(int sampleCnt = 1000, int maxEpoch = 1000);
	/* 生成指定数目组数据测试当前神经网络 */
	void testNetwork(int testCnt = 1000);
	/* 保存当前神经网络，即两个权重数组 */
	void saveNetwork(string wPath = &amp;quot;wNetwork&amp;quot;, string vPath = &amp;quot;vNetwork&amp;quot;);
	/* 载入两个权重数组，还原神经网络 */
	void loadNetwork(string wPath = &amp;quot;wNetwork&amp;quot;, string vPath = &amp;quot;vNetwork&amp;quot;);
	/* 使用指定数据预测输出值并返回输出值 */
	vector&amp;lt;double&amp;gt; runNetwork(vector&amp;lt;double&amp;gt; x);
&amp;#125;;

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类实现源码里的Data结构体的构造函数是输入数据的处理和问题模型的建立，可自定义，这里用的是点分类问题的数据处理，BP.cpp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;quot;BP.h&amp;quot;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;fstream&amp;gt;
using namespace std;

/* 数据构造函数 */
Data::Data()
&amp;#123;
	/* 归一参数 */
	for(int i = 1 ; i &amp;lt; 8 ; i++)
	&amp;#123;
		x[i] = rand()/(double)RAND_MAX;
	&amp;#125;
	/* 实际参数 */
	double _x = x[1]*20 - 10;
	double y = x[2]*20 - 10;
	double z = x[3]*20 - 10;
	double a = x[4]*20 - 10;
	double b = x[5]*20 - 10;
	double c = x[6]*20 - 10;
	double _d = x[7]*20 - 10;
	/* 拟合 */
	// d[0] = z - (a*_x + b*y + _d)/(-1*c);
	/* 分类 */
	d[0] = z &amp;gt; (a*_x + b*y + _d)/(-1*c) ? 1 : 0;
	d[1] = d[0] ? 0 : 1;
&amp;#125;

/* 填充训练用数据样本集 */
void BP::fillTrainDS(int sampleCnt)
&amp;#123;
	while(sampleCnt--)
	&amp;#123;
		trainDS.push_back(Data());
	&amp;#125;
&amp;#125;

/* 清空训练用数据样本集 */
void BP::clearTrainDS()
&amp;#123;
	vector&amp;lt;Data&amp;gt; v;
	trainDS.swap(v);
&amp;#125;

/* 填充测试使用数据集 */
void BP::fillTestDS(int sampleCnt)
&amp;#123;
	while(sampleCnt--)
	&amp;#123;
		testDS.push_back(Data());
	&amp;#125;
&amp;#125;

/* 清空测试使用数据集 */
void BP::clearTestDS()
&amp;#123;
	vector&amp;lt;Data&amp;gt; v;
	testDS.swap(v);
&amp;#125;

/* 预测 */
void BP::forward(int index, bool test)
&amp;#123;
	/* 隐含层 */
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		u[i] = 0;
		for(int j = 0 ; j &amp;lt; I ; j++)
		&amp;#123;
			double x = test ? testDS[index].x[j] : trainDS[index].x[j];
			/* 积累输入 */
			u[i] += w[j][i]*x;
		&amp;#125;
		u[i] += th[i];
		/* Sigmoid函数作为激活函数 */
		u[i] = 1 / (1 + exp(-1*u[i]));
	&amp;#125;
	/* 输出层 */
	for(int i = 0 ; i &amp;lt; O ; i++)
	&amp;#123;
		y[i] = 0;
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			/* 积累输入 */
			y[i] += v[j][i]*u[j];
		&amp;#125;
		y[i] += to[i];
		/* 分类：Sigmoid函数作为激活函数 */
		if (!regression)
		&amp;#123;
			y[i] = 1 / (1 + exp(-1*y[i]));
		&amp;#125;
	&amp;#125;
&amp;#125;

/* 调整 */
void BP::backward(int index)
&amp;#123;
	/* 计算隐含层与输出层间权重调整值 */
	for(int i = 0 ; i &amp;lt; O ; i++)
	&amp;#123;
		/* 拟合：计算输出层学习误差 */
		if (regression)
		&amp;#123;
			dv[i] = y[i] - trainDS[index].d[i];
		&amp;#125;
		/* 分类：计算输出层学习误差 */
		else
		&amp;#123;
			dv[i] = (y[i] - trainDS[index].d[i])*y[i]*(1 - y[i]);
		&amp;#125;
	&amp;#125;
	/* 计算输入层与隐含层间权重调整值 */
	double t;
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		t = 0;
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			t += dv[j]*v[i][j];
		&amp;#125;
		dw[i] = t*u[i]*(1 - u[i]);
	&amp;#125;
	/* 调整隐含层与输出层间权重 */
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			v[i][j] -= LR*dv[j]*u[i];
		&amp;#125;
	&amp;#125;
	/* 调整输出层偏置 */
	for(int i = 0 ; i &amp;lt; O ; i++)
	&amp;#123;
		to[i] -= LR2*dv[i];
	&amp;#125;
	/* 调整输入层与隐含层间权重 */
	for(int i = 0 ; i &amp;lt; I ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			w[i][j] -= LR*dw[j]*trainDS[index].x[i];
		&amp;#125;
	&amp;#125;
	/* 调整隐含层偏置 */
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		th[i] -= LR2*dw[i];
	&amp;#125;
&amp;#125;

/*
 * 类构造函数，初始化BP神经网络结构和训练参数
 * int _I：		输入参数数目，包括偏置值对应的参数-1。
 * int _O：		输出值数目。
 * int A：		隐含层调整因子（1~10）。
 * double _LR：		权重学习速率（0.01~0.8）。
 * double _LR2：	偏置学习速率（0.01~0.8）。
 * double _LRDecay：	学习速率衰减率（每次衰减与当前LR相乘）。
 * double _C：		误差函数收敛阈值。
 * bool regression：	拟合标识。
 */
BP::BP(int _I, int _O, int A, double _LR, double _LR2, double _LRDecay, double _C, bool _regression)
&amp;#123;
	/* ========== 初始化常数 ========== */
	I = _I;
	H = ceil(sqrt(_I + _O)) + A;
	O = _O;
	LR = _LR;
	LR2 = _LR2;
	LRDecay = _LRDecay;
	C = _C;
	regression = _regression;
	/* ========== 初始化容器 ========== */
	srand((unsigned)time(NULL));
	/* 初始化w */
	w = new double*[I];
	for(int i = 0 ; i &amp;lt; I ; i++)
	&amp;#123;
		w[i] = new double[H];
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			w[i][j] = rand()/(double)RAND_MAX;
		&amp;#125;
	&amp;#125;
	/* 初始化dw */
	dw = new double[H];
	/* 初始化th */
	th = new double[H];
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		th[i] = rand()/(double)RAND_MAX;
	&amp;#125;
	/* 初始化u */
	u = new double[H];
	/* 初始化v */
	v = new double*[H];
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		v[i] = new double[O];
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			v[i][j] = rand()/(double)RAND_MAX;
		&amp;#125;
	&amp;#125;
	/* 初始化dv */
	dv = new double[O];
	/* 初始化to */
	to = new double[O];
	for(int i = 0 ; i &amp;lt; O ; i++)
	&amp;#123;
		to[i] = rand()/(double)RAND_MAX;
	&amp;#125;
	/* 初始化y */
	y = new double[O];
&amp;#125;

/* 类析构函数，释放容器分配的堆空间 */
BP::~BP()
&amp;#123;
	/* 释放w */
	for(int i = 0 ; i &amp;lt; I ; i++)
	&amp;#123;
		delete []w[i];
	&amp;#125;
	delete []w;
	/* 释放dw */
	delete []dw;
	/* 释放th */
	delete []th;
	/* 释放u */
	delete []u;
	/* 释放v */
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		delete []v[i];
	&amp;#125;
	delete []v;
	/* 释放dv */
	delete []dv;
	/* 释放to */
	delete []to;
	/* 释放y */
	delete []y;
&amp;#125;

/* 使用指定数目的样本训练指定数目次循环，返回最后的误差函数值 */
double BP::train(int sampleCnt, int trainCnt)
&amp;#123;
	fillTrainDS(sampleCnt);
	double e;
	while(trainCnt--)
	&amp;#123;
		e = 0;
		for(int i = 0 ; i &amp;lt; trainDS.size() ; i++)
		&amp;#123;
			/* 预测 */
			forward(i);
			/* 误差积累 */
			for(int j = 0 ; j &amp;lt; O ; j++)
			&amp;#123;
				e += pow(y[j] - trainDS[i].d[j], 2.0);
			&amp;#125;
			/* 调整 */
			backward(i);
		&amp;#125;
		e /= 2*sampleCnt;
		/* 学习速率衰减 */
		if (LR &amp;gt; 0.01)
		&amp;#123;
			LR *= LRDecay;
		&amp;#125;
	&amp;#125;
	clearTrainDS();
	return e;
&amp;#125;

/*
 * 使用指定数目的样本循环训练。
 * 误差函数值进入可接受范围判定收敛并停止训练；
 * 到达最大训练次数时停止训练。
 * 返回是否收敛。
 */
bool BP::trainTillConvergent(int sampleCnt, int maxEpoch)
&amp;#123;
	fillTrainDS(sampleCnt);
	double e;
	for(;;)
	&amp;#123;
		e = 0;
		for(int i = 0 ; i &amp;lt; trainDS.size() ; i++, maxEpoch--)
		&amp;#123;
			if (!maxEpoch)
			&amp;#123;
				clearTrainDS();
				return false;
			&amp;#125;
			/* 预测 */
			forward(i);
			/* 误差积累 */
			for(int j = 0 ; j &amp;lt; O ; j++)
			&amp;#123;
				e += pow(y[j] - trainDS[i].d[j], 2.0);
			&amp;#125;
			/* 调整 */
			backward(i);
		&amp;#125;
		/* 判定收敛，中止训练 */
		if (e/(2*sampleCnt) &amp;lt; C)
		&amp;#123;
			clearTrainDS();
			return true;
		&amp;#125;
		/* 学习速率衰减 */
		if (LR &amp;gt; 0.01)
		&amp;#123;
			LR *= LRDecay;
		&amp;#125;
	&amp;#125;
	clearTrainDS();
	return false;
&amp;#125;

/* 生成指定数目组数据测试当前神经网络 */
void BP::testNetwork(int testCnt)
&amp;#123;
	fillTestDS(testCnt);
	double e = 0;
	for(int i = 0 ; i &amp;lt; testCnt ; i++)
	&amp;#123;
		forward(i, true);
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			e += pow(y[j] - testDS[i].d[j], 2.0);
		&amp;#125;
	&amp;#125;
	cout &amp;lt;&amp;lt; testCnt &amp;lt;&amp;lt; &amp;quot;组数据测试预测值相对期望值方差为：&amp;quot; &amp;lt;&amp;lt; e/(2*testCnt) &amp;lt;&amp;lt; endl;
	clearTestDS();
&amp;#125;

/* 保存当前神经网络，即两个权重数组 */
void BP::saveNetwork(string wPath, string vPath)
&amp;#123;
	ofstream fout_w(wPath);
	if(fout_w == NULL)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;打开文件失败&amp;quot; &amp;lt;&amp;lt; endl;
		return;
	&amp;#125;
	for(int i = 0 ; i &amp;lt; I ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			fout_w &amp;lt;&amp;lt; w[i][j] &amp;lt;&amp;lt; &amp;#39;\t&amp;#39;;
		&amp;#125;
		fout_w &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
	&amp;#125;
	fout_w.close();
	ofstream fout_v(vPath);
	if(fout_v == NULL)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;打开文件失败&amp;quot; &amp;lt;&amp;lt; endl;
		return;
	&amp;#125;
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			fout_v &amp;lt;&amp;lt; v[i][j] &amp;lt;&amp;lt; &amp;#39;\t&amp;#39;;
		&amp;#125;
		fout_v &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
	&amp;#125;
	fout_v.close();
&amp;#125;

/* 载入两个权重数组，还原神经网络 */
void BP::loadNetwork(string wPath, string vPath)
&amp;#123;
	ifstream fin_w(wPath);
	if(fin_w == NULL)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;打开文件失败&amp;quot; &amp;lt;&amp;lt; endl;
		return;
	&amp;#125;
	for(int i = 0 ; i &amp;lt; I ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			fin_w &amp;gt;&amp;gt; w[i][j];
		&amp;#125;
	&amp;#125;
	fin_w.close();
	ifstream fin_v(vPath);
	if(fin_v == NULL)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;打开文件失败&amp;quot; &amp;lt;&amp;lt; endl;
		return;
	&amp;#125;
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		for(int j = 0 ; j &amp;lt; O ; j++)
		&amp;#123;
			fin_v &amp;gt;&amp;gt; v[i][j];
		&amp;#125;
	&amp;#125;
	fin_v.close();
&amp;#125;

/* 使用指定数据预测输出值并返回输出值 */
vector&amp;lt;double&amp;gt; BP::runNetwork(vector&amp;lt;double&amp;gt; x)
&amp;#123;
	/* 隐含层 */
	for(int i = 0 ; i &amp;lt; H ; i++)
	&amp;#123;
		u[i] = 0;
		for(int j = 0 ; j &amp;lt; x.size() ; j++)
		&amp;#123;
			/* 积累输入 */
			u[i] += w[j][i]*x[j];
		&amp;#125;
		u[i] += th[i];
		/* Sigmoid函数作为激活函数 */
		u[i] = 1 / (1 + exp(-1*u[i]));
	&amp;#125;
	vector&amp;lt;double&amp;gt; o;
	double y;
	/* 输出层 */
	for(int i = 0 ; i &amp;lt; O ; i++)
	&amp;#123;
		y = 0;
		for(int j = 0 ; j &amp;lt; H ; j++)
		&amp;#123;
			/* 积累输入 */
			y += v[j][i]*u[j];
		&amp;#125;
		y += to[i];
		/* 分类：Sigmoid函数作为激活函数 */
		if (!regression)
		&amp;#123;
			y = 1 / (1 + exp(-1*y));
		&amp;#125;
		o.push_back(y);
	&amp;#125;
	return o;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类的测试方法里无非是根据实际问题初始化类，做一系列的训练，调整参数，慢慢提高预测精度，test.cpp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;quot;BP.h&amp;quot;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
&amp;#123;
	/*
	 * 类构造函数，初始化BP神经网络结构和训练参数
	 * int _I：		输入参数数目，包括偏置值对应的参数-1。
	 * int _O：		输出值数目。
	 * int A：		隐含层调整因子（1~10）。
	 * double _LR：		学习速率（0.01~0.8）。
	 * double _LR2：	偏置学习速率（0.01~0.8）。
	 * double _LRDecay：	学习速率衰减率（每次衰减与当前LR相乘）。
	 * double _C：		误差函数收敛阈值。
	 * bool regression：	拟合标识。
	 */
	BP o(7, 2, 8, 0.2, 0.02, 0.99, 3.2e-2, false);

	// o.loadNetwork();

	/* 使用指定数目的样本训练指定数目次循环，返回最后的误差函数值 */
	for(int i = 0 ; i &amp;lt; 20 ; i++)
	&amp;#123;
		cout &amp;lt;&amp;lt; &amp;quot;误差函数值：&amp;quot; &amp;lt;&amp;lt; o.train(1000, 2e3) &amp;lt;&amp;lt; endl;
	&amp;#125;

	/*
	 * 使用指定数目的样本循环训练。
	 * 误差函数值进入可接受范围判定收敛并停止训练；
	 * 到达最大训练次数时停止训练。
	 * 返回是否收敛。
	 */
	// bool success = o.trainTillConvergent(1000, 1e5*1000);
	// cout &amp;lt;&amp;lt; &amp;quot;收敛：&amp;quot; &amp;lt;&amp;lt; (success ? &amp;quot;success&amp;quot; : &amp;quot;fail&amp;quot;) &amp;lt;&amp;lt; endl;

	o.testNetwork(1000);

	o.saveNetwork();

	vector&amp;lt;double&amp;gt; X;
	double x = 0.1;
	double y = 0.1;
	double z = 0.1;
	double a = 1;
	double b = 1;
	double c = 1;
	double d = -1;
	X.push_back((x + 10)/20.0);
	X.push_back((y + 10)/20.0);
	X.push_back((z + 10)/20.0);
	X.push_back((a + 10)/20.0);
	X.push_back((b + 10)/20.0);
	X.push_back((c + 10)/20.0);
	X.push_back((d + 10)/20.0);
	vector&amp;lt;double&amp;gt; Y = o.runNetwork(X);
	/* 拟合 */
	// cout &amp;lt;&amp;lt; &amp;quot;期望值：&amp;quot; &amp;lt;&amp;lt; z - (a*x + b*y + d)/(-c) &amp;lt;&amp;lt; endl;
	// cout &amp;lt;&amp;lt; &amp;quot;输出值：&amp;quot; &amp;lt;&amp;lt; Y[0] &amp;lt;&amp;lt; endl;
	/* 分类 */
	cout &amp;lt;&amp;lt; &amp;quot;期望值：&amp;quot; &amp;lt;&amp;lt; (z &amp;gt; (a*x + b*y + d)/(-c) ? &amp;quot;1\t0&amp;quot; : &amp;quot;0\t1&amp;quot;) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; &amp;quot;输出值：&amp;quot; &amp;lt;&amp;lt; Y[0] &amp;lt;&amp;lt; &amp;#39;\t&amp;#39; &amp;lt;&amp;lt; Y[1] &amp;lt;&amp;lt; endl;

	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 点分类问题我先尝试了函数拟合方式，训练情况很糟糕，动辄上十万的方差。后来改用分类方式，降低训练要求，方差立马降下来了。下午例会就要做报告了，我没有训练到充分收敛，但是离平面比较远的点判断正确率已经很高了。下面提供平面分类点集问题当前训练进度下，输入层与隐含层间权重数组、隐含层与输出层间权重数组的保存文件。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 输入层与隐含层间权重数组wNetwork：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;0.15513	0.56829	0.461073	0.27552	0.44408	0.144657	0.95798	0.335522	0.325092	0.254423	0.79217
-1.06417	-0.0241895	3.99915	0.228275	-0.483658	6.68402	-1.61574	0.753689	4.14272	-4.58112	-3.09481
3.70442	-3.7423	0.0852013	-0.564758	-4.99619	1.29436	-4.19077	-1.75579	-0.568722	-2.57748	1.20149
-0.311858	2.12485	0.494471	-3.32854	-0.393046	1.12112	-0.585242	-3.45739	-0.687711	-1.37346	-0.860532
1.29214	0.74987	4.41025	-1.37666	0.268284	6.72309	2.0978	-1.8259	4.20105	-6.15165	5.04569
-3.76331	-3.22432	-0.450262	1.77063	-5.89358	3.40051	3.64122	1.30879	-0.98291	-0.931413	-1.72719
9.53636	9.64562	9.82743	13.4779	-12.3668	12.5147	8.37658	6.32437	-10.263	-13.8476	-5.31933
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 隐含层与输出层间权重数组vNetwork：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;31.4711	-31.5094
27.536	-27.5713
-25.7692	25.7999
-27.4329	27.467
-17.6709	17.6933
-18.464	17.5204
25.8167	-25.8471
-23.2151	23.2434
27.3533	-27.387
26.9126	-26.9519
-24.7905	24.8209
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这个类我还做过a+b问题的函数拟合，收敛非常顺利，精度很高。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;后来，例会上提任务的博士说他明明是要我们寻找分割点集的平面，我把问题泛化成寻找点与平面位置关系规则的问题了，能用泛化能力不太强的BP整的差不多收敛也是不容易。我表示生无可恋……&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;读者注意一下，上一篇BP网络的理论介绍中，隐层与输入层之间的权重调整值的推导有一些问题，少乘了一个wij。推导已经改过来了，但是比较忙没空改代码，有需要的同学请自己参照上一篇博文修改一下代码。OTZ&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="BP神经网络" />
        <category term="机器学习" />
        <updated>2015-10-10T16:28:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
        <title>BP神经网络</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 组里要求新人手写个BP神经网络练练手先，具体要求是用一个平面把空间点集二分类，建模时我发现这个问题比起分类来更接近一个多元函数拟合，当然分类也不是不行，机器学习的要求更低，更容易有更好的结果。这都是后话，这篇文我决定先来总结一下BP神经网络的概念，也算是前几天的学习笔记了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;1-机器学习&#34;&gt;&lt;a href=&#34;#1-机器学习&#34; class=&#34;headerlink&#34; title=&#34;1. 机器学习&#34;&gt;&lt;/a&gt;1. 机器学习&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 百度百科说机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。简而言之，机器学习专门研究计算机怎样&lt;strong&gt;模拟或实现人类的学习行为&lt;/strong&gt;，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。机器学习是人工智能的核心，是使计算机具有智能的&lt;strong&gt;根本途径&lt;/strong&gt;，其应用遍及人工智能的各个领域，它主要使用&lt;strong&gt;归纳、综合而不是演绎&lt;/strong&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 机器学习的方向很多，其历史和兴衰说来话长，这里引入机器学习的概念只是为了做个铺垫，就不展开了。&lt;/p&gt;
&lt;h1 id=&#34;2-人工神经网络&#34;&gt;&lt;a href=&#34;#2-人工神经网络&#34; class=&#34;headerlink&#34; title=&#34;2. 人工神经网络&#34;&gt;&lt;/a&gt;2. 人工神经网络&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 人工神经网络（Artificial Neural Network，ANN ）是人工智能的一支，是机器学习的一个方向，试图通过数学模型和适当的数据结构还原智能的温床——神经系统。我们知道人类大脑信息的传递、对外界刺激产生反应都是由一种特化的细胞——神经元来负责，人脑就是由上百亿个神经元构成。这些神经元之间并不孤立而且联系很密切，每个神经元平均与几千个神经元相连接，因此构成了一个神经网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 刺激在神经网络中的传播是遵循一定的规则的，一个神经元并非每次接到其他神经传递过来的刺激都产生反应。它首先会将与其相邻的神经元传来的刺激进行积累，到一定的时候产生自己的刺激将其传递给一些与它相邻的神经元。遵循同样规则工作着的百亿个的神经元完成了人脑对外界的反应。而人脑对外界刺激的学习过程则是通过这些神经元之间联系的建立及其强度的调整来完成的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当然，事实上，上述生物模型是对真正神经网络工作机制的一种简化，这种简化的生物模型可以推广至机器学习中，并以数学模型为理论基础，用不同的编程方式来实现。这种对神经网络的模拟，称为人工神经网络。&lt;/p&gt;
&lt;h2 id=&#34;2-1-人工神经元（Artificial-Neuron，AN）模型&#34;&gt;&lt;a href=&#34;#2-1-人工神经元（Artificial-Neuron，AN）模型&#34; class=&#34;headerlink&#34; title=&#34;2.1. 人工神经元（Artificial Neuron，AN）模型&#34;&gt;&lt;/a&gt;2.1. 人工神经元（Artificial Neuron，AN）模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AN是ANN的基本元素之一，其原理如下图。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B.jpg&#34; alt=&#34;图1 人工神经元模型&#34; title=&#34;人工神经元模型&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 图中x1~xn是从其他神经元传来的输入信号，wij表示表示从神经元j到神经元i的连接权值，θ表示一个偏置( bias )。则神经元i的输出与输入的关系表示为：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%85%A5%E7%A7%AF%E7%B4%AF1.png&#34; title=&#34;净激活&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%87%BA3.png&#34; title=&#34;激活输出&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 图中 yi表示神经元i的输出，函数f称为激活函数 ( Activation Function )，net称为净激活(net activation)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果令一个输入参数x0为-1，对应权重为偏置θ，则可以把偏置项合并进净激活net：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%85%A5%E7%A7%AF%E7%B4%AF2.png&#34; title=&#34;合并偏置的净激活&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 若令X为输入向量，W为权重向量，则有：&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;span style=&#34;font-size:16px&#34;&gt;X = [ x0 , x1 , x2 , ....... , xn ]&lt;/span&gt;&lt;/p&gt;
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/权重向量.png &#34;权重向量&#34;)
&amp;nbsp;&amp;nbsp;&amp;nbsp; 将神经元的输出表示为向量相乘的形式则有：
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/神经元输出1.png &#34;净激活&#34;)
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/神经元输出2.png &#34;神经元输出&#34;)
&amp;nbsp;&amp;nbsp;&amp;nbsp; 若神经元的净激活net为正，称该神经元处于激活状态或兴奋状态，若净激活net为负，则称神经元处于抑制状态。
&amp;nbsp;&amp;nbsp;&amp;nbsp; 图1中的这种“阈值加权和”的神经元模型称为M-P模型 ( McCulloch-Pitts Model )，也称为神经网络的一个处理单元( PE, Processing Element )。
## 2.2. 常用激活函数

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前面的神经元模型讲解中也提到了激活函数，事实上，激活函数是人工神经网络中的一个重要环节。下面介绍一些常用的激活函数。&lt;/p&gt;
&lt;h3 id=&#34;2-2-1-线性函数（Liner-Function）&#34;&gt;&lt;a href=&#34;#2-2-1-线性函数（Liner-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.1. 线性函数（Liner Function）&#34;&gt;&lt;/a&gt;2.2.1. 线性函数（Liner Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%87%BD%E6%95%B0.png&#34; title=&#34;线性函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-斜面函数（Ramp-Function）&#34;&gt;&lt;a href=&#34;#2-2-2-斜面函数（Ramp-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.2. 斜面函数（Ramp Function）&#34;&gt;&lt;/a&gt;2.2.2. 斜面函数（Ramp Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%96%9C%E9%9D%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;斜面函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-3-阈值函数（Threshold-Function）&#34;&gt;&lt;a href=&#34;#2-2-3-阈值函数（Threshold-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.3. 阈值函数（Threshold Function）&#34;&gt;&lt;/a&gt;2.2.3. 阈值函数（Threshold Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E9%98%88%E5%80%BC%E5%87%BD%E6%95%B0.png&#34; title=&#34;阈值函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-4-S形函数（Sigmoid-Function）&#34;&gt;&lt;a href=&#34;#2-2-4-S形函数（Sigmoid-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.4. S形函数（Sigmoid Function）&#34;&gt;&lt;/a&gt;2.2.4. S形函数（Sigmoid Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Sigmoid-S%E5%BD%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;S形函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;S形函数导函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-5-双极S形函数&#34;&gt;&lt;a href=&#34;#2-2-5-双极S形函数&#34; class=&#34;headerlink&#34; title=&#34;2.2.5. 双极S形函数&#34;&gt;&lt;/a&gt;2.2.5. 双极S形函数&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;双极S形函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;双极S形函数导函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; S形函数与双极S形函数图像：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png&#34; alt=&#34;图2 S形函数与双极S形函数图像&#34; title=&#34;S形函数与双极S形函数图像&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 双极S形函数与S形函数主要区别在于函数的值域，双极S形函数值域是(-1,1)，而S形函数值域是(0,1)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 由于S形函数与双极S形函数都是可导的，因此适合用在BP神经网络中。（BP算法要求激活函数可导）&lt;/p&gt;
&lt;h2 id=&#34;2-3-神经网络模型&#34;&gt;&lt;a href=&#34;#2-3-神经网络模型&#34; class=&#34;headerlink&#34; title=&#34;2.3. 神经网络模型&#34;&gt;&lt;/a&gt;2.3. 神经网络模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 根据神经元互联方式的不同，神经网络可以分为3种常见类型。&lt;/p&gt;
&lt;h3 id=&#34;2-3-1-前馈神经网络（Feedforward-Neural-Networks）&#34;&gt;&lt;a href=&#34;#2-3-1-前馈神经网络（Feedforward-Neural-Networks）&#34; class=&#34;headerlink&#34; title=&#34;2.3.1. 前馈神经网络（Feedforward Neural Networks）&#34;&gt;&lt;/a&gt;2.3.1. 前馈神经网络（Feedforward Neural Networks）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前馈网络也称前向网络。这种网络只在训练过程会有反馈信号，而在分类过程中数据只能向前传送，直到到达输出层，层间没有向后的反馈信号，因此被称为前馈网络。感知机( perceptron)与BP神经网络属于前馈网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下图是一个3层的前馈神经网络，其中第一层是输入单元，第二层称为隐含层，第三层称为输出层（输入单元不是神经元，因此图中有2层神经元）。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg&#34; alt=&#34;图3 前馈神经网络&#34; title=&#34;前馈神经网络&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; N层的前馈神经网络每层的输入参数都要按权重积累，得到净激活后由激活函数激活输出。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如，一个三层的前馈神经网络的输出为&lt;code&gt;F3( F2 ( F1( XW1 ) W2 ) W3 )&lt;/code&gt;。当F1、F2、F3都选用线性激活函数，输出将是线性函数。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;所以，如果要做高次函数的拟合，应该选用适当的非线性激活函数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-2-反馈神经网络（Feedback-Neural-Networks）&#34;&gt;&lt;a href=&#34;#2-3-2-反馈神经网络（Feedback-Neural-Networks）&#34; class=&#34;headerlink&#34; title=&#34;2.3.2. 反馈神经网络（Feedback Neural Networks）&#34;&gt;&lt;/a&gt;2.3.2. 反馈神经网络（Feedback Neural Networks）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 反馈型神经网络是一种从输出到输入具有反馈连接的神经网络，其结构比前馈网络要复杂得多。典型的反馈型神经网络有Elman网络和Hopfield网络。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg&#34; alt=&#34;图4 反馈神经网络&#34; title=&#34;反馈神经网络&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-3-竞争学习网络（Competitive-Learning-Network）&#34;&gt;&lt;a href=&#34;#2-3-3-竞争学习网络（Competitive-Learning-Network）&#34; class=&#34;headerlink&#34; title=&#34;2.3.3. 竞争学习网络（Competitive Learning Network）&#34;&gt;&lt;/a&gt;2.3.3. 竞争学习网络（Competitive Learning Network）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 竞争学习网络是一种无监督学习网络。它通过自动寻找样本中的内在规律和本质属性，自组织、自适应地改变网络参数与结构。典型的竞争学习网络有SOM。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%87%AA%E7%BB%84%E7%BB%87%E7%BD%91%E7%BB%9C.png&#34; alt=&#34;图5 竞争学习网络&#34; title=&#34;竞争学习网络&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-4-神经网络的状态&#34;&gt;&lt;a href=&#34;#2-3-4-神经网络的状态&#34; class=&#34;headerlink&#34; title=&#34;2.3.4. 神经网络的状态&#34;&gt;&lt;/a&gt;2.3.4. 神经网络的状态&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 神经网络的状态分学习（训练）状态和工作状态两种。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 学习状态又分为两种方式：监督学习（Supervised Learning）和非监督（Unsupervised Learning）学习。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 监督学习算法将一组训练数据集送入网络，根据网络的实际输出与期望输出间的差别来调整连接权。达到预设训练次数或者样本整体误差不超过预设范围（收敛）时学习结束。BP算法就是一种出色的监督学习算法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 非监督学习算法抽取样本集合中蕴含的统计特性，并以神经元之间的联接权的形式存于网络中。Hebb学习律是一种经典的非监督学习算法。&lt;/p&gt;
&lt;h3 id=&#34;2-3-5-非监督学习算法：Hebb学习律&#34;&gt;&lt;a href=&#34;#2-3-5-非监督学习算法：Hebb学习律&#34; class=&#34;headerlink&#34; title=&#34;2.3.5. 非监督学习算法：Hebb学习律&#34;&gt;&lt;/a&gt;2.3.5. 非监督学习算法：Hebb学习律&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hebb算法核心思想是，当两个神经元同时处于激发状态时两者间的连接权会被加强，否则被减弱。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hebb学习律可以表示为：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Hebb%E5%AD%A6%E4%B9%A0%E5%BE%8B.png&#34; title=&#34;Hebb学习律&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中wij表示神经元j到神经元i的连接权，yi与yj为两个神经元的输出，a是表示学习速率常数。若yi与yj同时被激活，即yi与yj同号，那 么wij将增大；若yi被激活，而yj处于抑制状态，即yi为正yj为负，那么wij将变小。&lt;/p&gt;
&lt;h3 id=&#34;2-3-6-监督学习算法：Delta学习规则&#34;&gt;&lt;a href=&#34;#2-3-6-监督学习算法：Delta学习规则&#34; class=&#34;headerlink&#34; title=&#34;2.3.6. 监督学习算法：Delta学习规则&#34;&gt;&lt;/a&gt;2.3.6. 监督学习算法：Delta学习规则&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Delta学习规则的数学表达：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Delta%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.png&#34; title=&#34;Delta学习规则&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中wij表示神经元j到神经元i的连接权，di是神经元i的期望输出，yi是神经元i的实际输出，xj表示神经元j状态，若神经元j处于激活态则xj为 1，若处于抑制状态则xj为0或－1（依激活函数而定）。a是表示学习速率常数。假设xi为1，若di比yi大，那么Wij将增大，若di比yi小， 那么wij将变小。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Delta规则简单讲来就是：若神经元实际输出比期望输出大，则减小所有输入为正的连接的权重，增大所有输入为负的连接的权重。反之，若神经元实际输出比期望输出小，则增大所有输入为正的连接的权重，减小所有输入为负的连接的权重。这个增大或减小的幅度就根据上面的式子来计算。&lt;/p&gt;
&lt;h1 id=&#34;3-BP神经网络&#34;&gt;&lt;a href=&#34;#3-BP神经网络&#34; class=&#34;headerlink&#34; title=&#34;3. BP神经网络&#34;&gt;&lt;/a&gt;3. BP神经网络&lt;/h1&gt;&lt;h2 id=&#34;3-1-认识BP神经网络&#34;&gt;&lt;a href=&#34;#3-1-认识BP神经网络&#34; class=&#34;headerlink&#34; title=&#34;3.1. 认识BP神经网络&#34;&gt;&lt;/a&gt;3.1. 认识BP神经网络&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; BP神经网络更清晰的称呼应该是使用BP算法学习的前馈神经网络。BP神经网络中的BP为Back Propagation（反向传播）的简写，最早它是由Rumelhart、McCelland等科学家于1986年提出来的，Rumelhart还在《Nature》上发表了一篇非常著名的文章《Learning representations by back-propagating errors》。随着时代的迁移，BP神经网络理论不断的得到改进、更新，现在无疑已成为了应用最为广泛的神经网络模型之一。BP网络具有很强的非线性映射能力，一个3层BP神经网络能够实现对任意非线性函数进行逼近（根据Kolrnogorov定理：任意[0,1]上的连续函数能被一个3层的神经网络实现，其中输入单元数为n，隐含层单元数为2n+1）。&lt;/p&gt;
&lt;h2 id=&#34;3-2-隐含层的选取&#34;&gt;&lt;a href=&#34;#3-2-隐含层的选取&#34; class=&#34;headerlink&#34; title=&#34;3.2. 隐含层的选取&#34;&gt;&lt;/a&gt;3.2. 隐含层的选取&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在BP神经网络中，输入层和输出层的节点个数都是确定的，而隐含层节点个数不确定。实际上，隐含层节点个数的多少对神经网络的性能是有影响的，有一个经验公式可以确定隐含层神经元数目：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E9%9A%90%E5%90%AB%E5%B1%82%E7%BB%8F%E9%AA%8C%E5%85%AC%E5%BC%8F.png&#34; title=&#34;BP隐含层经验公式&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中，h为隐含层神经元数，m为输入结点数，n为输出层神经元数，a为1~10之间的调节常数。&lt;/p&gt;
&lt;h2 id=&#34;3-3-正向预测&#34;&gt;&lt;a href=&#34;#3-3-正向预测&#34; class=&#34;headerlink&#34; title=&#34;3.3. 正向预测&#34;&gt;&lt;/a&gt;3.3. 正向预测&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 就是使输入数据样本通过一个两层前馈网络，输出即：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E5%87%80%E6%BF%80%E6%B4%BB.png&#34; title=&#34;BP净激活&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%87%BA.png&#34; title=&#34;BP神经元输出&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-4-反向误差传播&#34;&gt;&lt;a href=&#34;#3-4-反向误差传播&#34; class=&#34;headerlink&#34; title=&#34;3.4. 反向误差传播&#34;&gt;&lt;/a&gt;3.4. 反向误差传播&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; BP算法是基于Widrow-Hoff学习规则的，可以看做delta学习规则的一种特殊情况。Widrow-Hoff学习规则是通过沿着相对误差平方和的最速下降方向（梯度方向），连续调整网络的权重和偏置。根据梯度下降法，权重矢量的修正正比于当前位置上E(w,b)的梯度的模，即E(w,b)在当前位置的偏导数。我们知道函数&lt;code&gt;z = f(x,y)&lt;/code&gt;中，z对x或y的偏导数即z随x或y变化的程度或快慢，这正切合BP神经网络中每层输入参数权重的意义，也印证了梯度下降法的正确性。对于第j个输出神经元有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E8%BE%93%E5%87%BA%E5%B1%82%E6%9D%83%E5%80%BC%E4%BF%AE%E6%AD%A3.png&#34; title=&#34;输出层权值修正&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中i是隐含层神经元的序号。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC1.png&#34; title=&#34;误差函数对权重的偏导&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中n是输出层神经元数，m是隐含层神经元数，于是得到：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC2.png&#34; title=&#34;误差函数对权重偏导2&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 已知Sigmoid函数的导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;Sigmoid函数导函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC3.png&#34; title=&#34;误差函数对权重偏导3&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理，对输出层偏置bj有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC4.png&#34; title=&#34;输出层偏置&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上就是著名的&lt;strong&gt;delta学习规则&lt;/strong&gt;，通过改变神经元之间的连接权值来减少系统实际输出和期望输出的误差，这个规则又叫做&lt;strong&gt;Widrow-Hoff学习规则&lt;/strong&gt;或者&lt;strong&gt;纠错学习规则&lt;/strong&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 设k为输入层的节点序号，下面继续推导输入层与隐含层的权重修正：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC5.png&#34; title=&#34;误差函数对权重偏导4&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中l是输入层节点数，yi也是前面推导隐含层与输出层间权重修正时的xi，于是有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC6.png&#34; title=&#34;误差函数对权重偏导5&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理，对隐含层偏置bi有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC7.png&#34; title=&#34;隐含层偏置&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后，输入层与隐含层间权重和偏置，隐含层与输出层间权重和偏置的修正值如下：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC8.png&#34; title=&#34;最终修正值&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中，eita1和eita2分别是权重学习速率和偏置学习速率。&lt;/p&gt;
&lt;h2 id=&#34;3-5-注意点&#34;&gt;&lt;a href=&#34;#3-5-注意点&#34; class=&#34;headerlink&#34; title=&#34;3.5. 注意点&#34;&gt;&lt;/a&gt;3.5. 注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入数据要先进行归一化处理。例如使用Sigmoid函数作为激活函数时，输入参数如果分布在Sigmoid函数曲线的稳定区域中，即定义域的[-1,1]区间之外的区域，那么激活值将集中在0和1上，权重对输入参数的加权作用将失去意义，输入参数对权重的调整也将失去意义。&lt;/li&gt;
&lt;li&gt;学习速率大的时候收敛速度快精度小，收敛曲线颠簸；学习速率小收敛速度慢精度大，收敛曲线平滑。&lt;/li&gt;
&lt;li&gt;BP神经网络通常用于分类器和函数拟合，如果作为分类器，激活函数一般选用Sigmoid函数；如果做函数拟合，&lt;strong&gt;输出层&lt;/strong&gt;的激活函数应该用线性函数即&lt;code&gt;f(x) = x&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;BP神经网络训练过程中可以采用&lt;strong&gt;增量学习&lt;/strong&gt;或&lt;strong&gt;批量学习&lt;/strong&gt;，即分批临时生成新的训练数据样本并输入当前网络，分阶段逐步学习；或者预生成所有训练数据样本，学习到出结果为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-6-缺陷&#34;&gt;&lt;a href=&#34;#3-6-缺陷&#34; class=&#34;headerlink&#34; title=&#34;3.6. 缺陷&#34;&gt;&lt;/a&gt;3.6. 缺陷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BP神经网络训练时容易陷入局部极小值”假收敛“而得不到全局最优值，如果出现”假收敛“，只能重新随机初始化权重。&lt;/li&gt;
&lt;li&gt;BP神经网络需要的训练次数多，收敛比较慢。&lt;/li&gt;
&lt;li&gt;隐含层神经元数的选取缺乏理论指导。&lt;/li&gt;
&lt;li&gt;训练时学习新样本有遗忘旧样本的趋势，即“BP已死”这一说法的根源——泛化能力弱。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-7-改进&#34;&gt;&lt;a href=&#34;#3-7-改进&#34; class=&#34;headerlink&#34; title=&#34;3.7. 改进&#34;&gt;&lt;/a&gt;3.7. 改进&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加入动量项，即记录上一次权重变化，通过变量因子确定继承上一次权重变化的程度，目的是使权重的调整方向不至于来回颠簸太厉害，表现在误差函数值上则是能令收敛曲线更趋平缓。&lt;/li&gt;
&lt;li&gt;自适应的调整学习因子，即当权重调整到一定程度，不降低学习程度就无法更精细的使神经网络中的关系靠近理想关系。这时需要适量的减小学习因子，一般采取给学习因子添加衰减率的方式。&lt;/li&gt;
&lt;li&gt;通过蚁群算法、遗传算法等算法优化BP神经网络。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="BP神经网络" />
        <category term="机器学习" />
        <category term="人工神经网络" />
        <updated>2015-10-09T04:45:11.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/08/C-%E4%BA%8C%E8%BF%9B%E5%88%B6-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%99%A8/</id>
        <title>C++二进制-十进制转换器</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/08/C-%E4%BA%8C%E8%BF%9B%E5%88%B6-%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 布置了二进制-十进制转换器的小作业，本来还要求顺手扩展一下大数的四则运算，我嫌麻烦没做扩展，就只是写来玩玩。也算熟悉一下底层的二进制-十进制转换机制，顺便复习下C++源码规范。注释写了很多，就不多做解释了，只贴代码。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; converter.h:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.1
 */

#ifndef _CONVERTER_H_
#define _CONVERTER_H_

#include &amp;lt;string&amp;gt;

/*
 * This is a class to offer operations converting radix of number in string.
 */
class Converter
&amp;#123;
private:
	/* to store the binary form of picked up number string */
	std::string binVal;
	/* to store the decimal form of picked up number string */
	std::string decVal;
	/* to sign the number by marking wether it is negtive */
	bool negtive;
	/* to mark wether the number has a dot */
	bool hasDot;
	/* to store the index of dot in binary number string */
	int binDotIndex;
	/* to store the index of dot in decimal number string */
	int decDotIndex;
	/* max reserved digits sum when float converted from decimal to binary */
	int binFloatPrecision;
	/*
	 * Convert the binary number to decimal form then fill this-&amp;gt;decVal.
	 */
	void bin2Dec();
	/*
	 * Convert the decimal number to binary form then fill this-&amp;gt;binVal.
	 */
	void dec2Bin();
public:
	/*
	 * Constructor of the class to pick up number in string and fill both this-&amp;gt;binVal and this-&amp;gt;decVal.
	 */
	Converter(std::string str, int radix, int binFloatPrecision = 20);
	/*
	 * Get the the number string with specified radix.
	 */
	std::string getNum(int radix);
&amp;#125;;

#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; converter.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.1
 */

 #include &amp;quot;converter.h&amp;quot;
 #include &amp;lt;iostream&amp;gt;
 #include &amp;lt;stdexcept&amp;gt;

/*
 * name: Converter
 * args:
 *	string str: the original string containing target number
 *	int radix: the radix of the number to pick up form str
 *	int binFloatPrecision: max reserved digits sum when float converted from decimal to binary
 *		whose default value is 20
 * Constructor of the class to pick up number in string and fill both this-&amp;gt;binVal and this-&amp;gt;decVal.
 */
 Converter::Converter(std::string str, int radix, int binFloatPrecision)
&amp;#123;
	/* check radix */
	if (radix != 2 &amp;amp;&amp;amp; radix != 10)
	&amp;#123;
		std::cerr &amp;lt;&amp;lt; &amp;quot;Invalid argument: Do not support radixes beyond binary and decimal yet.\n&amp;quot;;
		return;
	&amp;#125;
	/* check binFloatPrecision */
	if (binFloatPrecision &amp;lt; 1)
	&amp;#123;
		std::cerr &amp;lt;&amp;lt; &amp;quot;Invalid argument: binFloatPrecision should be greater than 0.\n&amp;quot;;
		return;
	&amp;#125;
	/* fill this-&amp;gt;binFloatPrecision */
	this-&amp;gt;binFloatPrecision = binFloatPrecision;
	/* assistant variables for traversing the original string */
	int len = str.size();
	int i = 0;
	/* mark wether there&amp;#39;s a dot in the number */
	bool hasDot = false;
	/* store number string temporarily */
	std::string tmp = &amp;quot;&amp;quot;;
	if (len &amp;gt; 0)
	&amp;#123;
		/* handle binary radix */
		if (radix == 2)
		&amp;#123;
			/* remove useless characters */
			while(str[i] != &amp;#39;-&amp;#39; &amp;amp;&amp;amp; str[i] != &amp;#39;0&amp;#39; &amp;amp;&amp;amp; str[i] != &amp;#39;1&amp;#39;)
			&amp;#123;
				i++;
			&amp;#125;
			/* pick up &amp;#39;-&amp;#39; */
			if(str[i] == &amp;#39;-&amp;#39;)
			&amp;#123;
				this-&amp;gt;negtive = true;
				i++;
			&amp;#125;
			else
			&amp;#123;
				this-&amp;gt;negtive = false;
			&amp;#125;
			/* remove spare &amp;#39;0&amp;#39;s */
			while(str[i] == &amp;#39;0&amp;#39;)
			&amp;#123;
				i++;
			&amp;#125;
			/* get numbers */
			for(; i &amp;lt; len ; i++)
			&amp;#123;
				/* get first dot only */
				if (!hasDot &amp;amp;&amp;amp; str[i] == &amp;#39;.&amp;#39;)
				&amp;#123;
					hasDot = true;
					tmp += &amp;#39;.&amp;#39;;
					continue;
				&amp;#125;
				/* get &amp;#39;0&amp;#39;s and &amp;#39;1&amp;#39;s only */
				if (str[i] != &amp;#39;0&amp;#39; &amp;amp;&amp;amp; str[i] != &amp;#39;1&amp;#39;)
				&amp;#123;
					break;
				&amp;#125;
				tmp += str[i];
			&amp;#125;
		&amp;#125;
		/* handle decimal radix */
		else
		&amp;#123;
			/* remove useless characters */
			while(str[i] != &amp;#39;-&amp;#39; &amp;amp;&amp;amp; !(str[i] &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; str[i] &amp;lt;= &amp;#39;9&amp;#39;))
			&amp;#123;
				i++;
			&amp;#125;
			/* pick up &amp;#39;-&amp;#39; */
			if(str[i] == &amp;#39;-&amp;#39;)
			&amp;#123;
				this-&amp;gt;negtive = true;
				i++;
			&amp;#125;
			else
			&amp;#123;
				this-&amp;gt;negtive = false;
			&amp;#125;
			/* remove spare &amp;#39;0&amp;#39;s */
			while(str[i] == &amp;#39;0&amp;#39;)
			&amp;#123;
				i++;
			&amp;#125;
			/* get numbers */
			for(; i &amp;lt; len ; i++)
			&amp;#123;
				/* get first dot only */
				if (!hasDot &amp;amp;&amp;amp; str[i] == &amp;#39;.&amp;#39;)
				&amp;#123;
					hasDot = true;
					tmp += &amp;#39;.&amp;#39;;
					continue;
				&amp;#125;
				/* get all arabic numerals */
				if(!(str[i] &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; str[i] &amp;lt;= &amp;#39;9&amp;#39;))
				&amp;#123;
					break;
				&amp;#125;
				tmp += str[i];
			&amp;#125;
		&amp;#125;
	&amp;#125;
	/* if no number picked up set 0 */
	if(tmp == &amp;quot;&amp;quot;)
	&amp;#123;
		tmp = &amp;quot;0&amp;quot;;
	&amp;#125;
	/* add &amp;#39;0&amp;#39; if necessary */
	if (tmp[0] == &amp;#39;.&amp;#39;)
	&amp;#123;
		tmp = &amp;#39;0&amp;#39; + tmp;
	&amp;#125;
	/* mark wether the number has a dot */
	this-&amp;gt;hasDot = hasDot;
	/* fill corresponding number form */
	if (radix == 2)
	&amp;#123;
		this-&amp;gt;binVal = tmp;
		if (hasDot)
		&amp;#123;
			/* store dot&amp;#39;s index in the number string of binary form */
			this-&amp;gt;binDotIndex = tmp.find(&amp;#39;.&amp;#39;);
		&amp;#125;
		bin2Dec();
	&amp;#125;
	else
	&amp;#123;
		this-&amp;gt;decVal = tmp;
		if (hasDot)
		&amp;#123;
			/* store dot&amp;#39;s index in the number string of decimal form */
			this-&amp;gt;decDotIndex = tmp.find(&amp;#39;.&amp;#39;);
		&amp;#125;
		dec2Bin();
	&amp;#125;
	/* have a test */
/*
	std::cout &amp;lt;&amp;lt; &amp;quot;radix: 2&amp;quot; &amp;lt;&amp;lt; std::endl;
	if(this-&amp;gt;negtive)
	&amp;#123;
		std::cout &amp;lt;&amp;lt; &amp;#39;-&amp;#39;;
	&amp;#125;
	std::cout &amp;lt;&amp;lt; this-&amp;gt;binVal &amp;lt;&amp;lt; std::endl;
	std::cout &amp;lt;&amp;lt; &amp;quot;radix: 10&amp;quot; &amp;lt;&amp;lt; std::endl;
	if(this-&amp;gt;negtive)
	&amp;#123;
		std::cout &amp;lt;&amp;lt; &amp;#39;-&amp;#39;;
	&amp;#125;
	std::cout &amp;lt;&amp;lt; this-&amp;gt;decVal &amp;lt;&amp;lt; std::endl;
*/
&amp;#125;

/*
 * name: getNum
 * arguments:
 *	int radix: spedify a radix to find which form number is to got
 * return: the number string with specified form
 * access: public
 * Get the the number string with specified radix.
 */
 std::string Converter::getNum(int radix)
 &amp;#123;
 	/* check radix */
	if (radix != 2 &amp;amp;&amp;amp; radix != 10)
	&amp;#123;
		std::cerr &amp;lt;&amp;lt; &amp;quot;Invalid argument: Do not support radixes beyond binary and decimal yet.\n&amp;quot;;
		return NULL;
	&amp;#125;
 	std::string tmp = &amp;quot;&amp;quot;;
 	/* add the &amp;#39;-&amp;#39; character if necessary */
 	if (this-&amp;gt;negtive)
 	&amp;#123;
 		tmp += &amp;#39;-&amp;#39;;
 	&amp;#125;
 	/* add the binary form number */
 	if (radix == 2)
 	&amp;#123;
 		tmp += this-&amp;gt;binVal;
 	&amp;#125;
 	/* add the decimal form number */
 	else
 	&amp;#123;
 		tmp += this-&amp;gt;decVal;
 	&amp;#125;
 	return tmp;
 &amp;#125;

/*
 * name: bin2Dec
 * access: private
 * Convert the binary number to decimal form then fill this-&amp;gt;decVal.
 */
 void Converter::bin2Dec()
 &amp;#123;
 	/* store number string temporarily */
 	std::string tmp = &amp;quot;&amp;quot;;
 	/* ============== int part ============== */
 	/* to get the int range of the binary number string */
 	int intLen;
 	if (this-&amp;gt;hasDot)
 	&amp;#123;
 		intLen = this-&amp;gt;binDotIndex;
 	&amp;#125;
 	else
 	&amp;#123;
 		intLen = this-&amp;gt;binVal.size();
 	&amp;#125;
 	/* may need carry while traversing digits */
 	char carry = 0;
 	/* to store tmp&amp;#39;s length */
 	int decLen;
 	/* convert radix digit by digit while traversing the int part of the binary number string */
 	for(int i = 0 ; i &amp;lt; intLen ; i++)
 	&amp;#123;
 		/* add new binary digit into carry */
 		carry += this-&amp;gt;binVal[i]-&amp;#39;0&amp;#39;;
 		/* update tmp&amp;#39;s length */
 		decLen = tmp.size();
 		/* traverse tmp to multiply each digit by 2 and add carries */
 		for(int j = decLen-1 ; j &amp;gt;= 0 ; j--)
 		&amp;#123;
 			tmp[j] = tmp[j]*2+carry;
 			if (tmp[j] &amp;gt; 9)
 			&amp;#123;
 				/* update carry */
 				carry = tmp[j]/10;
 				/* limit digit within 10 */
 				tmp[j] %= 10;
 			&amp;#125;
 			else
 			&amp;#123;
				carry = 0;
 			&amp;#125;
 		&amp;#125;
 		/* expand digits if necessary */
 		while(carry)
 		&amp;#123;
 			tmp = char(carry%10)+tmp;
 			carry /= 10;
 		&amp;#125;
 	&amp;#125;
 	/* ============= part end ============== */
 	/* add &amp;#39;0&amp;#39; if need */
 	if (tmp == &amp;quot;&amp;quot;)
 	&amp;#123;
 		tmp += (char)0;
 	&amp;#125;
 	/* ============= float part ============== */
 	/* if there is a float part */
 	if (this-&amp;gt;hasDot)
 	&amp;#123;
 		/* add the dot to the number string */
 		tmp += &amp;#39;.&amp;#39;;
 		/* get the length except the float part */
 		int decIntLen = tmp.size();
 		/* get the length of the whole binary number string */
 		int binLen = this-&amp;gt;binVal.size();
 		/* convert radix digit by digit while traversing the float part of the binary number string */
 		for(int i = binLen-1 ; i &amp;gt; intLen ; i--)
 		&amp;#123;
 			/* carry to first float digit if occur a &amp;#39;1&amp;#39; */
 			carry = (this-&amp;gt;binVal[i] == &amp;#39;1&amp;#39; ? 5 : 0);
 			/* update tmp&amp;#39;s length */
 			decLen = tmp.size();
 			/* traverse tmp to divide each digit by 2 and add carries */
 			for(int j = decIntLen ; j &amp;lt; decLen ; j++)
 			&amp;#123;
 				if (tmp[j] &amp;amp; 1)
 				&amp;#123;
 					tmp[j] = tmp[j]/2 + carry;
 					carry = 5;
 				&amp;#125;
 				else
 				&amp;#123;
 					tmp[j] = tmp[j]/2 + carry;
 					carry = 0;
 				&amp;#125;
 			&amp;#125;
 			/* expand digit if necessary */
 			if (carry)
 			&amp;#123;
 				tmp += carry;
 			&amp;#125;
 		&amp;#125;
 	&amp;#125;
 	/* ============== part end =============== */
 	/* adjust string and fill this-&amp;gt;decVal and this-&amp;gt;decDotIndex */
 	for(int i = 0 ; i &amp;lt; tmp.size() ; i++)
 	&amp;#123;
 		if (tmp[i] == &amp;#39;.&amp;#39;)
 		&amp;#123;
 			continue;
 		&amp;#125;
 		tmp[i] += &amp;#39;0&amp;#39;;
 	&amp;#125;
 	this-&amp;gt;decVal = tmp;
 	this-&amp;gt;decDotIndex = tmp.find(&amp;#39;.&amp;#39;);
 &amp;#125;

/*
 * name: dec2Bin
 * access: private
 * Convert the decimal number to binary form then fill this-&amp;gt;binVal.
 */
 void Converter::dec2Bin()
 &amp;#123;
 	/* store number string temporarily */
 	std::string tmp = &amp;quot;&amp;quot;;
 	/* ============== int part ============== */
 	/* to get the int range of the decimal number string */
 	int intLen;
 	if (this-&amp;gt;hasDot)
 	&amp;#123;
 		intLen = this-&amp;gt;decDotIndex;
 	&amp;#125;
 	else
 	&amp;#123;
 		intLen = this-&amp;gt;decVal.size();
 	&amp;#125;
 	/* may need carry while traversing digits */
 	char carry = 0;
 	/* to store tmp&amp;#39;s length */
 	int binLen;
 	/* convert radix digit by digit while traversing the int part of the decimal number string */
 	for(int i = 0 ; i &amp;lt; intLen ; i++)
 	&amp;#123;
 		/* add new decimal digit into carry */
 		carry += this-&amp;gt;decVal[i]-&amp;#39;0&amp;#39;;
 		/* update tmp&amp;#39;s length */
 		binLen = tmp.size();
 		/* traverse tmp to multiply each digit by 10 and add carries */
 		for(int j = binLen-1 ; j &amp;gt;= 0 ; j--)
 		&amp;#123;
 			/*
 			 * Type of tmp[] is char[] and MAX_CHAR = 127 &amp;gt; 99.
 			 * So the assignment statement below will work safely.
 			 */
 			tmp[j] = tmp[j]*10+carry;
 			if (tmp[j] &amp;gt; 1)
 			&amp;#123;
 				/* update carry */
 				carry = tmp[j]/2;
 				/* limit digit within 2 */
 				tmp[j] &amp;amp;= 1;
 			&amp;#125;
 			else
 			&amp;#123;
				carry = 0;
 			&amp;#125;
 		&amp;#125;
 		/* expand digits if necessary */
 		while(carry)
 		&amp;#123;
 			tmp = char(carry%2)+tmp;
 			carry /= 2;
 		&amp;#125;
 	&amp;#125;
 	/* ============= part end ============== */
 	/* add &amp;#39;0&amp;#39; if need */
 	if (tmp == &amp;quot;&amp;quot;)
 	&amp;#123;
 		tmp += (char)0;
 	&amp;#125;
 	/* ============= float part ============== */
 	/* if there is a float part */
	if (this-&amp;gt;hasDot)
 	&amp;#123;
 		/* add the dot to the number string */
 		tmp += &amp;#39;.&amp;#39;;
 		/* may need carry while traversing digits */
 		carry = 0;
 		/* get the length of the whole decimal number string */
 		int decLen = this-&amp;gt;decVal.size();
 		/* get the length of the float part of the decimal number string */
 		int floatLen = decLen-intLen-1;
 		/* get a copy of the float part of the decimal number string */
 		std::string tmp2 = this-&amp;gt;decVal.substr(intLen+1, floatLen);
 		/* adjust tmp2 to prepare for algorithm below */
 		for(int i = 0 ; i &amp;lt; floatLen ; i++)
 		&amp;#123;
 			tmp2[i] -= &amp;#39;0&amp;#39;;
 		&amp;#125;
 		/*
 		 * asume:   B = b1*2^-1 + b2*2^-2 + b3*2^-3 + ...
 		 *            2*B = b1 + b2*2^-1 + b3*2^-2 + ... 	// take b1 as first digit
 		 * 2*(2*B-b1) = b2 + b3*2^-1 + ... 		// take b2 as second digit
 		 * 		...
 		 * so the binary float will got digit by digit in order
 		 */
 		for(int i = 0 ; i &amp;lt; this-&amp;gt;binFloatPrecision ; i++)
 		&amp;#123;
 			/* traverse tmp2 to multiply each digit by 2 and add carries */
 			for(int j = floatLen-1 ; j &amp;gt;= 0 ; j--)
 			&amp;#123;
 				tmp2[j] = tmp2[j]*2+carry;
 				if (tmp2[j] &amp;gt; 9)
 				&amp;#123;
 					/* update carry */
 					carry = tmp2[j]/10;
 					/* limit digit within 10 */
 					tmp2[j] %= 10;
 				&amp;#125;
 				else
 				&amp;#123;
 					carry = 0;
 				&amp;#125;
 			&amp;#125;
 			/* get the last carry as new digit of binary float */
 			tmp += carry;
 			/* reset carry */
 			carry = 0;
 		&amp;#125;
 	&amp;#125;
 	/* ============== part end =============== */
 	/* adjust string and fill this-&amp;gt;binVal and this-&amp;gt;binDotIndex */
 	for(int i = 0 ; i &amp;lt; tmp.size() ; i++)
 	&amp;#123;
 		if (tmp[i] == &amp;#39;.&amp;#39;)
 		&amp;#123;
 			continue;
 		&amp;#125;
 		tmp[i] += &amp;#39;0&amp;#39;;
 	&amp;#125;
 	this-&amp;gt;binVal = tmp;
 	this-&amp;gt;binDotIndex = tmp.find(&amp;#39;.&amp;#39;);
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; test.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;quot;converter.h&amp;quot;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;climits&amp;gt;

using namespace std;

int main()
&amp;#123;
	//Converter c(&amp;quot;0.625&amp;quot;, 10);
	Converter c(&amp;quot;ujsgdfksagrua0.10100000000000000000&amp;quot;, 2);
	cout &amp;lt;&amp;lt; c.getNum(10) &amp;lt;&amp;lt; endl;
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 都过500行了，会不会写得有点啰嗦？&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="进制转换" />
        <updated>2015-10-08T14:05:52.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/10/08/C-cin%E3%80%81cout%E7%9A%84%E4%BC%98%E5%8C%96%E5%8F%8A%E6%B5%8B%E8%AF%84/</id>
        <title>C++ cin、cout的优化及测评</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/10/08/C-cin%E3%80%81cout%E7%9A%84%E4%BC%98%E5%8C%96%E5%8F%8A%E6%B5%8B%E8%AF%84/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 参加过ACM比赛和部分自己做过测评的人想必不难发现，C++的cin和cout虽然比起C的scanf和printf来方便很多，但是速度似乎会打很大折扣。于是不求甚解的人们一拍脑门，认定因为C更“底层”，封装程度更低，所以势必比C++的输入输出执行效率更高。然而如若C++有知，恐怕要苦笑了。因为C++正是为了兼容C的输入输出才要在cin、cout中进行指针同步，降低了执行效率。那么可能挽回这种效率损失吗？答案是可以。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; C++中提供了解除指针同步的方法：&lt;code&gt;ios::sync_with_stdio(false)&lt;/code&gt;。如字面意思，这个方法用来设置输入输出流是否与C的stdio同步。那么解除同步之后能有多大效果呢？毕竟C++确实因为封装程度比C高多多少少损失了一些执行效率。我动手进行了一系列测评，下面是源码。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这里我统一对输入输出做了重定向，不论是输入数据来源还是输入数据目标都是“data”文件。所有的输入&amp;#x2F;输出测试都是读或写10^7次字符串与整型数的组合数据，每种输入&amp;#x2F;输出测试都进行10次并取平均耗时作为评估值。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先是C的输入输出。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scanf.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;ctime&amp;gt;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	freopen(&amp;quot;data&amp;quot;, &amp;quot;r&amp;quot;, stdin);
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		char s[20];
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			scanf(&amp;quot;%s&amp;quot;, s);
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	printf(&amp;quot;average cost: %lfs\n&amp;quot;, t_sum/testCnt);
	fclose(stdin);
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; printf.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;ctime&amp;gt;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	freopen(&amp;quot;data&amp;quot;, &amp;quot;w&amp;quot;, stdout);
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			printf(&amp;quot;string%d\n&amp;quot;, i);
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	printf(&amp;quot;average cost: %lfs\n&amp;quot;, t_sum/testCnt);
	fclose(stdout);
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后是不解锁同步的cin、cout方法。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cin.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ifstream fin(&amp;quot;data&amp;quot;);
	streambuf *_cin =  cin.rdbuf(fin.rdbuf());
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		string s;
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			cin &amp;gt;&amp;gt; s;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	cin.rdbuf(_cin);
	fin.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cout.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ofstream fout(&amp;quot;data&amp;quot;);
	streambuf *_cout =  cout.rdbuf(fout.rdbuf());
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;string&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	cout.rdbuf(_cout);
	fout.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来是解锁同步的cin、cout方法。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; optimized_cin.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ios::sync_with_stdio(false);
	ifstream fin(&amp;quot;data&amp;quot;);
	streambuf *_cin =  cin.rdbuf(fin.rdbuf());
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		string s;
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			cin &amp;gt;&amp;gt; s;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	cin.rdbuf(_cin);
	fin.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; optimized_cout.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ios::sync_with_stdio(false);
	ofstream fout(&amp;quot;data&amp;quot;);
	streambuf *_cout =  cout.rdbuf(fout.rdbuf());
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			cout &amp;lt;&amp;lt; &amp;quot;string&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	cout.rdbuf(_cout);
	fout.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同时测试C++直接读写文件的方法。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fin.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ifstream fin(&amp;quot;data&amp;quot;);
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		string s;
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			fin &amp;gt;&amp;gt; s;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	fin.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fout.cpp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;ctime&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;fstream&amp;gt;

using namespace std;

int main()
&amp;#123;
	int testCnt = 10;
	int caseCnt = 10000000;
	double t_sum = 0;
	ofstream fout(&amp;quot;data&amp;quot;);
	for(int j = 0 ; j &amp;lt; testCnt ; j++)
	&amp;#123;
		long t_start = clock();
		for(int i = 0 ; i &amp;lt; caseCnt ; i++)
		&amp;#123;
			fout &amp;lt;&amp;lt; &amp;quot;string&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
		&amp;#125;
		long t_end = clock();
		t_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;
	&amp;#125;
	cout &amp;lt;&amp;lt; &amp;quot;average cost: &amp;quot; &amp;lt;&amp;lt; t_sum/testCnt &amp;lt;&amp;lt; &amp;quot;s\n&amp;quot;;
	fout.close();
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面是测试结果：&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;scanf与printf&lt;/th&gt;&lt;th&gt;cin与cout&lt;/th&gt;&lt;th&gt;优化的cin与cout&lt;/th&gt;	&lt;th&gt;fin与fout&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;输入&lt;/td&gt;&lt;td&gt;1.125694s&lt;/td&gt;&lt;td&gt;2.46949s&lt;/td&gt;&lt;td&gt;0.950055s&lt;/td&gt;&lt;td&gt;0.834976s&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;输出&lt;/td&gt;&lt;td&gt;1.304706s&lt;/td&gt;&lt;td&gt;1.46059s&lt;/td&gt;&lt;td&gt;1.41783s&lt;/td&gt;&lt;td&gt;1.41298s&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到，事实上，解开同步之前，cin耗时是scanf的两倍还多，cout则比printf略慢。解开枷锁的cin执行效率与直接读文件接近，甚至比C的scanf还要快。至于输出，解开同步的cout执行效率略有提高，同样接近直接写文件，但是确实还是比C的printf略慢一点。&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="cin" />
        <category term="cout" />
        <category term="scanf" />
        <category term="printf" />
        <updated>2015-10-08T11:56:46.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/09/30/nginx%E4%B9%8B%E5%9B%9E%E5%A4%B4%E8%A1%A5%E8%AF%BE/</id>
        <title>nginx之回头补课</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/09/30/nginx%E4%B9%8B%E5%9B%9E%E5%A4%B4%E8%A1%A5%E8%AF%BE/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最近买了苗泽的那本《Nginx高性能Web服务器详解》，准备系统地学习下Nginx相关的知识。于是在二次科普的过程中发现之前对Nginx的一些理解和认识被刷新细化了。特此发文总结补课。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;一-Web请求处理机制&#34;&gt;&lt;a href=&#34;#一-Web请求处理机制&#34; class=&#34;headerlink&#34; title=&#34;一. Web请求处理机制&#34;&gt;&lt;/a&gt;一. Web请求处理机制&lt;/h1&gt;&lt;h2 id=&#34;1-1-多进程方式&#34;&gt;&lt;a href=&#34;#1-1-多进程方式&#34; class=&#34;headerlink&#34; title=&#34;1.1 多进程方式&#34;&gt;&lt;/a&gt;1.1 多进程方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 传统的多进程方式是指：每接到一个客户端请求，就由服务器主进程生成一个子进程来负责与客户端建立连接并进行交互。连接断开子进程即销毁。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 优点：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①设计实现比较简单，许多细节被OS管理；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②由于进程间独立，资源独立分配使用，运行时出错风险小，稳定性好；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③OS的进程资源回收机制比较完备，垃圾不会积累。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 缺点：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 动态生成子进程涉及内存复制等操作，资源、时间开销比较大。发生大并发时对OS资源造成较大压力，将导致OS性能下降。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Apache最初的设计架构就采用了多进程方式，但是为了适应大并发的要求，对多进程方式进行了改进。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 多进程方式的短板在于动态生成进程时的开销，于是Apache采用了“预生成进程”的工作方式。顾名思义，在还没有接到客户端请求的空闲时间，预先生成若干工作进程。当接到客户端请求，主进程分配子进程与客户端进行交互。连接断开后子进程保留，做开销很小的适当清理后被主进程管理起来等待下一个客户端请求。“预生成进程”在一定程度上缓解了大并发时Web服务器对OS资源造成的压力。&lt;/p&gt;
&lt;h2 id=&#34;1-2-多线程方式&#34;&gt;&lt;a href=&#34;#1-2-多线程方式&#34; class=&#34;headerlink&#34; title=&#34;1.2 多线程方式&#34;&gt;&lt;/a&gt;1.2 多线程方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 总体来说多线程方式与多进程方式十分类似，它们的区别在于，Web服务器接到客户端请求后，多线程方式下，主进程将动态派生一个工作线程来与客户端进行交互。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同样是动态生成，OS产生一个线程的开销要远远小于产生一个进程的开销（在实验验证之前，我对此表示怀疑）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 优点：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; OS资源压力小于多进程方式。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 缺点：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; OS对线程管理的支持甚少，线程调度规则、内存空间管理、线程资源管理都需要开发者自己考虑，增大了开发难度和出错风险。错误也容易在Web服务器持续运行的过程中发生堆积。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IIS服务器采用了多线程方式处理Web请求，它的稳定性相对不错。但是IIS Web服务器管理员仍然倾向于定期检查和重启服务器，以消除不可预知的错误堆积或其他隐患。&lt;/p&gt;
&lt;h1 id=&#34;二-异步-同步、阻塞-非阻塞&#34;&gt;&lt;a href=&#34;#二-异步-同步、阻塞-非阻塞&#34; class=&#34;headerlink&#34; title=&#34;二. 异步&amp;#x2F;同步、阻塞&amp;#x2F;非阻塞&#34;&gt;&lt;/a&gt;二. 异步&amp;#x2F;同步、阻塞&amp;#x2F;非阻塞&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 异步与非阻塞，同步与阻塞的概念常被人混淆。事实上，异步&amp;#x2F;同步与阻塞&amp;#x2F;非阻塞发生在网络通信的不同阶段，前者发生在客户端与服务端的通信阶段，与请求处理过程无关；后者发生在请求处理阶段。&lt;/p&gt;
&lt;h2 id=&#34;2-1-异步-同步&#34;&gt;&lt;a href=&#34;#2-1-异步-同步&#34; class=&#34;headerlink&#34; title=&#34;2.1 异步&amp;#x2F;同步&#34;&gt;&lt;/a&gt;2.1 异步&amp;#x2F;同步&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在网络通信中同步机制指：发送方发送请求后，等到接收方发回响应后才发出下一个请求。发送端与接收端步调一致。异步机制：发送方是否发送请求不受接收方是否作出响应的影响。在接收方，发送方的请求形成队列，依次处理完成后依次进行响应。&lt;/p&gt;
&lt;h2 id=&#34;2-2-阻塞-非阻塞&#34;&gt;&lt;a href=&#34;#2-2-阻塞-非阻塞&#34; class=&#34;headerlink&#34; title=&#34;2.2 阻塞&amp;#x2F;非阻塞&#34;&gt;&lt;/a&gt;2.2 阻塞&amp;#x2F;非阻塞&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 阻塞与非阻塞的对象，通常是网络套接字Socket，其实质是IO操作。阻塞方式中，IO结果返回前，当前线程从运行状态被挂起，直到IO结果返回，才进入就绪状态等待调度以继续运行；非阻塞方式中，线程不会被挂起，如果当前调用无法马上返回结果，一个失败消息将被&lt;strong&gt;立即返回&lt;/strong&gt;，并继续执行下一个调用。&lt;/p&gt;
&lt;h2 id=&#34;2-3-同步阻塞方式&#34;&gt;&lt;a href=&#34;#2-3-同步阻塞方式&#34; class=&#34;headerlink&#34; title=&#34;2.3 同步阻塞方式&#34;&gt;&lt;/a&gt;2.3 同步阻塞方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 发送方发送请求后一直等待响应；接收方处理请求时的IO操作如果不能马上返回结果则一直等待，返回结果后响应发送方。一个请求周期期间，发送方和接收方不能进行其他工作。比如，超市排队付账时，客户（发送方）向收款员（接收方）付款（发送请求）后需等待找零，期间不能做其他事；收款员要等待收款机返回结果（IO操作）后才能找零（响应请求），期间也只能等待。这种方式实现简单，效率不高。&lt;/p&gt;
&lt;h2 id=&#34;2-4-同步非阻塞方式&#34;&gt;&lt;a href=&#34;#2-4-同步非阻塞方式&#34; class=&#34;headerlink&#34; title=&#34;2.4 同步非阻塞方式&#34;&gt;&lt;/a&gt;2.4 同步非阻塞方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 付款后顾客只能等着，收款员可以先干点给商品打包、玩手机之类的杂事。实际中不使用。&lt;/p&gt;
&lt;h2 id=&#34;2-5-异步阻塞方式&#34;&gt;&lt;a href=&#34;#2-5-异步阻塞方式&#34; class=&#34;headerlink&#34; title=&#34;2.5 异步阻塞方式&#34;&gt;&lt;/a&gt;2.5 异步阻塞方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 付款后顾客可以干点跟后面顾客聊天、玩手机之类的杂事，收款员只能等着。实际中不使用。&lt;/p&gt;
&lt;h2 id=&#34;2-6-异步非阻塞方式&#34;&gt;&lt;a href=&#34;#2-6-异步非阻塞方式&#34; class=&#34;headerlink&#34; title=&#34;2.6 异步非阻塞方式&#34;&gt;&lt;/a&gt;2.6 异步非阻塞方式&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 发送方发送请求后无需忙等，可以继续其他操作，有响应时再做出对应反应；接收方如果不能马上获得IO结果，将请求挂入请求队列，继续其他工作，返回IO结果时触发一个事件，接收方向发送方作出对应响应。比如，付款后顾客可以干点跟后面顾客聊天、玩手机之类的杂事；收款员完成商品扫码和收款金额输入后可以先干点给商品打包、玩手机之类的杂事，当收款机发出警报声，收款员告诉顾客机器坏了没法收款，当收款机刷新出找零金额，收款员开始找零。&lt;/p&gt;
&lt;h1 id=&#34;三-Nginx的请求处理机制&#34;&gt;&lt;a href=&#34;#三-Nginx的请求处理机制&#34; class=&#34;headerlink&#34; title=&#34;三. Nginx的请求处理机制&#34;&gt;&lt;/a&gt;三. Nginx的请求处理机制&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Nginx使用“预生成进程”或“带进程池”的多进程方式作为请求处理方式，使用异步非阻塞方式作为网络通信方式。Nginx服务器在启动时就由主进程fork（分支）若干固定数目的工作进程（工作进程数通常与CPU核心数线性相关，有助于提高CPU利用率），这些工作进程就是Nginx的进程池。使用多进程方式保证大并发情景下&lt;strong&gt;不增加&lt;/strong&gt;OS资源压力，使用异步非阻塞方式保证大并发情景下&lt;strong&gt;不降低&lt;/strong&gt;请求处理能力。&lt;/p&gt;
&lt;h1 id=&#34;四-Nginx事件驱动模型&#34;&gt;&lt;a href=&#34;#四-Nginx事件驱动模型&#34; class=&#34;headerlink&#34; title=&#34;四. Nginx事件驱动模型&#34;&gt;&lt;/a&gt;四. Nginx事件驱动模型&lt;/h1&gt;&lt;h2 id=&#34;4-1-事件驱动模型概述&#34;&gt;&lt;a href=&#34;#4-1-事件驱动模型概述&#34; class=&#34;headerlink&#34; title=&#34;4.1 事件驱动模型概述&#34;&gt;&lt;/a&gt;4.1 事件驱动模型概述&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 事件驱动模型一般由事件收集器、事件发送器和事件处理器三个基本单元组成：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①事件收集器：事件收集器一般由一个事件循环程序构成，即无线循环监听各种预设类型的事件；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②事件收集器：事件发送器实际上只是一个事件映射集；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③时间处理器：通常，事件处理器的并发实现有以下三种方式：为请求创建新进程、为请求创建新线程、将请求放入请求队列。第一种方式OS资源开销大；第二种方式开发者需要自己动手完成线程同步，编码复杂；第三种方式编码逻辑复杂，但大多数Web服务器采用第三种方式，基于第三种方式的事件驱动模型逐渐形成了一系列“事件驱动处理库”，又被称为“多路IO复用方法”。&lt;/p&gt;
&lt;h2 id=&#34;4-2-select库&#34;&gt;&lt;a href=&#34;#4-2-select库&#34; class=&#34;headerlink&#34; title=&#34;4.2 select库&#34;&gt;&lt;/a&gt;4.2 select库&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 各个版本的Linux和Windows平台都支持select库，接口基本相同，参数含义略有差异。首先它需要创建3个事件描述符集合（事件映射集），分别可以关注并收集Read、Write、Exception事件描述符（事件收集）。其次调用OS核心的select()函数。然后&lt;strong&gt;轮询&lt;/strong&gt;每个事件描述符集中的每个事件描述符，如有事件发生则进行处理。Nginx服务器在编译过程中如未指定其他高性能事件驱动模型库，将自动编译 select 库。&lt;/p&gt;
&lt;h2 id=&#34;4-3-poll库&#34;&gt;&lt;a href=&#34;#4-3-poll库&#34; class=&#34;headerlink&#34; title=&#34;4.3 poll库&#34;&gt;&lt;/a&gt;4.3 poll库&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 限于Linux平台的基本事件驱动模型。poll与select的区别在于，它只创建一个事件描述符集，而每个事件描述符&lt;strong&gt;结构上&lt;/strong&gt;分别设置Read、Write、Exception事件，&lt;strong&gt;轮询&lt;/strong&gt;时可同时检查三种事件是否发生。同样的，如未指定其他高性能事件驱动模型库，Nginx将自动编译 poll 库。&lt;/p&gt;
&lt;h2 id=&#34;4-4-epoll&#34;&gt;&lt;a href=&#34;#4-4-epoll&#34; class=&#34;headerlink&#34; title=&#34;4.4 epoll&#34;&gt;&lt;/a&gt;4.4 epoll&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; epoll是公认优秀的高性能事件驱动模型，Linux 2.6及以上版本可以使用它。epoll是对poll的改进，epoll可以看成是event poll，即基于事件的poll。epoll利用OS调用，让内核来创建事件描述符集，然后监听内核的反馈事件。当内核通过一个事件反馈发生事件的描述符列表再处理这些事件。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; epoll库在Linux平台上是高效的（因为Linux内核的高效性），它支持一个进程打开大数目的事件描述符，上限是OS支持的最大打开文件数。同时因为它只处理内核上报的“活跃”描述符，epoll的IO效率不随描述符数目的增加线性下降（类似哈希查找之于遍历查找），即它支持大描述符集。&lt;/p&gt;
&lt;h2 id=&#34;4-5-rtsig模型&#34;&gt;&lt;a href=&#34;#4-5-rtsig模型&#34; class=&#34;headerlink&#34; title=&#34;4.5 rtsig模型&#34;&gt;&lt;/a&gt;4.5 rtsig模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rtsig即real time signal的缩写，即实时信号。事实上，rtsig调用内核创建一个固定长度上限的事件信号发生队列，等待工作进程依次处理。&lt;/p&gt;
&lt;h2 id=&#34;4-6-其他事件驱动模型&#34;&gt;&lt;a href=&#34;#4-6-其他事件驱动模型&#34; class=&#34;headerlink&#34; title=&#34;4.6 其他事件驱动模型&#34;&gt;&lt;/a&gt;4.6 其他事件驱动模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; kqueue模型，是用于支持BSD系列平台（FreeBSD、OpenBSD、NetBSD、Mac OS X等）的高效事件驱动模型。也是poll的变种，仰仗OS内核支持条件触发（LT即level-triggered即满足条件触发）和边缘触发（ET即edge-triggered，即状态变换触发）。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#x2F;dev&amp;#x2F;poll模型，是用于支持Unix衍生平台（Solaris、HP&amp;#x2F;UX、IRIX、Tru64 UNIX），该模型是Sun公司开发Solaris系列平台时提出的事件驱动机制方案，使用了虚拟的&amp;#x2F;dev&amp;#x2F;poll设备，开发人员监听设备消息获取事件通知。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; eventport模型，是用于支持Solaris10及以上版本平台的高效事件驱动模型。也是Sun公司开发Solaris是提出的方案，可以有效防止内核崩溃等情况。&lt;/p&gt;
&lt;h2 id=&#34;4-7-IOCP模型&#34;&gt;&lt;a href=&#34;#4-7-IOCP模型&#34; class=&#34;headerlink&#34; title=&#34;4.7 IOCP模型&#34;&gt;&lt;/a&gt;4.7 IOCP模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 苗泽在书中没有提到，但现在Nginx在windows平台下还支持IOCP模型，虽然我对它不甚了解，但圈内提及Windows平台下的大并发网络，一定会提起IOCP模型，估计也是利用内核优化的事件驱动模型。&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="Web请求处理机制" />
        <category term="同步/异步" />
        <category term="阻塞/非阻塞" />
        <category term="事件驱动模型" />
        <updated>2015-09-30T04:50:34.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/09/12/socket-io%E9%82%80%E8%AF%B7%E5%88%B6%E5%B8%A6%E7%99%BB%E5%BD%95%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%AE%9E%E4%BE%8B%E3%80%90DRRR-chat-room%E3%80%91/</id>
        <title>socket.io邀请制带登录聊天室实例【DRRR-chat-room】</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/09/12/socket-io%E9%82%80%E8%AF%B7%E5%88%B6%E5%B8%A6%E7%99%BB%E5%BD%95%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%AE%9E%E4%BE%8B%E3%80%90DRRR-chat-room%E3%80%91/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;写个博文其实也没什么特别要说的。研究node.js的过程中扩展了socket.io的聊天室demo，仿制了一个动漫DRRR（无头骑士异闻录）中的聊天室。使用邀请制，即注册需要提供邀请码。头一次在GitHub建项目：&lt;a href=&#34;https://github.com/bipedalBit/DRRR-chat-room&#34;&gt;DRRR-chat-room&lt;/a&gt;。下个项目可能是用socket.io做一个真·实时弹幕站，尽请期待。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="node.js" />
        <category term="github" />
        <category term="socket.io" />
        <updated>2015-09-12T14:44:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/09/06/node-js%E7%9A%84-Cannot-enqueue-Handshake-after-invoking-quit-%E9%94%99%E8%AF%AF/</id>
        <title>node.js的&#39;Cannot enqueue Handshake after invoking quit&#39;错误</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/09/06/node-js%E7%9A%84-Cannot-enqueue-Handshake-after-invoking-quit-%E9%94%99%E8%AF%AF/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 今天用node.js做无刷新聊天室的时候遇到”Error: Cannot enqueue Handshake after invoking quit.”的问题，在Stack Overflow被点化了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;getDataFromUserGps&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;callback&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;connect&lt;/span&gt;();&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;query&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SELECT * FROM usergps&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;err, results, fields&lt;/span&gt;) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(err, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, results);&lt;br&gt;            &amp;#125;&lt;br&gt;        );&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;end&lt;/span&gt;();&lt;br&gt;    &amp;#125;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;loginUser&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;login, pass, callback&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;connect&lt;/span&gt;();&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;query&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SELECT id FROM users WHERE login = ? AND pass = ?&amp;quot;&lt;/span&gt;,&lt;br&gt;            [login, pass],&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;err, results, fields&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(err, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, results);&lt;br&gt;            &amp;#125;&lt;br&gt;        );&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;end&lt;/span&gt;();&lt;br&gt;    &amp;#125;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;getUserDetails&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;userid, callback&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;connect&lt;/span&gt;();&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;query&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;SELECT * FROM userProfilDetails LEFT JOIN tags ON userProfilDetails.userId = tags.userId WHERE userProfilDetails.userid = ?&amp;quot;&lt;/span&gt;,&lt;br&gt;            [userid],&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;err, results, fields&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(err, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, results);&lt;br&gt;            &amp;#125;&lt;br&gt;        );&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;end&lt;/span&gt;();&lt;br&gt;    &amp;#125;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;addTags&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;userId, tags&lt;/span&gt;)&lt;br&gt;    &amp;#123;&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;connect&lt;/span&gt;();&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;query&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;INSERT INTO tag (userId, tag) VALUES (?, ?)&amp;quot;&lt;/span&gt;,&lt;br&gt;            [userId, tags],&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;err, results, fields&lt;/span&gt;)&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; err;&lt;br&gt;            &amp;#125;&lt;br&gt;        )&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;end&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一开始运行一切正常，但当我执行第二个&amp;quot;query&amp;quot;的时候，会报这个错：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;Cannot enqueue Handshake after invoking quit&lt;/code&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我试过一直不用.end()方法关掉连接，然并卵。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 先谢过。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Radex&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;那些瞎解答和水贴的我就不翻译了。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;根据:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Fixing Node Mysql &amp;quot;Error: Cannot enqueue Handshake after invoking quit.&amp;quot;:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;http://codetheory.in/fixing-node-mysql-error-cannot-enqueue-handshake-after-invoking-quit/&#34;&gt;http://codetheory.in/fixing-node-mysql-error-cannot-enqueue-handshake-after-invoking-quit/&lt;/a&gt;&lt;br&gt;的&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;TL;DR&lt;/strong&gt; &lt;code&gt;每次关掉连接之后你都需要用createConnection方法创建一个新连接。&lt;/code&gt;&lt;br&gt;以及&lt;br&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Note:&lt;/strong&gt; 如果你是在伺服web请求，你就不该在每次请求处理完时关掉连接了。服务器启动时创建一个连接，然后一直用connection&amp;#x2F;client对象查询就好。要处理服务器断开和重连事件时你可以监听错误事件。完整代码：&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/felixge/node-mysql#server-disconnects&#34;&gt;here&lt;/a&gt;.&lt;br&gt;又根据:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Readme.md - Server disconnects:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/felixge/node-mysql#server-disconnects&#34;&gt;https://github.com/felixge/node-mysql#server-disconnects&lt;/a&gt;&lt;br&gt;里边说&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;Server disconnects&lt;/h2&gt;
你可能因为网络问题、服务器超时或者服务器挂了而失去与MySQL服务器的连接。 所有这些情况都被视为&amp;quot;fatal error&amp;quot;，而且会有一个错误代码 &lt;code&gt;err.code = &#39;PROTOCOL_CONNECTION_LOST&#39;&lt;/code&gt;。想了解更多可以看看错误处理章节。

&lt;p&gt;处理这些不被期望的连接断开的最佳方式如下:&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;handleDisconnect&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;connection&lt;/span&gt;) &amp;#123;&lt;br&gt;    connection.&lt;span class=&#34;hljs-title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;err&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!err.&lt;span class=&#34;hljs-property&#34;&gt;fatal&lt;/span&gt;) &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (err.&lt;span class=&#34;hljs-property&#34;&gt;code&lt;/span&gt; !== &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;PROTOCOL_CONNECTION_LOST&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; err;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Re-connecting lost connection: &amp;#x27;&lt;/span&gt; + err.&lt;span class=&#34;hljs-property&#34;&gt;stack&lt;/span&gt;);&lt;br&gt;        connection = mysql.&lt;span class=&#34;hljs-title function_&#34;&gt;createConnection&lt;/span&gt;(connection.&lt;span class=&#34;hljs-property&#34;&gt;config&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-title function_&#34;&gt;handleDisconnect&lt;/span&gt;(connection);&lt;br&gt;        connection.&lt;span class=&#34;hljs-title function_&#34;&gt;connect&lt;/span&gt;();&lt;br&gt;    &amp;#125;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;handleDisconnect&lt;/span&gt;(connection);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如上例所示，重连是通过创建一个新连接的方式达成的，因为连接对象被设计成一挂掉就无法重连。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用连接池的时候，挂掉的连接会被从连接池中移除并释放空间，新连接请求到来时自动创建一个新连接。&lt;/p&gt;
&lt;/blockquote&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; 答题人后面贴了一段自己的自动重连代码，这里我就不贴了。

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 回答于2013年5月3日18:58&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; XP1&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这个回答虽然没被题主采纳，但我和下面跟帖的一致认为这个回答比较好。&lt;/br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;http://stackoverflow.com/questions/14087924/cannot-enqueue-handshake-after-invoking-quit&#34;&gt;原网页&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="node.js" />
        <updated>2015-09-06T10:11:25.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/08/18/%E3%80%90%E4%BA%94%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3-%E2%80%94%E2%80%94%E6%89%A9%E5%B1%95%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
        <title>【五】nginx的数据结构(3)——扩展红黑树</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/08/18/%E3%80%90%E4%BA%94%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3-%E2%80%94%E2%80%94%E6%89%A9%E5%B1%95%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 基础版的红黑树写完之后总觉得有些辅助功能不补充一下就难以体现红黑树在统计方面的优越性，于是我又写了红黑树扩展版。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 发扬我一贯的支线任务狂魔的作风，一晚上就完成了之前设想的红黑树扩展版本。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rbtree.h：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.2
 */

#ifndef _RBTREE_H_INCLUDED_
#define _RBTREE_H_INCLUDED_

/* the node structure of the red-black tree */
typedef struct rbtree_node_s rbtree_node_t;
/* Using type int means its range is -0x7fffffff-1~0x7fffffff. */
typedef int rbtree_key_t;
/* Abstract type is complicated to achieve with C so I use char* instead. */
typedef char* rbtree_data_t;

struct rbtree_node_s
&amp;#123;
    /* key of the node */
    rbtree_key_t    key;
    /* pointer of the parent of the node */
    rbtree_node_t*  parent;
    /* pointer of the left kid of the node */
    rbtree_node_t*  left;
    /* pointer of the right kid of the node */
    rbtree_node_t*  right;
    /* color of the node */
    unsigned char   color;
    /* pointer of the value of the node corresponding to the key */
    rbtree_data_t   value;
    /* count of nodes in the subtree whose root is the current node */
    int node_cnt;
&amp;#125;;

/* the tree object stucture of the red-black tree */
typedef struct rbtree_s rbtree_t;
/* foundational insert function pointer */
typedef void (*rbtree_insert_p) (rbtree_t* root, rbtree_node_t* node);
/* foundational visit function pointer */
typedef void (*rbtree_visit_p) (rbtree_node_t* node);

struct rbtree_s
&amp;#123;
    /* the pointer of the root node of the tree */
    rbtree_node_t* root;
    /* black leaf nodes as sentinel */
    rbtree_node_t* sentinel;
    /* the polymorphic insert function pointer */
    rbtree_insert_p insert;
&amp;#125;;

/* macros */
#define rbtree_init(tree, s, i)     \
rbtree_sentinel_init(s);            \
(tree)-&amp;gt;root = s;               \
(tree)-&amp;gt;sentinel = s;           \
(tree)-&amp;gt;insert = i

#define rbtree_red(node)    ((node)-&amp;gt;color = 1)
#define rbtree_black(node)  ((node)-&amp;gt;color = 0)
#define rbtree_is_red(node) ((node)-&amp;gt;color)
#define rbtree_is_black(node)   (!rbtree_is_red(node))
 /* copy n2&amp;#39;s color to n1 */
#define rbtree_copy_color(n1, n2)   (n1-&amp;gt;color = n2-&amp;gt;color)
/* sentinel must be black cuz it&amp;#39;s leaf node */
#define rbtree_sentinel_init(node)  \
rbtree_black(node);         \
(node)-&amp;gt;node_cnt = 0

/* statements of public methods */
void rbtree_insert_value(rbtree_t* tree, rbtree_node_t* node);
void rbtree_insert(rbtree_t* tree, rbtree_node_t* node);
void rbtree_delete(rbtree_t* tree, rbtree_node_t* node);
/* get node by key */
rbtree_node_t* rbtree_find(rbtree_t* tree, rbtree_key_t key);
/* get node by order number */
rbtree_node_t* rbtree_index(rbtree_t* tree, int index);
int rbtree_height(rbtree_t* tree, rbtree_node_t* node);
int rbtree_count(rbtree_t* tree);
void rbtree_visit(rbtree_node_t* node);
void rbtree_traversal(rbtree_t* tree, rbtree_node_t* node, rbtree_visit_p);

#endif  /* _RBTREE_H_INCLUDED_ */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到，我增加了按序号查找结点、求树高、求结点数、可重写访问节点方法的遍历，这么几个功能。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 为了提高按序号查找结点的效率，我增加了一个结点项node_cnt，代表当前结点为根的子树上的结点总数。这样按序号查找结点的过程将是一个二分查找，时间效率与按key查找相同，都是O(log2n)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 遍历方法使用递归的中序遍历，默认的结点访问方法是个空方法，用户可以自行重写。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rbtree.c：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.2
 */

#include &amp;lt;stddef.h&amp;gt;
#include &amp;quot;rbtree.h&amp;quot;

/* inline methods */
/* get the node with the minimum key in a subtree of the red-black tree */
static inline rbtree_node_t*
rbtree_subtree_min(rbtree_node_t* node, rbtree_node_t* sentinel)
&amp;#123;
    while(node-&amp;gt;left != sentinel)
    &amp;#123;
        node = node-&amp;gt;left;
    &amp;#125;

    return node;
&amp;#125;

/* replace the node &amp;quot;node&amp;quot; in the tree with node &amp;quot;tmp&amp;quot; */
static inline void rbtree_replace(rbtree_t* tree,
    rbtree_node_t* node, rbtree_node_t* tmp)
&amp;#123;
    /* upward: p[node] &amp;lt;- p[tmp] */
    tmp-&amp;gt;parent = node-&amp;gt;parent;

    if (node == tree-&amp;gt;root)
    &amp;#123;
        tree-&amp;gt;root = tmp;
    &amp;#125;
    else if (node == node-&amp;gt;parent-&amp;gt;left)
    &amp;#123;
        /* downward: left[p[node]] &amp;lt;- tmp */
        node-&amp;gt;parent-&amp;gt;left = tmp;
    &amp;#125;
    else
    &amp;#123;
        /* downward: right[p[node]] &amp;lt;- tmp */
        node-&amp;gt;parent-&amp;gt;right = tmp;
    &amp;#125;

    node-&amp;gt;parent = tmp;
&amp;#125;

/* change the topologic structure of the tree keeping the order of the nodes */
static inline void rbtree_left_rotate(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    /* node as the var x in CLRS while tmp as the var y */
    rbtree_node_t* tmp = node-&amp;gt;right;

    /* fix node_cnt */
    node-&amp;gt;node_cnt = node-&amp;gt;left-&amp;gt;node_cnt + tmp-&amp;gt;left-&amp;gt;node_cnt + 1;
    tmp-&amp;gt;node_cnt = node-&amp;gt;node_cnt + tmp-&amp;gt;right-&amp;gt;node_cnt + 1;

    /* replace y with left[y] */
    /* downward: right[x] &amp;lt;- left[y] */
    node-&amp;gt;right = tmp-&amp;gt;left;
    /* if left[[y] is not NIL it has a parent */
    if (tmp-&amp;gt;left != tree-&amp;gt;sentinel)
    &amp;#123;
        /* upward: p[left[y]] &amp;lt;- x */
        tmp-&amp;gt;left-&amp;gt;parent = node;
    &amp;#125;

    /* replace x with y */
    rbtree_replace(tree, node, tmp);
    tmp-&amp;gt;left = node;
&amp;#125;

static inline void rbtree_right_rotate(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* tmp = node-&amp;gt;left;

    /* fix node_cnt */
    node-&amp;gt;node_cnt = node-&amp;gt;right-&amp;gt;node_cnt + tmp-&amp;gt;right-&amp;gt;node_cnt + 1;
    tmp-&amp;gt;node_cnt = node-&amp;gt;node_cnt + tmp-&amp;gt;left-&amp;gt;node_cnt + 1;

    /* replace y with right[y] */
    node-&amp;gt;left = tmp-&amp;gt;right;
    if (tmp-&amp;gt;right != tree-&amp;gt;sentinel)
    &amp;#123;
        tmp-&amp;gt;right-&amp;gt;parent = node;
    &amp;#125;

    /* replace x with y */
    rbtree_replace(tree, node, tmp);
    tmp-&amp;gt;right = node;
&amp;#125;

/* static methods */
/* fix the red-black tree after the new node inserted */
static void rbtree_insert_fixup(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    while(rbtree_is_red(node-&amp;gt;parent))
    &amp;#123;
        if (node-&amp;gt;parent == node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            /* case 1: node&amp;#39;s uncle is red */
            if (rbtree_is_red(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right))
            &amp;#123;
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                node = node-&amp;gt;parent-&amp;gt;parent;
                /* Then we can consider the whole subtree */
                /* which is represented by the new &amp;quot;node&amp;quot; as the &amp;quot;node&amp;quot; before */
                /* and keep looping till &amp;quot;node&amp;quot; become the root. */
            &amp;#125;
            /* case 2: node&amp;#39;s uncle is black */
            else
            &amp;#123;
                /* ensure node is the left kid of its parent */
                if (node == node-&amp;gt;parent-&amp;gt;right)
                &amp;#123;
                    node = node-&amp;gt;parent;
                    rbtree_left_rotate(tree, node);
                &amp;#125;
                /* case 2 -&amp;gt; case 1 */
                rbtree_black(node-&amp;gt;parent);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                rbtree_right_rotate(tree, node-&amp;gt;parent-&amp;gt;parent);
            &amp;#125;
        &amp;#125;
        /* same as the &amp;quot;if&amp;quot; clause before with &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; exchanged */
        else
        &amp;#123;
            if (rbtree_is_red(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left))
            &amp;#123;
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                node = node-&amp;gt;parent-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (node == node-&amp;gt;parent-&amp;gt;left)
                &amp;#123;
                    node = node-&amp;gt;parent;
                    rbtree_right_rotate(tree, node);
                &amp;#125;
                rbtree_black(node-&amp;gt;parent);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent-&amp;gt;parent);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    /* ensure the root node being black */
    rbtree_black(tree-&amp;gt;root);
&amp;#125;

static void rbtree_delete_fixup(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* brother = NULL;

    while(node != tree-&amp;gt;root &amp;amp;&amp;amp; rbtree_is_black(node))
    &amp;#123;
        if (node == node-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            brother = node-&amp;gt;parent-&amp;gt;right;
            if (rbtree_is_red(brother))
            &amp;#123;
                rbtree_black(brother);
                rbtree_red(node-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                /* update brother after topologic change of the tree */
                brother = node-&amp;gt;parent-&amp;gt;right;
            &amp;#125;

            if (rbtree_is_black(brother-&amp;gt;left) &amp;amp;&amp;amp; rbtree_is_black(brother-&amp;gt;right))
            &amp;#123;
                rbtree_red(brother);
                /* go upward and keep on fixing color */
                node = node-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (rbtree_is_black(brother-&amp;gt;right))
                &amp;#123;
                    rbtree_black(brother-&amp;gt;left);
                    rbtree_red(brother);
                    rbtree_right_rotate(tree, brother);
                    /* update brother after topologic change of the tree */
                    brother = node-&amp;gt;parent-&amp;gt;right;
                &amp;#125;
                rbtree_copy_color(brother, node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(brother-&amp;gt;right);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                /* end the loop and ensure root is black */
                node = tree-&amp;gt;root;
            &amp;#125;
        &amp;#125;
        /* same as the &amp;quot;if&amp;quot; clause before with &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; exchanged */
        else
        &amp;#123;
            brother = node-&amp;gt;parent-&amp;gt;left;
            if (rbtree_is_red(brother))
            &amp;#123;
                rbtree_black(brother);
                rbtree_red(node-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                brother = node-&amp;gt;parent-&amp;gt;left;
            &amp;#125;

            if (rbtree_is_black(brother-&amp;gt;left) &amp;amp;&amp;amp; rbtree_is_black(brother-&amp;gt;right))
            &amp;#123;
                rbtree_red(brother);
                node = node-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (rbtree_is_black(brother-&amp;gt;left))
                &amp;#123;
                    rbtree_black(brother-&amp;gt;right);
                    rbtree_red(brother);
                    rbtree_right_rotate(tree, brother);
                    brother = node-&amp;gt;parent-&amp;gt;left;
                &amp;#125;
                rbtree_copy_color(brother, node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(brother-&amp;gt;left);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                node = tree-&amp;gt;root;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    rbtree_black(node);
&amp;#125;

/* public methods */
void rbtree_insert_value(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    /* Using ** to know wether the new node will be a left kid */
    /* or a right kid of its parent node. */
    rbtree_node_t** tmp = &amp;amp;tree-&amp;gt;root;
    rbtree_node_t* parent;

    while(*tmp != tree-&amp;gt;sentinel)
    &amp;#123;
        parent = *tmp;

        /* update node_cnt */
        (parent-&amp;gt;node_cnt)++;

        tmp = (node-&amp;gt;key &amp;lt; parent-&amp;gt;key) ? &amp;amp;parent-&amp;gt;left : &amp;amp;parent-&amp;gt;right;
    &amp;#125;

    /* The pointer knows wether the node should be on the left side */
    /* or on the right one. */
    *tmp = node;
    node-&amp;gt;parent = parent;
    node-&amp;gt;left = tree-&amp;gt;sentinel;
    node-&amp;gt;right = tree-&amp;gt;sentinel;
    rbtree_red(node);
&amp;#125;

void rbtree_visit(rbtree_node_t* node)
&amp;#123;
    /* visiting the current node */
&amp;#125;

void rbtree_insert(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* sentinel = tree-&amp;gt;sentinel;

    /* if the tree is empty */
    if (tree-&amp;gt;root == sentinel)
    &amp;#123;
        tree-&amp;gt;root = node;
        node-&amp;gt;parent = sentinel;
        node-&amp;gt;left = sentinel;
        node-&amp;gt;right = sentinel;
        rbtree_black(node);

        return;
    &amp;#125;

    /* generally */
    tree-&amp;gt;insert(tree, node);
    rbtree_insert_fixup(tree, node);
&amp;#125;

void rbtree_delete(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* sentinel = tree-&amp;gt;sentinel;
    /* wether &amp;quot;node&amp;quot; is on the left side or the right one */
    rbtree_node_t** ptr_to_node = NULL;
    /* &amp;quot;cover&amp;quot; is the node which is going to cover &amp;quot;node&amp;quot; */
    rbtree_node_t* cover = NULL;
    /* wether we lossing a red node on the edge of the tree */
    int loss_red = rbtree_is_red(node);
    int is_root = (node == tree-&amp;gt;root);

    /* get &amp;quot;cover&amp;quot; &amp;amp; &amp;quot;loss_red&amp;quot;  */
    /* sentinel in &amp;quot;node&amp;quot;&amp;#39;s kids */
    if (node-&amp;gt;left == sentinel)
    &amp;#123;
        cover = node-&amp;gt;right;
    &amp;#125;
    else if (node-&amp;gt;right == sentinel)
    &amp;#123;
        cover = node-&amp;gt;left;
    &amp;#125;
    /* &amp;quot;node&amp;quot;&amp;#39;s kids are both non-sentinel */
    else
    &amp;#123;
        /* update &amp;quot;node&amp;quot; &amp;amp; &amp;quot;loss_red&amp;quot; &amp;amp; &amp;quot;is_root&amp;quot; &amp;amp; &amp;quot;cover&amp;quot; */
        cover = rbtree_subtree_min(node-&amp;gt;right, sentinel);
        node-&amp;gt;key = cover-&amp;gt;key;
        node-&amp;gt;value = cover-&amp;gt;value;
        node = cover;
        loss_red = rbtree_is_red(node);
        is_root = 0;
        /* move &amp;quot;cover&amp;quot;&amp;#39;s kids */
        /* &amp;quot;cover&amp;quot; can only be a left kid */
        /* and can only have a right non-sentinel kid */
        /* because of function &amp;quot;rbtree_subtree_min&amp;quot; */
        cover = node-&amp;gt;right;
    &amp;#125;

    if (is_root)
    &amp;#123;
        /* update root */
        tree-&amp;gt;root = cover;
    &amp;#125;
    else
    &amp;#123;
        /* downward link */
        if (node == node-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            node-&amp;gt;parent-&amp;gt;left = cover;
        &amp;#125;
        else
        &amp;#123;
            node-&amp;gt;parent-&amp;gt;right = cover;
        &amp;#125;
    &amp;#125;
    /* upward link */
    cover-&amp;gt;parent = node-&amp;gt;parent;
    /* &amp;quot;cover&amp;quot; may be a sentinel */
    if (cover != sentinel)
    &amp;#123;
        /* set &amp;quot;cover&amp;quot; */
        cover-&amp;gt;left = node-&amp;gt;left;
        cover-&amp;gt;right = node-&amp;gt;right;
        rbtree_copy_color(cover, node);
    &amp;#125;

    /* clear &amp;quot;node&amp;quot; since it&amp;#39;s useless */
    node-&amp;gt;key = -1;
    node-&amp;gt;parent = NULL;
    node-&amp;gt;left = NULL;
    node-&amp;gt;right = NULL;
    node-&amp;gt;value = NULL;

    /* update node_cnt */
    rbtree_node_t* tmp = cover-&amp;gt;parent;
    while(tmp != sentinel)
    &amp;#123;
        (tmp-&amp;gt;node_cnt)--;
        tmp = tmp-&amp;gt;parent;
    &amp;#125;

    if (loss_red)
    &amp;#123;
        return;
    &amp;#125;

    /* When lossing a black node on edge */
    /* the fifth rule of red-black tree will be broke. */
    /* So the tree need to be fixed. */
    rbtree_delete_fixup(tree, cover);
&amp;#125;

/* find the node in the tree corresponding to the given key value */
rbtree_node_t* rbtree_find(rbtree_t* tree, rbtree_key_t key)
&amp;#123;
    rbtree_node_t* tmp = tree-&amp;gt;root;
    /* next line is just fot test */
    // int step_cnt = 0;

    /* search the binary tree */
    while(tmp != tree-&amp;gt;sentinel)
    &amp;#123;
        /* next line is just fot test */
        // step_cnt++;
        if(key == tmp-&amp;gt;key)
        &amp;#123;
            /* next line is just for test */
            // printf(&amp;quot;step count: %d, color: %s, &amp;quot;, step_cnt, rbtree_is_red(tmp) ? &amp;quot;red&amp;quot; : &amp;quot;black&amp;quot;);
            return tmp;
        &amp;#125;

        tmp = (key &amp;lt; tmp-&amp;gt;key) ? tmp-&amp;gt;left : tmp-&amp;gt;right;
    &amp;#125;

    return NULL;
&amp;#125;

/* find the node in the tree corresponding to the given order number */
rbtree_node_t* rbtree_index(rbtree_t* tree, int index)
&amp;#123;
    if (index &amp;lt; 0 || index &amp;gt;= rbtree_count(tree))
    &amp;#123;
        return NULL;
    &amp;#125;

    rbtree_node_t* tmp = tree-&amp;gt;root;
    int left_cnt = 0;
    int sub_left_cnt;

    while(tmp-&amp;gt;node_cnt &amp;gt; 0)
    &amp;#123;
        sub_left_cnt = tmp-&amp;gt;left-&amp;gt;node_cnt;
        if (left_cnt + sub_left_cnt == index)
        &amp;#123;
            return tmp;
        &amp;#125;

        if (left_cnt + sub_left_cnt &amp;lt; index)
        &amp;#123;
            left_cnt += sub_left_cnt + 1;
            tmp = tmp-&amp;gt;right;
        &amp;#125;
        else
        &amp;#123;
            tmp = tmp-&amp;gt;left;
        &amp;#125;
    &amp;#125;
&amp;#125;

/* get the height of the subtree */
int rbtree_height(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    if (node == tree-&amp;gt;sentinel)
    &amp;#123;
        return 0;
    &amp;#125;

    int left_height = rbtree_height(tree, node-&amp;gt;left);
    int right_height = rbtree_height(tree, node-&amp;gt;right);
    int sub_height = (left_height &amp;gt; right_height) ? left_height : right_height;
    return sub_height+1;
&amp;#125;

/* get the count of nodes in the tree */
int rbtree_count(rbtree_t* tree)
&amp;#123;
    return tree-&amp;gt;root-&amp;gt;node_cnt;
&amp;#125;

/* visit every node of the subtree whose root is given in order */
void rbtree_traversal(rbtree_t* tree, rbtree_node_t* node, rbtree_visit_p visit)
&amp;#123;
    if (node != tree-&amp;gt;sentinel)
    &amp;#123;
        rbtree_traversal(tree, node-&amp;gt;left, visit);
        visit(node);
        rbtree_traversal(tree, node-&amp;gt;right, visit);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还是做个压力测试。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; test.c：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;quot;rbtree.h&amp;quot;

int main(int argc, char const *argv[])
&amp;#123;
    double duration;
    double room;

    rbtree_t t = &amp;#123;&amp;#125;;
    rbtree_node_t s = &amp;#123;&amp;#125;;
    rbtree_init(&amp;amp;t, &amp;amp;s, rbtree_insert_value);

    const int cnt = 1&amp;lt;&amp;lt;20;
    const int max_len = 15;

#define TEST_VALUES &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;, &amp;quot;grape&amp;quot;, &amp;quot;lemon&amp;quot;, &amp;quot;mango&amp;quot;, &amp;quot;pear&amp;quot;, &amp;quot;pineapple&amp;quot;, &amp;quot;strawberry&amp;quot;, &amp;quot;watermelon&amp;quot;&amp;#125;

    /* for gcc */
    char* v[] = TEST_VALUES;
    /* for g++ */
    // char v[][max_len] = TEST_VALUES;

    /* Default stack size in Ubuntu Kylin 14.04 is 8MB. */
    /* It&amp;#39;s not enough. So I use memory in heap which offers a lot larger room. */
    rbtree_node_t* n = (rbtree_node_t*)calloc(cnt, sizeof(rbtree_node_t));
    int i;

    long time1 = clock();

    for (i = 0; i &amp;lt; cnt; i++)
    &amp;#123;
        n[i].key = i+1;
        n[i].value = v[i%10];
        n[i].node_cnt = 1;
        rbtree_insert(&amp;amp;t, &amp;amp;n[i]);
    &amp;#125;

    srand( (unsigned int)time(0) );
    int no = rand()%cnt;
    printf(&amp;quot;n[%d]-&amp;gt;key = %d\n&amp;quot;, no, rbtree_index(&amp;amp;t, no)-&amp;gt;key);

    long time2 = clock();
    room = 48.0*cnt/(1&amp;lt;&amp;lt;20);
    duration = (double)(time2 - time1) / CLOCKS_PER_SEC;
    printf(&amp;quot;Inserting %d nodes costs %.2fMB and spends %f seconds.\n&amp;quot;, cnt, room, duration);

    const int search_cnt = 1&amp;lt;&amp;lt;10;
    for( i = 0 ; i &amp;lt; search_cnt ; i++ )
    &amp;#123;
        rbtree_find(&amp;amp;t, (rand()%cnt)+1);
    &amp;#125;

    long time3 = clock();
    duration = (double)(time3 - time2) / CLOCKS_PER_SEC;
    printf(&amp;quot;Searching %d nodes among %d spends %f seconds.\n&amp;quot;, search_cnt, cnt, duration);

    const int index_cnt = 1&amp;lt;&amp;lt;10;
    for( i = 0 ; i &amp;lt; index_cnt ; i++ )
    &amp;#123;
        rbtree_index(&amp;amp;t, (rand()%cnt));
    &amp;#125;

    long time4 = clock();
    duration = (double)(time4 - time3) / CLOCKS_PER_SEC;
    printf(&amp;quot;Indexing %d nodes among %d spends %f seconds.\n&amp;quot;, index_cnt, cnt, duration);

    const int delete_cnt = 1&amp;lt;&amp;lt;10;
    int nums[delete_cnt];
    int num;
    /* Let&amp;#39;s hash! */
    char* mark = (char*)calloc(cnt, sizeof(char));
    memset(mark, 0, cnt*sizeof(char));
    for(i = 0; i &amp;lt; delete_cnt; i++)
    &amp;#123;
        for(;;)
        &amp;#123;
            num = rand()%cnt;
            if (mark[num] == 0)
            &amp;#123;
                mark[num] = 1;
                nums[i] = num;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    long time5 = clock();
    duration = (double)(time5 - time4) / CLOCKS_PER_SEC;
    printf(&amp;quot;Hash %d times spends %f seconds.\n&amp;quot;, delete_cnt, duration);

    for(i = 0; i &amp;lt; delete_cnt; i++)
    &amp;#123;
        rbtree_delete(&amp;amp;t, &amp;amp;n[nums[i]]);
    &amp;#125;

    long time6 = clock();
    duration = (double)(time6 - time5) / CLOCKS_PER_SEC;
    printf(&amp;quot;Deleting %d nodes among %d spends %f seconds.\n&amp;quot;, delete_cnt, cnt, duration);
    free(mark);

    int h = rbtree_height(&amp;amp;t, t.root);
    long time7 = clock();
    duration = (double)(time7 - time6) / CLOCKS_PER_SEC;
    printf(&amp;quot;The height of the tree is %d. Getting it spends %f seconds.\n&amp;quot;, h, duration);

    rbtree_traversal(&amp;amp;t, t.root, rbtree_visit);
    long time8 = clock();
    duration = (double)(time8 - time7) / CLOCKS_PER_SEC;
    printf(&amp;quot;Traversal the tree spends %f seconds.\n&amp;quot;, duration);

    printf(&amp;quot;Count of nodes in the tree is %d.\n&amp;quot;, rbtree_count(&amp;amp;t));

    free(n);

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上一个版本的压力测试结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;Inserting 1048576 nodes costs 48.00MB and spends 0.425416 seconds.
Searching 1024 nodes among 1048576 spends 0.001140 seconds.
Hash 1024 times spends 0.000334 seconds.
Deleting 1024 nodes among 1048576 spends 0.000783 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 扩展版本的压力测试结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;Inserting 1048576 nodes costs 48.00MB and spends 0.467859 seconds.
Searching 1024 nodes among 1048576 spends 0.001188 seconds.
Indexing 1024 nodes among 1048576 spends 0.001484 seconds.
Hash 1024 times spends 0.000355 seconds.
Deleting 1024 nodes among 1048576 spends 0.001417 seconds.
The height of the tree is 28. Getting it spends 0.021669 seconds.
Traversal the tree spends 0.023913 seconds.
Count of nodes in the tree is 1047552.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 比较一下可以发现：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.插入结点略慢了一点，因为插入时多维护了一个node_cnt项。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.按key查找结点速度没有变化。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3.哈希查找速度没有变化。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4.删除结点花的时间几乎是原来的两倍，因为每次删除后都要一路向上更新node_cnt，几乎相当于包含了一次按key查询。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5.按序号查询比按key查询略慢，因为每次进入右子树需要多做一次加法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6.遍历花的时间与求树高相同，因为它们的实质都是遍历树，时间效率O(n)数量级，具体点为2n次结点访问，分别为结点入栈和出栈时。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 别问我max、min、mid在哪，能按序号查询了这些还是问题吗？&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="rbtree" />
        <category term="C" />
        <updated>2015-08-17T18:04:43.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/</id>
        <title>Linux下Sublime的C/C++多文件程序Makefile+清理+执行配置</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不自己动手为Sublime配个C&amp;#x2F;C++的通用Makefile脚本吗？不能自动编译链接多文件的编辑器不是好IDE。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先我们需要了解几个事实：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.Sublime自带的C&amp;#x2F;C++编译+执行配置使用的是g++编译器，此外这套配置只针对单文件程序。如果要编译多文件，只能采用入口函数所在文件包含需要的源文件而非头文件的方式。比起我们熟悉的几种IDE，这显然无法令人接受。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.Linux下的C&amp;#x2F;C++程序员应该熟悉Makefile，Makefile可以算是一种脚本，执行关键字是一般是make，它可以设计多文件程序的编译+链接过程，生成.o文件和可执行文件。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3.Sublime也有默认的Make配置，但是第一，Sublime没有提供通用的C&amp;#x2F;C++的Makefile脚本（自动组织而非每次手动重写），第二点是个小瑕疵，Sublime提供的Make配置只有编译、链接、清理功能，执行程序需要手动。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前重写红黑树最重要的副产品就是一个通用的C&amp;#x2F;C++的Makefile脚本。每次使用基本只需要改改输出的可执行文件名，或者干脆想个默认文件名以后都不改了，gcc&amp;#x2F;g++编译器的选择是自动的，当然也可以手动配置一些编译选项，这个自己看脚本注释就好。上干货：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#############################################################
# Generic Makefile for C/C++ Program
#
# License: GPL (General Public License)
# Author:  whyglinux &amp;lt;whyglinux AT gmail DOT com&amp;gt;
# Date:    2006/03/04 (version 0.1)
#          2007/03/24 (version 0.2)
#          2007/04/09 (version 0.3)
#          2007/06/26 (version 0.4)
#          2008/04/05 (version 0.5)
#
# Description:
# ------------
# This is an easily customizable makefile template. The purpose is to
# provide an instant building environment for C/C++ programs.
#
# It searches all the C/C++ source files in the specified directories,
# makes dependencies, compiles and links to form an executable.
#
# Besides its default ability to build C/C++ programs which use only
# standard C/C++ libraries, you can customize the Makefile to build
# those using other libraries. Once done, without any changes you can
# then build programs using the same or less libraries, even if source
# files are renamed, added or removed. Therefore, it is particularly
# convenient to use it to build codes for experimental or study use.
#
# GNU make is expected to use the Makefile. Other versions of makes
# may or may not work.
#
# Usage:
# ------
# 1. Copy the Makefile to your program directory.
# 2. Customize in the &amp;quot;Customizable Section&amp;quot; only if necessary:
#    * to use non-standard C/C++ libraries, set pre-processor or compiler
#      options to &amp;lt;MY_CFLAGS&amp;gt; and linker ones to &amp;lt;MY_LIBS&amp;gt;
#      (See Makefile.gtk+-2.0 for an example)
#    * to search sources in more directories, set to &amp;lt;SRCDIRS&amp;gt;
#    * to specify your favorite program name, set to &amp;lt;PROGRAM&amp;gt;
# 3. Type make to start building your program.
#
# Make Target:
# ------------
# The Makefile provides the following targets to make:
#   $ make           compile and link
#   $ make NODEP=yes compile and link without generating dependencies
#   $ make objs      compile only (no linking)
#   $ make tags      create tags for Emacs editor
#   $ make ctags     create ctags for VI editor
#   $ make clean     clean objects and the executable file
#   $ make distclean clean objects, the executable and dependencies
#   $ make help      get the usage of the makefile
#
#===========================================================================

## Customizable Section: adapt those variables to suit your program.
##==========================================================================

# The pre-processor and compiler options.
MY_CFLAGS =

# The linker options.
MY_LIBS   =

# The pre-processor options used by the cpp (man cpp for more).
# CPPFLAGS  = -Wall

# The options used in linking as well as in any direct use of ld.
LDFLAGS   =

# The directories in which source files reside.
# If not specified, only the current directory will be serached.
SRCDIRS   =

# The executable file name.
# If not specified, current directory name or `a.out&amp;#39; will be used.
PROGRAM   = test

## Implicit Section: change the following only when necessary.
##==========================================================================

# The source file types (headers excluded).
# .c indicates C source files, and others C++ ones.
SRCEXTS = .c .C .cc .cpp .CPP .c++ .cxx .cp

# The header file types.
HDREXTS = .h .H .hh .hpp .HPP .h++ .hxx .hp

# The pre-processor and compiler options.
# Users can override those variables from the command line.
# CFLAGS  = -g -O2
# CXXFLAGS= -g -O2

# The C program compiler.
# CC     = gcc

# The C++ program compiler.
#CXX    = g++

# Un-comment the following line to compile C programs as C++ ones.
#CC     = $(CXX)

# The command used to delete file.
#RM     = rm -f

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

## Stable Section: usually no need to be changed. But you can add more.
##==========================================================================
SHELL   = /bin/sh
EMPTY   =
SPACE   = $(EMPTY) $(EMPTY)
ifeq ($(PROGRAM),)
  CUR_PATH_NAMES = $(subst /,$(SPACE),$(subst $(SPACE),_,$(CURDIR)))
  PROGRAM = $(word $(words $(CUR_PATH_NAMES)),$(CUR_PATH_NAMES))
  ifeq ($(PROGRAM),)
    PROGRAM = a.out
  endif
endif
ifeq ($(SRCDIRS),)
  SRCDIRS = .
endif
SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
HEADERS = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(HDREXTS))))
SRC_CXX = $(filter-out %.c,$(SOURCES))
OBJS    = $(addsuffix .o, $(basename $(SOURCES)))
DEPS    = $(OBJS:.o=.d)

## Define some useful variables.
DEP_OPT = $(shell if `$(CC) --version | grep &amp;quot;GCC&amp;quot; &amp;gt;/dev/null`; then \
                  echo &amp;quot;-MM -MP&amp;quot;; else echo &amp;quot;-M&amp;quot;; fi )
DEPEND      = $(CC)  $(DEP_OPT)  $(MY_CFLAGS) $(CFLAGS) $(CPPFLAGS)
DEPEND.d    = $(subst -g ,,$(DEPEND))
COMPILE.c   = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) -c
COMPILE.cxx = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.c      = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) $(LDFLAGS)
LINK.cxx    = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

.PHONY: all objs tags ctags clean distclean help show

# Delete the default suffixes
.SUFFIXES:

all: $(PROGRAM)

# Rules for creating dependency files (.d).
#------------------------------------------

%.d:%.c
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.C
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cc
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cpp
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.CPP
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.c++
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cp
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cxx
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

# Rules for generating object files (.o).
#----------------------------------------
objs:$(OBJS)

%.o:%.c
    $(COMPILE.c) $&amp;lt; -o $@

%.o:%.C
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cc
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cpp
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.CPP
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.c++
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cp
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cxx
    $(COMPILE.cxx) $&amp;lt; -o $@

# Rules for generating the tags.
#-------------------------------------
tags: $(HEADERS) $(SOURCES)
    $(ETAGS) $(ETAGSFLAGS) $(HEADERS) $(SOURCES)

ctags: $(HEADERS) $(SOURCES)
    $(CTAGS) $(CTAGSFLAGS) $(HEADERS) $(SOURCES)

# Rules for generating the executable.
#-------------------------------------
$(PROGRAM):$(OBJS)
ifeq ($(SRC_CXX),)              # C program
    $(LINK.c)   $(OBJS) $(MY_LIBS) -o $@
    @echo Type ./$@ to execute the program.
else                            # C++ program
    $(LINK.cxx) $(OBJS) $(MY_LIBS) -o $@
    @echo Type ./$@ to execute the program.
endif

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

clean:
    $(RM) $(OBJS) $(PROGRAM) $(PROGRAM).exe

distclean: clean
    $(RM) $(DEPS) TAGS

# Show help.
help:
    @echo &amp;#39;Generic Makefile for C/C++ Programs (gcmakefile) version 0.5&amp;#39;
    @echo &amp;#39;Copyright (C) 2007, 2008 whyglinux &amp;lt;whyglinux@hotmail.com&amp;gt;&amp;#39;
    @echo
    @echo &amp;#39;Usage: make [TARGET]&amp;#39;
    @echo &amp;#39;TARGETS:&amp;#39;
    @echo &amp;#39;  all       (=make) compile and link.&amp;#39;
    @echo &amp;#39;  NODEP=yes make without generating dependencies.&amp;#39;
    @echo &amp;#39;  objs      compile only (no linking).&amp;#39;
    @echo &amp;#39;  tags      create tags for Emacs editor.&amp;#39;
    @echo &amp;#39;  ctags     create ctags for VI editor.&amp;#39;
    @echo &amp;#39;  clean     clean objects and the executable file.&amp;#39;
    @echo &amp;#39;  distclean clean objects, the executable and dependencies.&amp;#39;
    @echo &amp;#39;  show      show variables (for debug use only).&amp;#39;
    @echo &amp;#39;  help      print this message.&amp;#39;
    @echo
    @echo &amp;#39;Report bugs to &amp;lt;whyglinux AT gmail DOT com&amp;gt;.&amp;#39;

# Show variables (for debug use only.)
show:
    @echo &amp;#39;PROGRAM     :&amp;#39; $(PROGRAM)
    @echo &amp;#39;SRCDIRS     :&amp;#39; $(SRCDIRS)
    @echo &amp;#39;HEADERS     :&amp;#39; $(HEADERS)
    @echo &amp;#39;SOURCES     :&amp;#39; $(SOURCES)
    @echo &amp;#39;SRC_CXX     :&amp;#39; $(SRC_CXX)
    @echo &amp;#39;OBJS        :&amp;#39; $(OBJS)
    @echo &amp;#39;DEPS        :&amp;#39; $(DEPS)
    @echo &amp;#39;DEPEND      :&amp;#39; $(DEPEND)
    @echo &amp;#39;COMPILE.c   :&amp;#39; $(COMPILE.c)
    @echo &amp;#39;COMPILE.cxx :&amp;#39; $(COMPILE.cxx)
    @echo &amp;#39;link.c      :&amp;#39; $(LINK.c)
    @echo &amp;#39;link.cxx    :&amp;#39; $(LINK.cxx)

## End of the Makefile ##  Suggestions are welcome  ## All rights reserved ##
##############################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 感谢whyglinux大大！然后上Sublime的配置C C++ Multiple Files.sublime-build：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;#123;
    &amp;quot;shell_cmd&amp;quot;: &amp;quot;make&amp;quot;,
    &amp;quot;file_regex&amp;quot;: &amp;quot;^(..[^:\n]*):([0-9]+):?([0-9]+)?:? (.*)$&amp;quot;,
    &amp;quot;working_dir&amp;quot;: &amp;quot;$&amp;#123;folder:$&amp;#123;project_path:$&amp;#123;file_path&amp;#125;&amp;#125;&amp;#125;&amp;quot;,
    &amp;quot;selector&amp;quot;: &amp;quot;source.c, source.cpp&amp;quot;,
    &amp;quot;syntax&amp;quot;: &amp;quot;Packages/Makefile/Make.build-language&amp;quot;,
    &amp;quot;keyfiles&amp;quot;: [&amp;quot;Makefile&amp;quot;, &amp;quot;makefile&amp;quot;],

    &amp;quot;variants&amp;quot;:
    [
        &amp;#123;
            &amp;quot;name&amp;quot;: &amp;quot;Clean&amp;quot;,
            &amp;quot;shell_cmd&amp;quot;: &amp;quot;make clean&amp;quot;
        &amp;#125;,
        &amp;#123;
            &amp;quot;name&amp;quot;: &amp;quot;Run&amp;quot;,
            &amp;quot;shell_cmd&amp;quot;: &amp;quot;$&amp;#123;file_path&amp;#125;/$&amp;#123;file_base_name&amp;#125;&amp;quot;
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 你们大可以配成执行时自动弹出终端，这样还能交互。我为了解决Sublime里中文输入法的问题用了gtk2，但是gnome-terminal用的是gtk3，不兼容了。写写控制台程序也不用那么多交互，懒得折腾了，你们随意。&lt;/p&gt;
</content>
        <category term="C" />
        <category term="sublime" />
        <category term="C++" />
        <category term="makefile" />
        <updated>2015-08-16T14:45:46.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/08/16/%E3%80%90%E5%9B%9B%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2-%E2%80%94%E2%80%94%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91/</id>
        <title>【四】nginx的数据结构(2)——自己动手重写红黑树</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/08/16/%E3%80%90%E5%9B%9B%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2-%E2%80%94%E2%80%94%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E9%87%8D%E5%86%99%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不管看了多少遍有多滚瓜烂熟，数据结构或者算法的代码如果不亲自码一遍，我总是不敢说自己懂了。这次就来自己动手重写红黑树。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 费话不多说，上重写代码，这次姑且用英语写的注释当复习英语了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rbtree.h：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.1
 */

#ifndef _RBTREE_H_INCLUDED_
#define _RBTREE_H_INCLUDED_

/* the node structure of the red-black tree */
typedef struct rbtree_node_s rbtree_node_t;
/* Using type int means its range is -0x7fffffff-1~0x7fffffff. */
typedef int rbtree_key_t;
/* Abstract type is complicated to achieve with C so I use char* instead. */
typedef char* rbtree_data_t;

struct rbtree_node_s
&amp;#123;
    /* key of the node */
    rbtree_key_t    key;
    /* pointer of the parent of the node */
    rbtree_node_t*  parent;
    /* pointer of the left kid of the node */
    rbtree_node_t*  left;
    /* pointer of the right kid of the node */
    rbtree_node_t*  right;
    /* color of the node */
    unsigned char   color;
    /* pointer of the value of the node corresponding to the key */
    rbtree_data_t   value;
&amp;#125;;

/* the tree object stucture of the red-black tree */
typedef struct rbtree_s rbtree_t;
/* foundational insert function pointer*/
typedef void (*rbtree_insert_p) (rbtree_t* root, rbtree_node_t* node);

struct rbtree_s
&amp;#123;
    /* the pointer of the root node of the tree */
    rbtree_node_t* root;
    /* black leaf nodes as sentinel */
    rbtree_node_t* sentinel;
    /* the polymorphic insert function pointer */
    rbtree_insert_p insert;
&amp;#125;;

/* macros */
#define rbtree_init(tree, s, i)     \
rbtree_sentinel_init(s);            \
(tree)-&amp;gt;root = s;               \
(tree)-&amp;gt;sentinel = s;           \
(tree)-&amp;gt;insert = i

#define rbtree_red(node)    ((node)-&amp;gt;color = 1)
#define rbtree_black(node)  ((node)-&amp;gt;color = 0)
#define rbtree_is_red(node) ((node)-&amp;gt;color)
#define rbtree_is_black(node)   (!rbtree_is_red(node))
 /* copy n2&amp;#39;s color to n1 */
#define rbtree_copy_color(n1, n2)   (n1-&amp;gt;color = n2-&amp;gt;color)
/* sentinel must be black cuz it&amp;#39;s leaf node */
#define rbtree_sentinel_init(node)  rbtree_black(node)

/* statements of public methods */
void rbtree_insert_value(rbtree_t* tree, rbtree_node_t* node);
void rbtree_insert(rbtree_t* tree, rbtree_node_t* node);
void rbtree_delete(rbtree_t* tree, rbtree_node_t* node);
rbtree_node_t* rbtree_find(rbtree_t* tree, rbtree_key_t key);

#endif  /* _RBTREE_H_INCLUDED_ */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 看过nginx源码的有心人会发现，我的头文件相对于ngx_rbree.h改动不大，非常像。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键的rbtree.c：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;/*
 * Copyright (C) Bipedal Bit
 * Verson 1.0.0.1
 */

#include &amp;lt;stddef.h&amp;gt;
#include &amp;quot;rbtree.h&amp;quot;

/* inline methods */
/* get the node with the minimum key in a subtree of the red-black tree */
static inline rbtree_node_t*
rbtree_subtree_min(rbtree_node_t* node, rbtree_node_t* sentinel)
&amp;#123;
    while(node-&amp;gt;left != sentinel)
    &amp;#123;
        node = node-&amp;gt;left;
    &amp;#125;

    return node;
&amp;#125;

/* replace the node &amp;quot;node&amp;quot; in the tree with node &amp;quot;tmp&amp;quot; */
static inline void rbtree_replace(rbtree_t* tree,
    rbtree_node_t* node, rbtree_node_t* tmp)
&amp;#123;
    /* upward: p[node] &amp;lt;- p[tmp] */
    tmp-&amp;gt;parent = node-&amp;gt;parent;

    if (node == tree-&amp;gt;root)
    &amp;#123;
        tree-&amp;gt;root = tmp;
    &amp;#125;
    else if (node == node-&amp;gt;parent-&amp;gt;left)
    &amp;#123;
        /* downward: left[p[node]] &amp;lt;- tmp */
        node-&amp;gt;parent-&amp;gt;left = tmp;
    &amp;#125;
    else
    &amp;#123;
        /* downward: right[p[node]] &amp;lt;- tmp */
        node-&amp;gt;parent-&amp;gt;right = tmp;
    &amp;#125;

    node-&amp;gt;parent = tmp;
&amp;#125;

/* change the topologic structure of the tree keeping the order of the nodes */
static inline void rbtree_left_rotate(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    /* node as the var x in CLRS while tmp as the var y */
    rbtree_node_t* tmp = node-&amp;gt;right;

    /* replace y with left[y] */
    /* downward: right[x] &amp;lt;- left[y] */
    node-&amp;gt;right = tmp-&amp;gt;left;
    /* if left[[y] is not NIL it has a parent */
    if (tmp-&amp;gt;left != tree-&amp;gt;sentinel)
    &amp;#123;
        /* upward: p[left[y]] &amp;lt;- x */
        tmp-&amp;gt;left-&amp;gt;parent = node;
    &amp;#125;

    /* replace x with y */
    rbtree_replace(tree, node, tmp);
    tmp-&amp;gt;left = node;
&amp;#125;

static inline void rbtree_right_rotate(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* tmp = node-&amp;gt;left;

    /* replace y with right[y] */
    node-&amp;gt;left = tmp-&amp;gt;right;
    if (tmp-&amp;gt;right != tree-&amp;gt;sentinel)
    &amp;#123;
        tmp-&amp;gt;right-&amp;gt;parent = node;
    &amp;#125;

    /* replace x with y */
    rbtree_replace(tree, node, tmp);
    tmp-&amp;gt;right = node;
&amp;#125;

/* static methods */
/* fix the red-black tree after the new node inserted */
static void rbtree_insert_fixup(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    while(rbtree_is_red(node-&amp;gt;parent))
    &amp;#123;
        if (node-&amp;gt;parent == node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            /* case 1: node&amp;#39;s uncle is red */
            if (rbtree_is_red(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right))
            &amp;#123;
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                node = node-&amp;gt;parent-&amp;gt;parent;
                /* Then we can consider the whole subtree */
                /* which is represented by the new &amp;quot;node&amp;quot; as the &amp;quot;node&amp;quot; before */
                /* and keep looping till &amp;quot;node&amp;quot; become the root. */
            &amp;#125;
            /* case 2: node&amp;#39;s uncle is black */
            else
            &amp;#123;
                /* ensure node is the left kid of its parent */
                if (node == node-&amp;gt;parent-&amp;gt;right)
                &amp;#123;
                    node = node-&amp;gt;parent;
                    rbtree_left_rotate(tree, node);
                &amp;#125;
                /* case 2 -&amp;gt; case 1 */
                rbtree_black(node-&amp;gt;parent);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                rbtree_right_rotate(tree, node-&amp;gt;parent-&amp;gt;parent);
            &amp;#125;
        &amp;#125;
        /* same as the &amp;quot;if&amp;quot; clause before with &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; exchanged */
        else
        &amp;#123;
            if (rbtree_is_red(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left))
            &amp;#123;
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                node = node-&amp;gt;parent-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (node == node-&amp;gt;parent-&amp;gt;left)
                &amp;#123;
                    node = node-&amp;gt;parent;
                    rbtree_right_rotate(tree, node);
                &amp;#125;
                rbtree_black(node-&amp;gt;parent);
                rbtree_red(node-&amp;gt;parent-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent-&amp;gt;parent);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    /* ensure the root node being black */
    rbtree_black(tree-&amp;gt;root);
&amp;#125;

static void rbtree_delete_fixup(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* brother = NULL;

    while(node != tree-&amp;gt;root &amp;amp;&amp;amp; rbtree_is_black(node))
    &amp;#123;
        if (node == node-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            brother = node-&amp;gt;parent-&amp;gt;right;
            if (rbtree_is_red(brother))
            &amp;#123;
                rbtree_black(brother);
                rbtree_red(node-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                /* update brother after topologic change of the tree */
                brother = node-&amp;gt;parent-&amp;gt;right;
            &amp;#125;

            if (rbtree_is_black(brother-&amp;gt;left) &amp;amp;&amp;amp; rbtree_is_black(brother-&amp;gt;right))
            &amp;#123;
                rbtree_red(brother);
                /* go upward and keep on fixing color */
                node = node-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (rbtree_is_black(brother-&amp;gt;right))
                &amp;#123;
                    rbtree_black(brother-&amp;gt;left);
                    rbtree_red(brother);
                    rbtree_right_rotate(tree, brother);
                    /* update brother after topologic change of the tree */
                    brother = node-&amp;gt;parent-&amp;gt;right;
                &amp;#125;
                rbtree_copy_color(brother, node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(brother-&amp;gt;right);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                /* end the loop and ensure root is black */
                node = tree-&amp;gt;root;
            &amp;#125;
        &amp;#125;
        /* same as the &amp;quot;if&amp;quot; clause before with &amp;quot;left&amp;quot; and &amp;quot;right&amp;quot; exchanged */
        else
        &amp;#123;
            brother = node-&amp;gt;parent-&amp;gt;left;
            if (rbtree_is_red(brother))
            &amp;#123;
                rbtree_black(brother);
                rbtree_red(node-&amp;gt;parent);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                brother = node-&amp;gt;parent-&amp;gt;left;
            &amp;#125;

            if (rbtree_is_black(brother-&amp;gt;left) &amp;amp;&amp;amp; rbtree_is_black(brother-&amp;gt;right))
            &amp;#123;
                rbtree_red(brother);
                node = node-&amp;gt;parent;
            &amp;#125;
            else
            &amp;#123;
                if (rbtree_is_black(brother-&amp;gt;left))
                &amp;#123;
                    rbtree_black(brother-&amp;gt;right);
                    rbtree_red(brother);
                    rbtree_right_rotate(tree, brother);
                    brother = node-&amp;gt;parent-&amp;gt;left;
                &amp;#125;
                rbtree_copy_color(brother, node-&amp;gt;parent);
                rbtree_black(node-&amp;gt;parent);
                rbtree_black(brother-&amp;gt;left);
                rbtree_left_rotate(tree, node-&amp;gt;parent);
                node = tree-&amp;gt;root;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    rbtree_black(node);
&amp;#125;

/* public methods */
void rbtree_insert_value(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    /* Using ** to know wether the new node will be a left kid */
    /* or a right kid of its parent node. */
    rbtree_node_t** tmp = &amp;amp;tree-&amp;gt;root;
    rbtree_node_t* parent;

    while(*tmp != tree-&amp;gt;sentinel)
    &amp;#123;
        parent = *tmp;
        tmp = (node-&amp;gt;key &amp;lt; parent-&amp;gt;key) ? &amp;amp;parent-&amp;gt;left : &amp;amp;parent-&amp;gt;right;
    &amp;#125;

    /* The pointer knows wether the node should be on the left side */
    /* or on the right one. */
    *tmp = node;
    node-&amp;gt;parent = parent;
    node-&amp;gt;left = tree-&amp;gt;sentinel;
    node-&amp;gt;right = tree-&amp;gt;sentinel;
    rbtree_red(node);
&amp;#125;

void rbtree_insert(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* sentinel = tree-&amp;gt;sentinel;

    /* if the tree is empty */
    if (tree-&amp;gt;root == sentinel)
    &amp;#123;
        tree-&amp;gt;root = node;
        node-&amp;gt;parent = sentinel;
        node-&amp;gt;left = sentinel;
        node-&amp;gt;right = sentinel;
        rbtree_black(node);

        return;
    &amp;#125;

    /* generally */
    tree-&amp;gt;insert(tree, node);
    rbtree_insert_fixup(tree, node);
&amp;#125;

void rbtree_delete(rbtree_t* tree, rbtree_node_t* node)
&amp;#123;
    rbtree_node_t* sentinel = tree-&amp;gt;sentinel;
    /* wether &amp;quot;node&amp;quot; is on the left side or the right one */
    rbtree_node_t** ptr_to_node = NULL;
    /* &amp;quot;cover&amp;quot; is the node which is going to cover &amp;quot;node&amp;quot; */
    rbtree_node_t* cover = NULL;
    /* wether we lossing a red node on the edge of the tree */
    int loss_red = rbtree_is_red(node);
    int is_root = (node == tree-&amp;gt;root);

    /* get &amp;quot;cover&amp;quot; &amp;amp; &amp;quot;loss_red&amp;quot;  */
    /* sentinel in &amp;quot;node&amp;quot;&amp;#39;s kids */
    if (node-&amp;gt;left == sentinel)
    &amp;#123;
        cover = node-&amp;gt;right;
    &amp;#125;
    else if (node-&amp;gt;right == sentinel)
    &amp;#123;
        cover = node-&amp;gt;left;
    &amp;#125;
    /* &amp;quot;node&amp;quot;&amp;#39;s kids are both non-sentinel */
    else
    &amp;#123;
        /* update &amp;quot;node&amp;quot; &amp;amp; &amp;quot;loss_red&amp;quot; &amp;amp; &amp;quot;is_root&amp;quot; &amp;amp; &amp;quot;cover&amp;quot; */
        cover = rbtree_subtree_min(node-&amp;gt;right, sentinel);
        node-&amp;gt;key = cover-&amp;gt;key;
        node-&amp;gt;value = cover-&amp;gt;value;
        node = cover;
        loss_red = rbtree_is_red(node);
        is_root = 0;
        /* move &amp;quot;cover&amp;quot;&amp;#39;s kids */
        /* &amp;quot;cover&amp;quot; can only be a left kid */
        /* and can only have a right non-sentinel kid */
        /* because of function &amp;quot;rbtree_subtree_min&amp;quot; */
        cover = node-&amp;gt;right;
    &amp;#125;

    if (is_root)
    &amp;#123;
        /* update root */
        tree-&amp;gt;root = cover;
    &amp;#125;
    else
    &amp;#123;
        /* downward link */
        if (node == node-&amp;gt;parent-&amp;gt;left)
        &amp;#123;
            node-&amp;gt;parent-&amp;gt;left = cover;
        &amp;#125;
        else
        &amp;#123;
            node-&amp;gt;parent-&amp;gt;right = cover;
        &amp;#125;
    &amp;#125;
    /* upward link */
    cover-&amp;gt;parent = node-&amp;gt;parent;
    /* &amp;quot;cover&amp;quot; may be a sentinel */
    if (cover != sentinel)
    &amp;#123;
        /* set &amp;quot;cover&amp;quot; */
        cover-&amp;gt;left = node-&amp;gt;left;
        cover-&amp;gt;right = node-&amp;gt;right;
        rbtree_copy_color(cover, node);
    &amp;#125;

    /* clear &amp;quot;node&amp;quot; since it&amp;#39;s useless */
    node-&amp;gt;key = -1;
    node-&amp;gt;parent = NULL;
    node-&amp;gt;left = NULL;
    node-&amp;gt;right = NULL;
    node-&amp;gt;value = NULL;

    if (loss_red)
    &amp;#123;
        return;
    &amp;#125;

    /* When lossing a black node on edge */
    /* the fifth rule of red-black tree will be broke. */
    /* So the tree need to be fixed. */
    rbtree_delete_fixup(tree, cover);
&amp;#125;

/* find the node in the tree corresponding to the given key value */
rbtree_node_t* rbtree_find(rbtree_t* tree, rbtree_key_t key)
&amp;#123;
    rbtree_node_t* tmp = tree-&amp;gt;root;
    int step_cnt = 0;

    /* search the binary tree */
    while(tmp != tree-&amp;gt;sentinel)
    &amp;#123;
        /* next line is just fot test */
        // step_cnt++;
        if(key == tmp-&amp;gt;key)
        &amp;#123;
            /* next line is just for test */
            // printf(&amp;quot;step count: %d, color: %s, &amp;quot;, step_cnt, rbtree_is_red(tmp) ? &amp;quot;red&amp;quot; : &amp;quot;black&amp;quot;);
            return tmp;
        &amp;#125;

        tmp = (key &amp;lt; tmp-&amp;gt;key) ? tmp-&amp;gt;left : tmp-&amp;gt;right;
    &amp;#125;

    return NULL;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;  虽然明白nginx源码中100+行的长函数体也是一种避免太多函数调用增加时间空间开销的优化，我还是把所有函数都分类分割成100行以下。增加可读性是一方面，可能也是有点强迫症吧。之后会扩展几个统计方法，像max、min和mid，还会扩展一个遍历方法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面是调用测试，test.c：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;quot;rbtree.h&amp;quot;

int main(int argc, char const *argv[])
&amp;#123;
    rbtree_t t = &amp;#123;&amp;#125;;
    rbtree_node_t s = &amp;#123;&amp;#125;;
    rbtree_init(&amp;amp;t, &amp;amp;s, rbtree_insert_value);

    const int cnt = 10;
    const int max_len = 15;

#define TEST_VALUES &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;, &amp;quot;grape&amp;quot;, &amp;quot;lemon&amp;quot;, &amp;quot;mango&amp;quot;, &amp;quot;pear&amp;quot;, &amp;quot;pineapple&amp;quot;, &amp;quot;strawberry&amp;quot;, &amp;quot;watermelon&amp;quot;&amp;#125;

    /* for gcc */
    char* v[] = TEST_VALUES;
    /* for g++ */
    // char v[][max_len] = TEST_VALUES;

    rbtree_node_t n[cnt];
    int i;
    for (i = 0; i &amp;lt; cnt; i++)
    &amp;#123;
        n[i].key = i+1;
        n[i].value = v[i];
        rbtree_insert(&amp;amp;t, &amp;amp;n[i]);
    &amp;#125;

    rbtree_node_t* p[cnt];

    for (i = 1; i &amp;lt;= cnt; i++)
    &amp;#123;
        printf(&amp;quot;key: %d\n&amp;quot;, i);
        p[i] = rbtree_find(&amp;amp;t, i);
        printf(&amp;quot;value: %s\n&amp;quot;, (p[i] != NULL) ? p[i]-&amp;gt;value : &amp;quot;?&amp;quot;);
    &amp;#125;

    rbtree_delete(&amp;amp;t, &amp;amp;n[5]);

    printf(&amp;quot;\nafter delete 6-&amp;gt;mango:\n\n&amp;quot;);

    for (i = 1; i &amp;lt;= cnt; i++)
    &amp;#123;
        printf(&amp;quot;key: %d\n&amp;quot;, i);
        p[i] = rbtree_find(&amp;amp;t, i);
        printf(&amp;quot;value: %s\n&amp;quot;, (p[i] != NULL) ? p[i]-&amp;gt;value : &amp;quot;?&amp;quot;);
    &amp;#125;

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 解开rbtree_find方法里的测试行注释，顺利执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;key: 1
step count: 3, color: black, value: apple
key: 2
step count: 2, color: black, value: banana
key: 3
step count: 3, color: black, value: cherry
key: 4
step count: 1, color: black, value: grape
key: 5
step count: 3, color: black, value: lemon
key: 6
step count: 2, color: black, value: mango
key: 7
step count: 4, color: black, value: pear
key: 8
step count: 3, color: red, value: pineapple
key: 9
step count: 4, color: black, value: strawberry
key: 10
step count: 5, color: red, value: watermelon

after delete 6-&amp;gt;mango:

key: 1
step count: 3, color: black, value: apple
key: 2
step count: 2, color: black, value: banana
key: 3
step count: 3, color: black, value: cherry
key: 4
step count: 1, color: black, value: grape
key: 5
step count: 3, color: black, value: lemon
key: 6
value: ?
key: 7
step count: 2, color: black, value: pear
key: 8
step count: 4, color: black, value: pineapple
key: 9
step count: 3, color: red, value: strawberry
key: 10
step count: 4, color: black, value: watermelon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面分别是删除6-&amp;gt;mango前的红黑树和删除后的红黑树示意图：&lt;br&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150816200143108&#34; alt=&#34;&#34; height=&#34;422&#34; width=&#34;400&#34; /&gt;&lt;br&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150816200200052&#34; alt=&#34;&#34; height=&#34;331&#34; width=&#34;400&#34; /&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们来做个大量数据的压力测试，注意把rbtree_find方法里的测试行注释掉，不然后果恐怕会比较吓人：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#include &amp;quot;rbtree.h&amp;quot;

int main(int argc, char const *argv[])
&amp;#123;
    double duration;
    double room;

    rbtree_t t = &amp;#123;&amp;#125;;
    rbtree_node_t s = &amp;#123;&amp;#125;;
    rbtree_init(&amp;amp;t, &amp;amp;s, rbtree_insert_value);

    const int cnt = 1&amp;lt;&amp;lt;20;
    const int max_len = 15;

#define TEST_VALUES &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;, &amp;quot;grape&amp;quot;, &amp;quot;lemon&amp;quot;, &amp;quot;mango&amp;quot;, &amp;quot;pear&amp;quot;, &amp;quot;pineapple&amp;quot;, &amp;quot;strawberry&amp;quot;, &amp;quot;watermelon&amp;quot;&amp;#125;

    /* for gcc */
    char* v[] = TEST_VALUES;
    /* for g++ */
    // char v[][max_len] = TEST_VALUES;

    /* Default stack size in Ubuntu Kylin 14.04 is 8MB. */
    /* It&amp;#39;s not enough. So I use memory in heap which offers a lot larger room. */
    rbtree_node_t* n = (rbtree_node_t*)calloc(cnt, sizeof(rbtree_node_t));
    int i;

    long time1 = clock();

    for (i = 0; i &amp;lt; cnt; i++)
    &amp;#123;
        n[i].key = i+1;
        n[i].value = v[i%10];
        rbtree_insert(&amp;amp;t, &amp;amp;n[i]);
    &amp;#125;

    long time2 = clock();
    room = 48.0*cnt/(1&amp;lt;&amp;lt;20);
    duration = (double)(time2 - time1) / CLOCKS_PER_SEC;
    printf(&amp;quot;Inserting %d nodes costs %.2fMB and spends %f seconds.\n&amp;quot;, cnt, room, duration);

    const int search_cnt = 1&amp;lt;&amp;lt;10;
    srand( (unsigned int)time(0) );
    for( i = 0 ; i &amp;lt; search_cnt ; i++ )
    &amp;#123;
        rbtree_find(&amp;amp;t, (rand()%cnt)+1);
    &amp;#125;

    long time3 = clock();
    duration = (double)(time3 - time2) / CLOCKS_PER_SEC;
    printf(&amp;quot;Searching %d nodes among %d spends %f seconds.\n&amp;quot;, search_cnt, cnt, duration);

    const int delete_cnt = 1&amp;lt;&amp;lt;10;
    int nums[delete_cnt];
    int num;
    /* Let&amp;#39;s hash! */
    char* mark = (char*)calloc(cnt, sizeof(char));
    memset(mark, 0, cnt*sizeof(char));
    for(i = 0; i &amp;lt; delete_cnt; i++)
    &amp;#123;
        for(;;)
        &amp;#123;
            num = rand()%cnt;
            if (mark[num] == 0)
            &amp;#123;
                mark[num] = 1;
                nums[i] = num;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    long time4 = clock();
    duration = (double)(time4 - time3) / CLOCKS_PER_SEC;
    printf(&amp;quot;Hash %d times spends %f seconds.\n&amp;quot;, delete_cnt, duration);

    for(i = 0; i &amp;lt; delete_cnt; i++)
    &amp;#123;
        rbtree_delete(&amp;amp;t, &amp;amp;n[nums[i]]);
    &amp;#125;

    long time5 = clock();
    duration = (double)(time5 - time4) / CLOCKS_PER_SEC;
    printf(&amp;quot;Deleting %d nodes among %d spends %f seconds.\n&amp;quot;, delete_cnt, cnt, duration);
    free(mark);
    free(n);

    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 来看看结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;Inserting 1048576 nodes costs 48.00MB and spends 0.425416 seconds.
Searching 1024 nodes among 1048576 spends 0.001140 seconds.
Hash 1024 times spends 0.000334 seconds.
Deleting 1024 nodes among 1048576 spends 0.000783 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 删除比查找还快，耗时只有哈希查找的两倍多点，上百万的插入也耗时不足半秒，嗯我还挺满意的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 写统计和遍历方法去了。&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="rbtree" />
        <category term="C" />
        <updated>2015-08-16T14:06:30.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/08/11/C%E8%AF%AD%E8%A8%80%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97/</id>
        <title>C语言的static关键字</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/08/11/C%E8%AF%AD%E8%A8%80%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; static这个关键字可谓熟悉又陌生，要比较系统地理解它，更好地使用它，需要对它有更加深入的了解。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; C程序一直由下列部分组成：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）正文段——CPU执行的机器指令部分；一个程序只有一个副本；只读，防止程序由于意外事故而修改自身指令。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化数据段（数据段）——在程序中所有赋了初值的全局变量，存放在这里。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）非初始化数据段（bss段）——在程序中没有初始化的全局变量；内核将此段初始化为0。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4）栈——增长方向：自顶向下增长；自动变量以及每次函数调用时所需要保存的信息（返回地址、环境信息）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5）堆——动态存储分配的内存。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&lt;span style=&#34;color:#000000;&#34;&gt;1.&lt;/span&gt;全局静态变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在全局变量之前加上关键字static，全局变量就被定义成为一个全局静态变量。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）内存中的位置：静态存储区。（静态存储区在整个程序运行期间都存在）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化：未经初始化的全局静态变量会被程序自动初始化为0。（自动对象的值是任意的，除非他被显示初始化）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）作用域：全局静态变量在声明他的文件之外是不可见的。准确地讲从定义之处开始到文件结尾。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 定义全局静态变量的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）不会被其他文件所访问，修改。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）其他文件中可以使用相同名字的变量，不会发生冲突。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&lt;span style=&#34;color:#000000;&#34;&gt;2.&lt;/span&gt;局部静态变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在局部变量之前加上关键字static，局部变量就被定义成为一个局部静态变量。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）内存中的位置：静态存储区。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化：未经初始化的全局静态变量会被程序自动初始化为0。（自动对象的值是任意的，除非他被显示初始化）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域随之结束。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#FF0000;&#34;&gt;注：当static用来修饰局部变量的时候，它就改变了局部变量的存储位置，从原来的栈中存放改为静态存储区。但是局部静态变量在离开作用域之后，并没有被销毁，而是仍然驻留在内存当中，直到程序结束，只不过我们不能再对他进行访问。&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当static用来修饰全局变量的时候，它就改变了全局变量的作用域（在声明他的文件之外是不可见的），但是没有改变它的存放位置，还是在静态存储区中。&lt;/p&gt;
&lt;p&gt;3.&lt;span style=&#34;color:#FF0000;&#34;&gt;静态函数&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在函数的返回类型前加上关键字static，函数就被定义成为静态函数。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 函数的定义和声明默认情况下是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 定义静态函数的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）其他文件中可以定义相同名字的函数，不会发生冲突&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）静态函数不能被其他文件所用。存储说明符auto，register，extern，static，对应两种存储期：自动存储期和静态存储期。auto和register对应自动存储期。具有自动存储期的变量在进入声明该变量的程序块时被建立，它在该程序块活动时存在，退出该程序块时撤销。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键字extern和static用来说明具有静态存储期的变量和函数。用static声明的局部变量具有静态存储持续期（static storage duration），或静态范围（static extent）。虽然他的值在函数调用之间保持有效，但是其名字的可视性仍限制在其局部域内。静态局部对象在程序执行到该对象的声明处时被首次初始化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 由于static变量的以上特性，可实现一些特定功能。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 统计次数功能：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 声明函数的一个局部变量，并设为static类型，作为一个计数器，这样函数每次被调用的时候就可以进行计数。这是统计函数被调用次数的最好的办法，因为这个变量是和函数息息相关的，而函数可能在多个不同的地方被调用，所以从调用者的角度来统计比较困难。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用静态函数的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 静态函数会被自动分配在一个一直使用的存储区，直到退出应用程序实例，避免了调用函数时压栈出栈，速度快很多。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键字“static”，译成中文就是“静态的”，所以内部函数又称静态函数。但此处“static”的含义不是指存储方式，而是指对函数的作用域仅局限于本文件。使用内部函数的好处是：不同的人编写不同的函数时，不用担心自己定义的函数，是否会与其它文件中的函数同名，因为同名也没有关系。&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="C" />
        <category term="static" />
        <category term="内存分布" />
        <updated>2015-08-11T12:09:08.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/08/06/%E3%80%90%E4%B8%89%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1-%E2%80%94%E2%80%94ngx-int-t%E4%B8%8Engx-rbtree-t/</id>
        <title>【三】nginx的数据结构(1)——ngx_int_t与ngx_rbtree_t</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/08/06/%E3%80%90%E4%B8%89%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1-%E2%80%94%E2%80%94ngx-int-t%E4%B8%8Engx-rbtree-t/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 就来挑两个特别的数据结构ngx_int_t、ngx_rbtree_t作为研读nginx源码的开始吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 面对&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;.&amp;#x2F;src&amp;#x2F;core&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录中&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;71&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个源文件，有点无从下手。浏览包含主函数的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx.c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;文件，发现&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;使用了很多自行封装的数据结构，不弄清楚这是些什么样的数据结构就很难理解主函数中操作的意义。于是我们挑看起来基础的数据结构开始研究。组织&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;所有数据结构的是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_core.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;文件。它首先包含了&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，我们在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中发现了三个类型定义。&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-ngx-int-t、ngx-uint-t、ngx-flag-t&#34;&gt;&lt;a href=&#34;#1-ngx-int-t、ngx-uint-t、ngx-flag-t&#34; class=&#34;headerlink&#34; title=&#34;1. ngx_int_t、ngx_uint_t、ngx_flag_t&#34;&gt;&lt;/a&gt;1. ngx_int_t&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_uint_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_flag_t&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx.c&lt;span style=&#34;font-family:宋体;&#34;&gt;中看到的第一个陌生数据类型是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_int_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中找到了它的定义。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_int_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_uint_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_flag_t&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 顺藤摸瓜找到了三个数据类型的定义。本科&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;入门教学中并没有对&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&amp;#x2F;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的介绍，我在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;stdint.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;头文件中发现了它们的定义。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Types for `void *&amp;#x27; pointers.  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; __WORDSIZE == 64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#  &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;   &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#  &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先注释说这两种类型是&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“void&amp;nbsp;*”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的指针类型，尽管字面上看，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;确实是整型指针类型和无符号整型指针类型，但是让人摸不着头脑，为什么要使用整型作为整型的指针类型呢？先放一放，看后面的宏，机器是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位字长则&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;long&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;long&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，正好我机器上是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;sizeof()&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;了一下，是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位，小于&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位字长的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，查表得知&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器下&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器下为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节。那么&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&amp;#x2F;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;应该是会随着平台字长变化而发生对应变化的整型类型。经过了解，发现《深入分析&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;内核源码》中对此的解释是，系统内核在操作内存时，将内存当做一个大数组，而指针就是数组索引&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;&amp;#x2F;&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;下标，内核程序员使用这种特殊的整型来接受内存地址值、操作内存相比使用指针更加直观，不容易犯错。看起来，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中，只是单纯的想要使用一些平台相关的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;类型变量而已。&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-ngx-rbtree-t&#34;&gt;&lt;a href=&#34;#2-ngx-rbtree-t&#34; class=&#34;headerlink&#34; title=&#34;2. ngx_rbtree_t&#34;&gt;&lt;/a&gt;2. ngx_rbtree_t&lt;/h1&gt;&lt;h2 id=&#34;2-1-什么是红黑树&#34;&gt;&lt;a href=&#34;#2-1-什么是红黑树&#34; class=&#34;headerlink&#34; title=&#34;2.1 什么是红黑树&#34;&gt;&lt;/a&gt;2.1 &lt;span style=&#34;font-family:宋体;&#34;&gt;什么是红黑树&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 作为一个曾经常年在&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ACM&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;比赛里划水的退役队员，对红黑树这样的有名数据结构还是比较敏感的。红黑树是一种特殊约束形式下的平衡二叉查找树实现。学过数据结构课的同学应该知道，课本上的最早的自平衡二叉树&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树严格的要求子树的高度差不超过&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，以获得根结点到所有叶结点距离基本相同（平衡）的特性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 红黑树不追求严格的平衡，而是通过&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个约束实现基本平衡：&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①结点是红色或黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②根是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③叶结点是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ④红色结点的子结点都是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ⑤任一结点到其叶结点的简单路径中黑色结点数相同。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AVL树根到叶结点最长距离与最短距离的比不超过2。红黑树的约束也保证了这一特性（最长路径是红黑相间，最短路径是全黑，这种情况下最长路径刚好是最短路径的2倍长）。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 既然是平衡二叉查找树的一种实现，那么红黑树自然是内部有序的，同时跟AVL树一样支持O(log2n)时间复杂度的查找、插入和删除。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 相比AVL树，红黑可以保证在每次插入或删除操作之后的重平衡过程中，全树拓扑结构的更新仅涉及常数个结点。尽管最坏情况下需对O(log2n)个结点重染色，但就分摊意义（平均效率）而言，仅为O(1)个。但是因为没有严格约束树的平衡特性，红黑树的左右子树高度差比AVL树要大。&lt;/p&gt;
&lt;h2 id=&#34;2-2-ngx-rbtree-h&#34;&gt;&lt;a href=&#34;#2-2-ngx-rbtree-h&#34; class=&#34;headerlink&#34; title=&#34;2.2 ngx_rbtree.h&#34;&gt;&lt;/a&gt;2.2 ngx_rbtree.h&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 机会难得，我们就把nginx的源码作为素材来深入了解一下红黑树的实现。首先是结点的结构：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_uint_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_int_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_int_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_node_s&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_node_s&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_t&lt;/span&gt;    key;&lt;span class=&#34;hljs-comment&#34;&gt;//平台相关的无符号整型关键字&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *left;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *right;&lt;span class=&#34;hljs-comment&#34;&gt;//&amp;lt;span style=&amp;amp;quot;font-family:宋体;&amp;amp;quot;&amp;gt;右&amp;lt;/span&amp;gt;子结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点指针&lt;/span&gt;&lt;br&gt;    u_char          color;&lt;span class=&#34;hljs-comment&#34;&gt;//结点颜色&lt;/span&gt;&lt;br&gt;    u_char          data;&lt;span class=&#34;hljs-comment&#34;&gt;//结点数据&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后是红黑树的结构定义：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_s&lt;/span&gt;  &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_t&lt;/span&gt;;  &lt;span class=&#34;hljs-comment&#34;&gt;//“_s”是结构体“_t”是类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//下面是一个函数指针变量类型的定义，是红黑树插入函数的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//参数有树根结点、插入结点和哨兵结点的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(*ngx_rbtree_insert_pt)&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *root,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_s&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *root;    &lt;span class=&#34;hljs-comment&#34;&gt;//根节点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel;    &lt;span class=&#34;hljs-comment&#34;&gt;//哨兵结点指针&lt;/span&gt;&lt;br&gt;    ngx_rbtree_insert_pt   insert;  &lt;span class=&#34;hljs-comment&#34;&gt;//插入函数指针&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 将函数指针变量作为结构体成员变量以达成可以把结构体当做类来使用（既有成员变量又有成员方法）的效果，这种手法在&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的源码中相当普遍。关于函数，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;还有一种更神奇的手段&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;——&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;宏：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbtree_init(tree, s, i)                 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    ngx_rbtree_sentinel_init(s);                \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;root = s;                       \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;sentinel = s;                   \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;insert = i&lt;span class=&#34;hljs-comment&#34;&gt;//这里insert函数指针的赋值实现了多态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 借助宏来达成内联函数的效果（函数实现如果比较简单，就干脆把实现过程整个搬到类中），令人费解的是，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;不是没有内联关键字，甚至同一个头文件中就有一个内联函数的定义。研究内联函数之前，下面还有几个宏要看一看：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_red(node)           ((node)-&amp;gt;color = 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_black(node)         ((node)-&amp;gt;color = 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_is_red(node)            ((node)-&amp;gt;color)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_is_black(node)          (!ngx_rbt_is_red(node))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_copy_color(n1, n2)      (n1-&amp;gt;color = n2-&amp;gt;color)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* a sentinel must be black */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbtree_sentinel_init(node)  ngx_rbt_black(node)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;源码中的变量都很容易看懂以至于我们不怎么需要查资料或找注释。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;置&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红置&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染黑，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;则结点为红色，不为红色的则为黑色，复制结点颜色即复制&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;值，哨兵结点一定要染成黑色。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_min&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (node-&amp;gt;left != sentinel) &amp;#123;&lt;br&gt;        node = node-&amp;gt;left;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; node;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ngx_inline是一个宏，实际值就是关键字inline。这个内联函数非常好懂，目的看起来是寻找以任意结点为根结点的子树中结点值最小的结点。实现方法是找到红黑树子树最边缘的左子结点。那么我们有理由猜测，哨兵结点是空结点或边缘标识。&lt;/p&gt;
&lt;h2 id=&#34;2-3-红黑树的结点插入&#34;&gt;&lt;a href=&#34;#2-3-红黑树的结点插入&#34; class=&#34;headerlink&#34; title=&#34;2.3 红黑树的结点插入&#34;&gt;&lt;/a&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;2.3 红黑树的结点插入&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来我们来深入&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_rbtree.c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;看看&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;如何实现几个关键的红黑树方法。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_t&lt;/span&gt; *tree, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//根结点指针的指针，或者根结点指针数组，会有多个根结点吗，令人费解&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//临时结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//哨兵结点指针，推测哨兵在每次查询时可能都不一样，也许指待插位置&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//变量不分行，我写注释都很不方便&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  **root, *temp, *sentinel;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* a binary tree insert */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    root = (&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; **) &amp;amp;tree-&amp;gt;root;&lt;span class=&#34;hljs-comment&#34;&gt;//树根指针的指针赋给了root&lt;/span&gt;&lt;br&gt;    sentinel = tree-&amp;gt;sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//哨兵指针赋给了哨兵指针&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (*root == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//特判，如果根是哨兵，即树是空的&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//新插入的结点变成了根&lt;/span&gt;&lt;br&gt;        node-&amp;gt;left = sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//新结点的左子结点是哨兵&lt;/span&gt;&lt;br&gt;        node-&amp;gt;right = sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//新结点的右子结点也是哨兵&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node);&lt;span class=&#34;hljs-comment&#34;&gt;//新根染黑&lt;/span&gt;&lt;br&gt;        *root = node;&lt;span class=&#34;hljs-comment&#34;&gt;//确认新结点为新根&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//插入结束&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//树初始化时给了insert指针一个函数地址&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//查看前面的宏ngx_rbtree_init(tree, s, i)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//发现只是把指定结点染黑，同时赋为根和哨兵，给insert指针指定一个函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//ngx_rbtree.c中有两个参数表符合的可选函数：插入值、插入计时器值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//稍后来看两种插入分别如何实现又有什么区别&lt;/span&gt;&lt;br&gt;    tree-&amp;gt;&lt;span class=&#34;hljs-built_in&#34;&gt;insert&lt;/span&gt;(*root, node, sentinel);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* re-balance tree */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点不是根且其父结点是红的，循环&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (node != *root &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(node-&amp;gt;parent)) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点是左子结点，获得父结点的右兄弟&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;parent == node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;br&gt;            temp = node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的右兄弟是红的&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的右兄弟染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点染红&lt;/span&gt;&lt;br&gt;                node = node-&amp;gt;parent-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点成为当前结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的右兄弟是黑的&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;right) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点是右子结点&lt;/span&gt;&lt;br&gt;                    node = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点成为新node&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, node);&lt;span class=&#34;hljs-comment&#34;&gt;//node左旋&lt;/span&gt;&lt;br&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点的父结点染红&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点的父结点右旋&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点是右子结点，获得父结点的左兄弟&lt;/span&gt;&lt;br&gt;            temp = node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的左兄弟是红的&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的左兄弟染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点染红&lt;/span&gt;&lt;br&gt;                node = node-&amp;gt;parent-&amp;gt;parent;&lt;br&gt;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的左兄弟是黑的&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点是左子结点&lt;/span&gt;&lt;br&gt;                    node = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点成为当前结点&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, node);&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;//当前结点右旋&lt;/span&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//当前结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//当前结点父结点的父结点染红&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//当前结点的父结点的父结点左旋&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(*root);&lt;span class=&#34;hljs-comment&#34;&gt;//根结点染黑&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后是对应ngx_rbtree_insert_pt指针的基础的结点插入函数：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_insert_value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *temp, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  **p;&lt;span class=&#34;hljs-comment&#34;&gt;//虽然无关紧要，但两层指针令人费解&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( ;; ) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//无条件循环或者说死循环，等同于while(1)但节省了一个字符&lt;/span&gt;&lt;br&gt;&lt;br&gt;        p = (node-&amp;gt;key &amp;lt; temp-&amp;gt;key) ? &amp;amp;temp-&amp;gt;left : &amp;amp;temp-&amp;gt;right;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (*p == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//在二叉树中查找新结点合适的叶结点位置&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        temp = *p;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//令新结点占据合适的哨兵位置成为新的叶结点，染红，产生新哨兵&lt;/span&gt;&lt;br&gt;    *p = node;&lt;br&gt;    node-&amp;gt;parent = temp;&lt;br&gt;    node-&amp;gt;left = sentinel;&lt;br&gt;    node-&amp;gt;right = sentinel;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ngx_rbtree_insert_timer_value&lt;span style=&#34;font-family:宋体;&#34;&gt;函数跟&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_rbtree_insert_value&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;函数唯一区别就是判断大小时，采用了两个值相减，避免溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上是插入结点涉及的函数，老实说我不太喜欢这么长的函数实现，换我自己写肯定分块了。分支操作太多，看代码逻辑已经乱了，我们需要画几个图。首先，如果树为空：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150806074055339&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果树中只有一个根结点：&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074132691&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&amp;gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074207378&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&amp;lt;B&amp;lt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染黑&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;右旋。右旋函数如下：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; **root, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  *temp;&lt;br&gt;&lt;br&gt;    temp = node-&amp;gt;left;&lt;br&gt;    node-&amp;gt;left = temp-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点指向原左子结点的右结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (temp-&amp;gt;right != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左子结点的右结点不为哨兵&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;right-&amp;gt;parent = node;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点的右子结点挂在右旋结点上&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    temp-&amp;gt;parent = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点挂在右旋结点的父结点上&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右旋结点为根节点&lt;/span&gt;&lt;br&gt;        *root = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//根节点赋为左子结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;right) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右旋结点为右子结点&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent-&amp;gt;right = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点挂父结点右边&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//否则左子结点挂父结点左边&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent-&amp;gt;left = temp;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    temp-&amp;gt;right = node;&lt;span class=&#34;hljs-comment&#34;&gt;//右旋结点挂左子结点右边&lt;/span&gt;&lt;br&gt;    node-&amp;gt;parent = temp;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 显然&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;将成为新的根，左&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;右&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074443292&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&amp;lt;C&amp;lt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，会先做一次左旋再做一次右旋，其实除开染色过程，我觉得这跟&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树的插入过程没有什么区别：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074520668&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其他的插入情景要么与以上几个对称，要么发生在树的其他子树中，实际过程完全一样。LL&lt;span style=&#34;font-family:宋体;&#34;&gt;型右旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;RR&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型左旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;LR&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型先右旋后左旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;RL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型先左旋后右旋。&lt;/span&gt;与&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树不同的是，插入结点时红黑树左旋或右旋的判定条件明确为附近一两个结点的颜色，其他过程没有任何区别。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-4-红黑树的结点删除&#34;&gt;&lt;a href=&#34;#2-4-红黑树的结点删除&#34; class=&#34;headerlink&#34; title=&#34;2.4 红黑树的结点删除&#34;&gt;&lt;/a&gt;2.4 红黑树的结点删除&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 据说红黑树和&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树的区别主要体现在删除节点时，我们就来看一看。&lt;/span&gt;我刚说什么来着，删除结点的函数体更长了，足足&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;165&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;行，我决定分段研究，&lt;/span&gt;先看第一部分：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;left == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左子结点是哨兵或左右子结点都是哨兵&lt;/span&gt;&lt;br&gt;    temp = node-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子结点，后面让它接替node位置&lt;/span&gt;&lt;br&gt;    subst = node;&lt;span class=&#34;hljs-comment&#34;&gt;//node赋给subst&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;right == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右子结点是哨兵&lt;/span&gt;&lt;br&gt;    temp = node-&amp;gt;left;&lt;span class=&#34;hljs-comment&#34;&gt;//获得左子结点，后面让它接替node位置&lt;/span&gt;&lt;br&gt;    subst = node;&lt;span class=&#34;hljs-comment&#34;&gt;//node赋给subst&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左右子结点都不是哨兵&lt;/span&gt;&lt;br&gt;    subst = &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_min&lt;/span&gt;(node-&amp;gt;right, sentinel);&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子树中最小的结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;left != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右子树的最小结点的左子结点不是哨兵&lt;/span&gt;&lt;br&gt;        temp = subst-&amp;gt;left;&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子树的最小结点的左子结点&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//否则获得右子树最小结点的右子结点&lt;/span&gt;&lt;br&gt;        temp = subst-&amp;gt;right;&lt;br&gt;    &amp;#125;&lt;span class=&#34;hljs-comment&#34;&gt;//看起来subst将被从原位置删掉然后接替node的位置&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们来看看&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;要干什么用：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是根&lt;/span&gt;&lt;br&gt;    *root = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//temp接替根&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* DEBUG stuff */&lt;/span&gt;&lt;br&gt;    node-&amp;gt;left = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//清空了待删结点&lt;/span&gt;&lt;br&gt;    node-&amp;gt;right = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    node-&amp;gt;key = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;red = &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(subst);&lt;span class=&#34;hljs-comment&#34;&gt;//获得subst是否是红色&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == subst-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是左子结点&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;parent-&amp;gt;left = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂到subst位置&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是右子结点&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;parent-&amp;gt;right = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂到subst位置&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下一段：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == node) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是待删结点&lt;/span&gt;&lt;br&gt;    temp-&amp;gt;parent = subst-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//接替结点直接接替，删除完成&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst不是待删结点&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;parent == node) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst的父结点就是待删结点&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//接替结点挂在subst上&lt;/span&gt;&lt;br&gt;     &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点比subst的父结点更高&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;parent = subst-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂在subst的父结点上&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//subst接替待删结点node的位置，复制待删结点跟周围结点的关系&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;left = node-&amp;gt;left;&lt;br&gt;    subst-&amp;gt;right = node-&amp;gt;right;&lt;br&gt;    subst-&amp;gt;parent = node-&amp;gt;parent;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(subst, node);&lt;span class=&#34;hljs-comment&#34;&gt;//复制颜色&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点是根&lt;/span&gt;&lt;br&gt;        *root = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst接替根&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点不是根，subst接替它&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;br&gt;            node-&amp;gt;parent-&amp;gt;left = subst;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            node-&amp;gt;parent-&amp;gt;right = subst;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;left != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst左子结点不是哨兵&lt;/span&gt;&lt;br&gt;        subst-&amp;gt;left-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst的左子结点放弃node，挂上来&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;right != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst右子结点不是哨兵&lt;/span&gt;&lt;br&gt;        subst-&amp;gt;right-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst右子结点放弃node，挂上来&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//清空待删结点node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* DEBUG stuff */&lt;/span&gt;&lt;br&gt;node-&amp;gt;left = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;right = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;key = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是红色，红黑树约束依然被遵守，删除工作就可以结束了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (red) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 看起来结点的删除过程已经顺利完成了，但是如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是黑色，我们需要修复红黑树的约束。下面这一段代码的主角是接替&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位置的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;结点：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//当subst的接替结点不是根且为黑色，循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (temp != *root &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (temp == temp-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp是左子结点&lt;/span&gt;&lt;br&gt;        w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得其右兄弟&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(w)) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp的右兄弟是红色&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp的右兄弟&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(temp-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的父结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp的父结点左旋&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的新右兄弟&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果temp右兄弟的左右子结点都是黑的&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left) &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的右兄弟&lt;/span&gt;&lt;br&gt;            temp = temp-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的父结点为新temp&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp右兄弟的子结点不全为黑&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果其右子结点是黑色&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;left);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑左子结点&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的右兄弟&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, w);&lt;span class=&#34;hljs-comment&#34;&gt;//右兄弟右旋&lt;/span&gt;&lt;br&gt;                w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的新右兄弟&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp右兄弟复制temp父结点颜色&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(w, temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp父结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;right);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp右兄弟的右子结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp父结点左旋&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            temp = *root;&lt;span class=&#34;hljs-comment&#34;&gt;//获得根&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp是右子结点，做对称的事&lt;/span&gt;&lt;br&gt;        w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(w)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left) &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;br&gt;            temp = temp-&amp;gt;parent;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;right);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, w);&lt;br&gt;                w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;            &amp;#125;&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(w, temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;left);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            temp = *root;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑当前temp&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 跟插入结点时一样乱，我们梳理一下。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先忽略红黑树的约束进行删除：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①如果删除的是一个叶结点，即没有后继或后继全为哨兵的结点，直接删除即可；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②如果只有一个后继，让其替换待删除结点即可；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③如果有两个后继，需要从树的边缘选择一个结点，有两种等价的选择，待删结点左子树的最大结点和右子树的最小结点，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;选择的是后者，以这个结点的键与值（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;value&amp;#x2F;data&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）替换待删结点的键与值，然后删除这个替身。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不论是①、②情景中的待删结点还是③情景中替身，在源码中都是subst。下面要围绕着它来进行讨论。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上是不考虑红黑树平衡性的纯拓扑结构变动。下面要考虑是否调整树的拓扑结构使树重新平衡，是否调整结点的颜色使树重新符合红黑树的约束条件。我们知道红黑树有一条关键约束是任意结点到其子树中叶结点的简单路径中黑色结点数相同。那么如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是一个红色结点，我们不需要对红黑树做任何调整，它仍是一棵红黑树；如果&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是黑色的，所有经过&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的简单路径上都会少一个黑色结点数，所以需要进行调整。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面来根据不同情景分情况讨论，因为二叉树的情景左右颠倒时调整方式也可以左右颠倒，我们只讨论&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是左子结点的情况。设刚接替&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的新右兄弟为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;W&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。从经过简化的源码来看，关于结点颜色的变化很令人费解，我们不妨先来看一看：&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①W为红色：将W染黑，将X与W的父结点X-&amp;gt;parent染红，X-&amp;gt;parent左旋，W重设为X的新右兄弟，然后转入情景①、②或③；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②W为黑色，W两个后继都是黑色：将W染红，X重设为X-&amp;gt;parent；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③W为黑色，W右子结点为黑色：将W左子结点染黑，将W染红，W右旋，W重设为X的新右兄弟，然后将X-&amp;gt;parent的颜色赋给W，将X-&amp;gt;parent染黑，X-&amp;gt;parent左旋，根赋给temp；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ④W为黑色，W右子结点为红色：将W左子结点染黑，将W染红，W右旋，W重设为X的新右兄弟，然后将X-&amp;gt;parent的颜色赋给W，将X-&amp;gt;parent染黑，将W右子结点染黑，X-&amp;gt;parent左旋，根赋给temp。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后还要把temp染黑。我们可以看到情景①中进行了一次左旋，情景②只进行了染色，情景③、④都进行了一次右旋和一次左旋。情景①处理结束时一定还要转入别的情景，情景②、③、④的出现则标志着本次调整的结束。那么，红黑树删除结点后的调整过程中，依情景①循环出现的次数，调整过程中旋转的最多见的次数将是1次、2次、3次，再往上次数越多越罕见（依情景①循环出现的次数），最多旋转次数将可能到达树高即log2n次。生产环境中，删除结点后平均每次调整中旋转的次数就像分析源码之前提到的，将是常数规模的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来我打算以逐步翻新版本的方式重写红黑树，更精细、直观地了解红黑树这一数据结构。而在重写之前，我们需要了解，nginx的红黑中所有的叶结点，都是哨兵（sentinel），这在调整红黑树时达成了对红黑树的一种优化。通过增加一层全黑的子结点，红黑树中实际有值的子树里，就允许在子结点出现红色结点了。虽然我没有证明，但这常数规模地增加了删除结点时的旋转次数，也促进了插入新结点时进行调整的概率（增加了在红色结点下插入新结点的概率），同样增加了旋转的次数。而旋转将压缩红黑树子树的高度，提高查询效率。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在由朴素到精致地重写红黑树的过程中，我将由少到多地考虑使用nginx对红黑树的优化，或者加入我自己的优化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;从杭州回来后翻了CLRS（算法导论），发现：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，nginx的红黑树中，sentinel结点并非独创的优化手段，CLRS的红黑树也是带哨兵的，可以说，一般的，我们令红黑树带哨兵。目的是更直截了当的满足红黑树的叶结点全黑约束，同时更方便标识树的边缘。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;其次，所有的叶结点都是由同一个哨兵结点代表，节省了空间开销，省去了叶结点逐一染色的麻烦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;另外，之前我感到迷惑的static inline组合用法，在oschina.net获得了解释：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.inline函数是不能像传统的函数那样放在.c中然后在.h中给出接口在其余文件中调用的,因为inline函数其实是跟宏定义类似，被调用时尝试在调用处直接展开整个函数体，不存在所谓的函数入口。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.因为第一点，会出现一个问题，如果inline函数在两个不同的文件中出现。也就是说一个头文件被两个不同的源文件包含，则会出现重名，链接失败。static inline 的用法就能很好的解决这个问题。使用static修饰符，函数仅在文件内部可见，不会污染命名空间。可以理解为一个inline函数在不同的源文件里面生成了不同的实例，而且名字是完全相同的 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;总结一下。功能上，我们需要微型函数被大量调用时尝试内联展开以节省压栈弹栈的开销；实践中，为了防止不同文件中函数同名时的链接错误，我们需要加上static关键字的限制。（尽管inline关键字的效果有所不同，c99标准和gcc下static inline组合是兼容的，效果相同）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;之前看到nginx源码中函数参数有双重指针一直很费解，今天研究了一下才发现原因。ngx_rbtree_t中，root经常使用双重结点指针，也就是根结点地址的地址。如果树的修改过程中，根结点地址被别的结点地址替换掉，需要重新设置根的地址&lt;em&gt;root。假设ngx_rbtree_t中的根地址参数是&lt;/em&gt;root单层指针，进入函数体时将是一个值传递，出函数体时无论函数体中如何更改根的地址，都是无效的，只有对根结点内容的修改能保留下来。所以要么使用双重指针作为根地址的参数，要么提供树结构体的地址，变相提供双重指针作为参数，当然可以提供树的结构体对象本身作为参数，但是值传递是要复制整个值对象的，显然当结构体比较大时这样做将明显增加开销。nginx选择双重指针而非结构体指针来避免树结构体内的变量遍历寻址，进一步提高效率。&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="ngx_int_t" />
        <category term="rbtree" />
        <category term="C" />
        <updated>2015-08-05T23:18:00.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/07/23/%E3%80%90%E4%BA%8C%E3%80%91nginx%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%B5%8F%E8%A7%88/</id>
        <title>【二】nginx源码文件结构浏览</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/07/23/%E3%80%90%E4%BA%8C%E3%80%91nginx%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E6%B5%8F%E8%A7%88/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 要读大项目的源码，最好还是先把项目文件组织结构弄清楚，这样后面找源码会比较方便，对整体项目的架构也能有一个具体一些的概念。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我下载的&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;源码版本不可考，按日期来看是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2015&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;年&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;月的最新版本。解压包获得源码文件夹，进入根目录发现有几个子目录：&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;contrib&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;docs&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;misc&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。从字面上猜测，是自动机或脚本（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;auto&amp;nbsp;script&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）、配置文件（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;configuration&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）、支持文件（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;contributions&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）、文档（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）、杂项（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;miscellaneous&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）、源码（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;source&amp;nbsp;code&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1、浏览源码文件夹根目录&#34;&gt;&lt;a href=&#34;#1、浏览源码文件夹根目录&#34; class=&#34;headerlink&#34; title=&#34;1、浏览源码文件夹根目录&#34;&gt;&lt;/a&gt;1&lt;span style=&#34;font-family:宋体;&#34;&gt;、浏览源码文件夹根目录&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 按照惯例，我选择先看看文档，但是&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;doc&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录里并没有详细的离线文档，只有&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;官网的链接和一些看不懂的小文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 杂项&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;misc&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;里也只有看不太懂的一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;GNUmakefile&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;README&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; contrib&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录里有一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;geo2nginx.pl&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;geo&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;模块的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CSV&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;数据库格式转换&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;perl&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;脚本），一套编码转换文件（包括两个编码映射表和一个编码转换&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;perl&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;脚本），和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;vim&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;专用语法高亮配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; conf&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录里有几个编码映射表、变量映射表和一个服务器配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; auto&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录里有包括服务器安装脚本在内的许多脚本，现在看脚本还比较吃力，所以只简单浏览一下。我们发现&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;支持很多主流的操作系统平台：苹果的开源系统&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;darwin&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、重要的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Unix&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;分支&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;freebsd&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、大多数版本已经开源的又一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Unix&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;分支&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;solaris&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、用户占有率最高的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;win32&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; src&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录果然都是需要研究的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;源码，下面我们会深入浏览。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2、浏览src子目录&#34;&gt;&lt;a href=&#34;#2、浏览src子目录&#34; class=&#34;headerlink&#34; title=&#34;2、浏览src子目录&#34;&gt;&lt;/a&gt;2&lt;span style=&#34;font-family:宋体;&#34;&gt;、浏览&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还是来看一下&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录下有哪些子目录：&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;core&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;mail&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;misc&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。还是来按照字面意思猜测一下：核心（主函数、数据结构、主要方法）、事件（事件处理机制）、超文本传输协议（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;相关）、邮件（邮件相关）、杂项（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;google&amp;nbsp;perftools&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;相关源码）、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;数据库、操作系统（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Unix&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Win32&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;两类系统的系统调用程序源码）、流（意义不明）。看起来&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;.&amp;#x2F;src&amp;#x2F;core&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录对研究源码来说是一个不错的开始。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &lt;span style=&#34;font-family:宋体;&#34;&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150723165913000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34; /&gt;&lt;/span&gt;
    图&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2&amp;nbsp;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;源码文件结构图&lt;/span&gt;
&lt;/p&gt;</content>
        <category term="nginx" />
        <updated>2015-07-23T07:01:33.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/07/23/%E3%80%90%E4%B8%80%E3%80%91nginx%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/</id>
        <title>【一】nginx核心架构概述</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/07/23/%E3%80%90%E4%B8%80%E3%80%91nginx%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 毕业前，毕设完成后，我闲极无聊接触了一下socket编程，用C++的Qt框架写了玩具一样的TCP和UDP通信客户端。跟直系学长电话聊天时被建议深挖一下socket，尝试走走后端或者架构师路线。问该怎么深挖，答研究源码，要学习socket相关知识，研究服务器源码是最合适不过的了。至于选择哪个服务器，经过考量调查，发现比起比较沉重庞大的apache，nginx更加小巧，也非常优秀。于是在开始正式吃源码之前，我先开始了一番自我科普工作。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;1、进程模型&#34;&gt;&lt;a href=&#34;#1、进程模型&#34; class=&#34;headerlink&#34; title=&#34;1、进程模型&#34;&gt;&lt;/a&gt;1&lt;span style=&#34;font-family:宋体;&#34;&gt;、进程模型&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，默认的，与其他服务器一样，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Unix&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;下的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;也以&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;daemon&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（守护进程）的形式持续在后台运行。虽然&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;也可以以调试为目的关掉后台模式，使用前台模式，甚至可以通过配置取消&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程（后面会详细解释），使&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;以单进程的形式工作。但是这些与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;引以为傲的架构关系不大，这里按下不表。尽管&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;也支持多线程方式，我们还是着重来了解下其默认的多进程方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;在启动后会创建一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程（主进程）和若干个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程（从进程）。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程主要负责管理&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程，具体来说就是接收来自管理员的信号并转发给对应&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程；监控&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程的工作状态，在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程异常终止时重新创建并启动&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程。而&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程负责处理基本的网络事件。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程之间优先级对等、相互独立，公平竞争来自客户端的请求，每个请求只由一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程处理。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程模型示意图如图&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;所示。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
    &amp;nbsp;&lt;img src=&#34;http://img.blog.csdn.net/20150723104541689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34; /&gt;
    图&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&amp;nbsp;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程模型示意图&lt;/span&gt;
&lt;/p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; worker&lt;span style=&#34;font-family:宋体;&#34;&gt;进程的数量可以进行设置，一般设置与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;核数一致，这一原则与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的事件处理模型有关。后面会继续介绍&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的事件处理模型。&lt;/span&gt;
### 2&lt;span style=&#34;font-family:宋体;&#34;&gt;、信号与请求&lt;/span&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;与外界互动无非通过两种接口界面：来自管理员的信号和来自客户端的请求。下面我们举例说明&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是如何处理信号与请求的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 管理员要控制&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;需要与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程通信，向&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程发送指令信号即可。比如，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;0.8&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;版本之前使用&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;kill&amp;nbsp;-HUP pid&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;命令来重启&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。使用这个命令重启&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;将实现从容地重启过程，期间服务不中断。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程在接到&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;HUP&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;指令后首先会重新加载配置文件，然后启动新的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程，向旧的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程发送停止信号。这时新的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程开始接收网络请求，旧的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程停止接收新的请求，等到处理完当前请求后，旧的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程就退出销毁了。在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;0.8&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;版本以后，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;引入了一系列命令行参数以方便管理服务器，比如&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;.&amp;#x2F;nginx&amp;nbsp;-s&amp;nbsp;reload&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;.&amp;#x2F;nginx&amp;nbsp;-s&amp;nbsp;stop&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，分别用来重启和停止&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。执行操作命令时，我们实际上启动了一个新的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程，这个进程在解析命令中的参数后，自行向&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程发送相应的信号，达成与之前手动发送信号相同的效果。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;3、请求与事件&#34;&gt;&lt;a href=&#34;#3、请求与事件&#34; class=&#34;headerlink&#34; title=&#34;3、请求与事件&#34;&gt;&lt;/a&gt;3&lt;span style=&#34;font-family:宋体;&#34;&gt;、请求与事件&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 服务器最常处理的就是&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;端口&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;协议的请求了，&lt;/span&gt; 以此为例说明一下&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;处理请求的过程。首先，每一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程都是从&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;fork&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（分叉）而成的，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程中先建立好需要监听的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（套接字，即&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;IP&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;地址&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;端口号）和相应的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;listenfd&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（监听文件描述符或句柄）。我们知道&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;通信中每个进程都要分配一个端口号，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;分配工作就由&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程来完成。所有&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;listenfd&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;在新的连接到来时变得可读，为保证只有一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程处理连接，各&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程在注册&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;listenfd&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;读事件前先要抢&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;accept_mutex&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（接受连接互斥锁），一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程抢注连接成功后，开始读取请求、解析请求、处理请求并反馈数据给客户端。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;4、进程模型分析&#34;&gt;&lt;a href=&#34;#4、进程模型分析&#34; class=&#34;headerlink&#34; title=&#34;4、进程模型分析&#34;&gt;&lt;/a&gt;4&lt;span style=&#34;font-family:宋体;&#34;&gt;、进程模型分析&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;使用但不仅仅使用多进程请求处理模型（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;PPC&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;），每个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程一次只处理一个请求，使得请求间资源独立不需要上锁，进程间互不影响能并行处理请求。一个请求处理失败导致一个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程异常退出，不会使服务中断，而是由&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程立刻重新启动一个新的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程，降低了服务器面临的整体风险，使服务更加稳定。但是相比多线程模型（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;TPC&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;），系统开销略大，效率略低，这需要借助别的手段来改进。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;5、nginx的高并发机制——异步非阻塞事件机制&#34;&gt;&lt;a href=&#34;#5、nginx的高并发机制——异步非阻塞事件机制&#34; class=&#34;headerlink&#34; title=&#34;5、nginx的高并发机制——异步非阻塞事件机制&#34;&gt;&lt;/a&gt;5&lt;span style=&#34;font-family:宋体;&#34;&gt;、nginx的高并发机制&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;——&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;异步非阻塞事件机制&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IIS&lt;span style=&#34;font-family:宋体;&#34;&gt;的事件处理机制是多线程，每个请求独占一个工作线程。由于多线程比较占用内存，线程间的上下文切换（反复的对寄存器组进行保护现场和恢复现场的操作）带来的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;开销也很大，多线程机制的服务器在面临数千并发量时，会给系统造成很大的压力，高并发性能并不算理想，当然如果硬件足够出色，能够提供足够的系统资源，系统压力也就不再是问题了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们深入到系统层面讨论一下多进程与多线程，阻塞式机制与非阻塞式机制的区别。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 熟悉操作系统的同学应该了解，多线程的出现是为了在资源充足的情况下更充分的调度使用&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，尤其对提高多核&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的利用率十分有益。但是线程是系统任务的最小单位，而进程却是系统分配资源的最小单位，这就意味着多线程将面临一个很大的问题：当线程数增多，资源需求变大，这些线程的母进程可能无法立即一口气申请到足够所有线程使用的资源，而当系统手里没有足够的资源满足一个进程时，它会选择让整个进程都等着。这时即使系统资源足够一部分线程正常工作，母进程也无法申请到这些资源，导致所有线程一起等待。直白的说，使用多线程，进程内的线程间可以灵活的进行调度（虽然增加了线程死锁的风险和线程切换的开销），但是却无法保证母进程在逐渐庞大沉重时还能够在系统中得到合理的调度。由此可见，多线程确实可以提高&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;利用率，但是并不是解决服务器高并发请求问题的理想解决方案，且不说在高并发状态下&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的高利用率也无法维持。以上是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;IIS&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的多线程阻塞式事件机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;的多进程机制保证了每个请求独立申请系统资源，一旦满足条件，每一个请求都可以立即被处理，即非阻塞处理。但是创建进程需要的资源开销会比线程多一些，为了节约进程数，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;使用了一些进程调度算法，使&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;事件处理不仅仅靠多进程机制，而是非阻塞的多进程机制。下面我们就来具体的引入&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的异步非阻塞事件处理机制。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;6、epoll&#34;&gt;&lt;a href=&#34;#6、epoll&#34; class=&#34;headerlink&#34; title=&#34;6、epoll&#34;&gt;&lt;/a&gt;6&lt;span style=&#34;font-family:宋体;&#34;&gt;、epoll&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Linux&lt;span style=&#34;font-family:宋体;&#34;&gt;下，言高并发的高性能网络必&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;也正是使用了&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;模型作为网络事件的处理机制。我们先看看&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是怎么来的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最早的调度方案是异步忙轮询方式，即持续的轮询&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;事件也就是遍历&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;集合的访问状态，显然服务器空闲时这一方案造成了无谓的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;开销。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 后来，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;select&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;作为调度进程和提高&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;利用率的代理先后出现，字面上看，一个是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;选择&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，一个是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;投票&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，它们的本质相同，都是轮询&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;集合并处理请求，与之前不同的地方在于，它们能够监视&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;事件，空闲时轮询线程将被阻塞，而一个或多个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;事件到来时则被唤醒，摆脱了&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;忙轮询&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;忙&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，成为异步轮询方式。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;select&amp;#x2F;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;模型轮询的是整个&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（文件描述符）集合即&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;集合，网络事件处理效率随着并发请求数线性降低，所以使用一个宏来限制最大并发连接数。同时，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;select&amp;#x2F;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;模型的内核空间与用户空间通信方式为内存复制，带来较高的开销。以上缺点催生了新模型的产生。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; epoll&lt;span style=&#34;font-family:宋体;&#34;&gt;可以认为是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;event&amp;nbsp;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的简写，&lt;/span&gt;是&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;内核为处理大批量文件描述符而作了改进的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;下多路复用&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&lt;/span&gt;&amp;#x2F;O&lt;span style=&#34;font-family:宋体;&#34;&gt;接口&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;select&amp;#x2F;poll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;CPU&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;利用率。&lt;/span&gt;首先，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;没有最大并发连接数的限制，上限是可以打开的最大文件数，这与硬件内存大小有关，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1GB&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的机器上大约是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;10w&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;左右；然后是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;最显著的优点，它只对&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;活跃&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进行操作，因为只有那些被内核&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;读写事件异步唤醒的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;才被放入&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ready&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;队列，准备进入&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;worker&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;进程被处理，这在实际生产环境中节省了大量轮询开销，极大的提高了事件处理效率；最后，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;使用共享内存（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;MMAP&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）的方式实现内核空间与用户空间的通信，省掉了内存复制的开销。额外的，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中使用&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ET&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;（边缘触发）工作模式即快速工作模式。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ET&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;模式下，只支持非阻塞&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;就绪即由内核通过&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;发送通知，经过某些操作使&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;不再是就绪状态时也会发送通知，但如果一直没有&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;I&amp;#x2F;O&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;操作导致&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;FD&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;变为未就绪状态将不再发送通知。总的来说，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;下是基于事件，利用&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;epoll&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;处理网络事件的。&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="select/poll" />
        <category term="epoll" />
        <updated>2015-07-23T03:01:28.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/06/09/Qt%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFundefined-reference-to-vtable-for-XXXXX-XXX/</id>
        <title>Qt出现错误undefined reference to &#39;vtable for XXXXX.XXX&#39;</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/06/09/Qt%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFundefined-reference-to-vtable-for-XXXXX-XXX/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果新建一个类，继承了某个类，在这个类的头文件中式没有 Q_OBJECT宏声明的，如果想使用signal-slot信号，就需要添加Q_OBJECT宏，但是添加了这个宏后，就可能会出现这种错误，“undefined reference to vtable for XXXXX”的编译错误。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这是因为在Makefile里面没有这个类并没有Q_OBJECT信息，所以在执行Makefile时候也就没有moc xxx.h这条命令，最终导致连接失败。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 知道了这个原因后，解决方法就很简单了，重新运行qmake，生成Makefile，然后再编译就OK了。&lt;/p&gt;
</content>
        <category term="Qt" />
        <category term="signal-slot" />
        <category term="Q_OBJECT" />
        <updated>2015-06-09T05:19:10.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.bipedalbit.net/2015/05/03/win-Linux%E4%B8%8B%E5%8E%BB%E6%8E%89codeigniter%E6%A1%86%E6%9E%B6%E7%BD%91%E7%AB%99URL%E4%B8%AD%E7%9A%84index-php/</id>
        <title>win/Linux下去掉codeigniter框架网站URL中的index.php</title>
        <link rel="alternate" href="https://blog.bipedalbit.net/2015/05/03/win-Linux%E4%B8%8B%E5%8E%BB%E6%8E%89codeigniter%E6%A1%86%E6%9E%B6%E7%BD%91%E7%AB%99URL%E4%B8%AD%E7%9A%84index-php/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用PHP的codeigniter框架后在试验阶段遇到的第一个问题就是，无法隐藏地址栏中的index.php，这让我浑身难受。多方调查之后有了一套解决方案。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;Linux&#34;&gt;&lt;a href=&#34;#Linux&#34; class=&#34;headerlink&#34; title=&#34;Linux:&#34;&gt;&lt;/a&gt;Linux:&lt;/h1&gt;&lt;h2 id=&#34;一-Apache&#34;&gt;&lt;a href=&#34;#一-Apache&#34; class=&#34;headerlink&#34; title=&#34;一.Apache&#34;&gt;&lt;/a&gt;一.Apache&lt;/h2&gt;&lt;h3 id=&#34;1-启用rewrite模块&#34;&gt;&lt;a href=&#34;#1-启用rewrite模块&#34; class=&#34;headerlink&#34; title=&#34;1.启用rewrite模块&#34;&gt;&lt;/a&gt;1.启用rewrite模块&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 手动启用是在Apache配置文件里把“LoadModule rewrite_module modules&amp;#x2F;mod_rewrite.so”解注释。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一些LAMP套件也提供更方便的模块管理。&lt;/p&gt;
&lt;h3 id=&#34;2-rewrite规则设置&#34;&gt;&lt;a href=&#34;#2-rewrite规则设置&#34; class=&#34;headerlink&#34; title=&#34;2.rewrite规则设置&#34;&gt;&lt;/a&gt;2.rewrite规则设置&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在 CI 的根目录下，即在 index.php ，system的同级目录下，建立.htaccess，直接建立该文件名不会成功，可以从application或system文件夹里复制一个过来，再修改内容。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 内容如下（ CI 手册上也有介绍）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;RewriteEngine On
RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-f
RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-d
RewriteRule ^(.*)$ index.php/$1 [L]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;如果.htaccess文件不是在www的根目录下，例如是： &lt;a href=&#34;http://localhost/123/&#34;&gt;http://localhost/123/&lt;/a&gt; index.php ，第三行需要改写为&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;RewriteRule ^(.*)$ /123/ index.php /$1 [L]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-配置codeigniter&#34;&gt;&lt;a href=&#34;#3-配置codeigniter&#34; class=&#34;headerlink&#34; title=&#34;3.配置codeigniter&#34;&gt;&lt;/a&gt;3.配置codeigniter&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 找到CI文件夹&amp;#x2F;application&amp;#x2F;config&amp;#x2F;config.php。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;$config[&amp;#39;index_page&amp;#39;] =&amp;quot; index.php &amp;quot;;&lt;/code&gt;改写成&lt;code&gt;$config[&amp;#39;index_page&amp;#39;] = &amp;quot;&amp;quot;; &lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-重启Apache&#34;&gt;&lt;a href=&#34;#4-重启Apache&#34; class=&#34;headerlink&#34; title=&#34;4.重启Apache&#34;&gt;&lt;/a&gt;4.重启Apache&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这个各显神通，不累述，如Ubuntu的&lt;code&gt; $ sudo /etc/init.d/apache2 restart&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-nginx&#34;&gt;&lt;a href=&#34;#二-nginx&#34; class=&#34;headerlink&#34; title=&#34;二.nginx&#34;&gt;&lt;/a&gt;二.nginx&lt;/h2&gt;&lt;h3 id=&#34;1-rewrite规则设置&#34;&gt;&lt;a href=&#34;#1-rewrite规则设置&#34; class=&#34;headerlink&#34; title=&#34;1.rewrite规则设置&#34;&gt;&lt;/a&gt;1.rewrite规则设置&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 修改nginx配置文件，在nginx.conf的SERVER段中添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;location /&amp;#123;
   if (-f $request_filename) &amp;#123;
       expires max;
       break;
   &amp;#125;
   if (!-e $request_filename) &amp;#123;
       rewrite ^/(.*)$ /index.php/$1 last;
   &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3同上&#34;&gt;&lt;a href=&#34;#2-3同上&#34; class=&#34;headerlink&#34; title=&#34;2.3同上&#34;&gt;&lt;/a&gt;2.3同上&lt;/h3&gt;&lt;h3 id=&#34;4-重启nginx&#34;&gt;&lt;a href=&#34;#4-重启nginx&#34; class=&#34;headerlink&#34; title=&#34;4.重启nginx&#34;&gt;&lt;/a&gt;4.重启nginx&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;/usr/local/nginx/sbin/nginx -s reload&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Windows：&#34;&gt;&lt;a href=&#34;#Windows：&#34; class=&#34;headerlink&#34; title=&#34;Windows：&#34;&gt;&lt;/a&gt;Windows：&lt;/h1&gt;&lt;h2 id=&#34;一-IIS7&#34;&gt;&lt;a href=&#34;#一-IIS7&#34; class=&#34;headerlink&#34; title=&#34;一.IIS7&#34;&gt;&lt;/a&gt;一.IIS7&lt;/h2&gt;&lt;h3 id=&#34;1-配置web-config&#34;&gt;&lt;a href=&#34;#1-配置web-config&#34; class=&#34;headerlink&#34; title=&#34;1.配置web.config&#34;&gt;&lt;/a&gt;1.配置web.config&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;system.webServer&amp;gt;
        &amp;lt;rewrite&amp;gt;
            &amp;lt;rules&amp;gt;
                &amp;lt;rule name=&amp;quot;OrgPage&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
                    &amp;lt;match url=&amp;quot;^(.*)$&amp;quot; /&amp;gt;
                    &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
                    &amp;lt;add input=&amp;quot;&amp;#123;HTTP_HOST&amp;#125;&amp;quot; pattern=&amp;quot;^(.*)$&amp;quot; /&amp;gt;
                    &amp;lt;add input=&amp;quot;&amp;#123;REQUEST_FILENAME&amp;#125;&amp;quot; matchType=&amp;quot;IsFile&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
                    &amp;lt;add input=&amp;quot;&amp;#123;REQUEST_FILENAME&amp;#125;&amp;quot; matchType=&amp;quot;IsDirectory&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
                    &amp;lt;/conditions&amp;gt;
                    &amp;lt;action type=&amp;quot;Rewrite&amp;quot; url=&amp;quot;index.php/&amp;#123;R:1&amp;#125;&amp;quot; /&amp;gt;
                &amp;lt;/rule&amp;gt;
            &amp;lt;/rules&amp;gt;
        &amp;lt;/rewrite&amp;gt;
    &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-配置codeigniter&#34;&gt;&lt;a href=&#34;#2-配置codeigniter&#34; class=&#34;headerlink&#34; title=&#34;2.配置codeigniter&#34;&gt;&lt;/a&gt;2.配置codeigniter&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 找到CI文件夹&amp;#x2F;application&amp;#x2F;config&amp;#x2F;config.php。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;$config[&amp;#39;index_page&amp;#39;] =&amp;quot; index.php &amp;quot;;&lt;/code&gt;改写成&lt;code&gt;$config[&amp;#39;index_page&amp;#39;] = &amp;quot;&amp;quot;; &lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-Apache&#34;&gt;&lt;a href=&#34;#二-Apache&#34; class=&#34;headerlink&#34; title=&#34;二.Apache&#34;&gt;&lt;/a&gt;二.Apache&lt;/h2&gt;&lt;h3 id=&#34;1-启用rewrite模块-1&#34;&gt;&lt;a href=&#34;#1-启用rewrite模块-1&#34; class=&#34;headerlink&#34; title=&#34;1.启用rewrite模块&#34;&gt;&lt;/a&gt;1.启用rewrite模块&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 手动启用是在Apache配置文件里把“LoadModule rewrite_module modules&amp;#x2F;mod_rewrite.so”解注释。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 一些WAMP套件也提供更方便的模块管理。&lt;/p&gt;
&lt;h3 id=&#34;2-rewrite规则设置-1&#34;&gt;&lt;a href=&#34;#2-rewrite规则设置-1&#34; class=&#34;headerlink&#34; title=&#34;2.rewrite规则设置&#34;&gt;&lt;/a&gt;2.rewrite规则设置&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 找到Apache的虚拟主机配置文件，如Apache-20\conf\extra\httpd-vhosts.conf。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 修改要配置的虚拟主机的Directory标签，如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;lt;Directory G:/PHP/123&amp;gt;
    #隐藏index.php相关
    RewriteEngine On
    RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-f
    RewriteCond %&amp;#123;REQUEST_FILENAME&amp;#125; !-d
    RewriteRule ^(.*)$ index.php/$1 [L]
    Options FollowSymLinks
    #访问权限设置
    #不允许别人修改页面
    AllowOverride None
    #依次考察允许和拒绝ip访问的设置情况
    order allow,deny
    #允许来自所有ip的访问
    Allow from all
    #deny from 202.18 即拒绝来自202.18打头的ip的访问
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-配置codeigniter-1&#34;&gt;&lt;a href=&#34;#3-配置codeigniter-1&#34; class=&#34;headerlink&#34; title=&#34;3.配置codeigniter&#34;&gt;&lt;/a&gt;3.配置codeigniter&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 找到CI文件夹&amp;#x2F;application&amp;#x2F;config&amp;#x2F;config.php。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;$config[&amp;#39;index_page&amp;#39;] =&amp;quot; index.php &amp;quot;;&lt;/code&gt;改写成&lt;code&gt;$config[&amp;#39;index_page&amp;#39;] = &amp;quot;&amp;quot;; &lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-重启Apache-1&#34;&gt;&lt;a href=&#34;#4-重启Apache-1&#34; class=&#34;headerlink&#34; title=&#34;4.重启Apache&#34;&gt;&lt;/a&gt;4.重启Apache&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; win下Apache有图形界面，很方便。&lt;/p&gt;
</content>
        <category term="nginx" />
        <category term="codeigniter" />
        <category term="php" />
        <category term="IIS7" />
        <category term="apache" />
        <updated>2015-05-03T04:31:20.000Z</updated>
    </entry>
</feed>
