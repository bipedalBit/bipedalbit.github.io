<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hacking to the gate! • Posts by &#34;ngx_int_t&#34; tag</title>
        <link>https://blog.bipedalbit.net</link>
        <description>Bipedal Bit&#39;s blog</description>
        <language>zh-CN</language>
        <pubDate>Thu, 06 Aug 2015 07:18:00 +0800</pubDate>
        <lastBuildDate>Thu, 06 Aug 2015 07:18:00 +0800</lastBuildDate>
        <category>Qt</category>
        <category>signal-slot</category>
        <category>Q_OBJECT</category>
        <category>nginx</category>
        <category>select/poll</category>
        <category>epoll</category>
        <category>ngx_int_t</category>
        <category>rbtree</category>
        <category>C</category>
        <category>static</category>
        <category>内存分布</category>
        <category>sublime</category>
        <category>C++</category>
        <category>makefile</category>
        <category>node.js</category>
        <category>github</category>
        <category>socket.io</category>
        <category>Web请求处理机制</category>
        <category>同步/异步</category>
        <category>阻塞/非阻塞</category>
        <category>事件驱动模型</category>
        <category>BP神经网络</category>
        <category>机器学习</category>
        <category>python</category>
        <category>pybrain</category>
        <category>c++11</category>
        <category>多线程</category>
        <category>ubuntu</category>
        <category>debian</category>
        <category>apt-file</category>
        <category>cin</category>
        <category>cout</category>
        <category>scanf</category>
        <category>printf</category>
        <category>进制转换</category>
        <category>人工神经网络</category>
        <category>人机博弈</category>
        <category>Maxmin</category>
        <category>AlphaBeta</category>
        <category>PVS</category>
        <category>MTD(f)</category>
        <category>位域</category>
        <category>bitset</category>
        <category>vector&amp;lt;bool&amp;gt;</category>
        <category>网络爬虫</category>
        <category>类脑</category>
        <category>codeigniter</category>
        <category>php</category>
        <category>IIS7</category>
        <category>apache</category>
        <category>模拟登录</category>
        <category>proxy</category>
        <category>domain</category>
        <category>DNS</category>
        <category>hexo</category>
        <category>vps</category>
        <category>dropbox</category>
        <category>ffmpeg</category>
        <category>板绘</category>
        <category>sai</category>
        <category>琪露诺</category>
        <category>LLM</category>
        <category>ollama</category>
        <category>open-webui</category>
        <category>oneapi</category>
        <category>mcpserver</category>
        <category>NAS</category>
        <category>minio</category>
        <category>CDN</category>
        <category>waline</category>
        <item>
            <guid isPermalink="true">https://blog.bipedalbit.net/2015/08/06/%E3%80%90%E4%B8%89%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1-%E2%80%94%E2%80%94ngx-int-t%E4%B8%8Engx-rbtree-t/</guid>
            <title>【三】nginx的数据结构(1)——ngx_int_t与ngx_rbtree_t</title>
            <link>https://blog.bipedalbit.net/2015/08/06/%E3%80%90%E4%B8%89%E3%80%91nginx%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1-%E2%80%94%E2%80%94ngx-int-t%E4%B8%8Engx-rbtree-t/</link>
            <category>nginx</category>
            <category>ngx_int_t</category>
            <category>rbtree</category>
            <category>C</category>
            <pubDate>Thu, 06 Aug 2015 07:18:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 就来挑两个特别的数据结构ngx_int_t、ngx_rbtree_t作为研读nginx源码的开始吧。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 面对&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;.&amp;#x2F;src&amp;#x2F;core&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;子目录中&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;71&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个源文件，有点无从下手。浏览包含主函数的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx.c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;文件，发现&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;使用了很多自行封装的数据结构，不弄清楚这是些什么样的数据结构就很难理解主函数中操作的意义。于是我们挑看起来基础的数据结构开始研究。组织&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;所有数据结构的是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_core.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;文件。它首先包含了&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，我们在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中发现了三个类型定义。&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-ngx-int-t、ngx-uint-t、ngx-flag-t&#34;&gt;&lt;a href=&#34;#1-ngx-int-t、ngx-uint-t、ngx-flag-t&#34; class=&#34;headerlink&#34; title=&#34;1. ngx_int_t、ngx_uint_t、ngx_flag_t&#34;&gt;&lt;/a&gt;1. ngx_int_t&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_uint_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_flag_t&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx.c&lt;span style=&#34;font-family:宋体;&#34;&gt;中看到的第一个陌生数据类型是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_int_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx_config.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中找到了它的定义。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_int_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_uint_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_flag_t&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 顺藤摸瓜找到了三个数据类型的定义。本科&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;入门教学中并没有对&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&amp;#x2F;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的介绍，我在&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;stdint.h&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;头文件中发现了它们的定义。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* Types for `void *&amp;#x27; pointers.  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; __WORDSIZE == 64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#  &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;   &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;ifndef&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;intptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#  &lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; __intptr_t_defined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;hljs-type&#34;&gt;uintptr_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先注释说这两种类型是&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;“void&amp;nbsp;*”&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的指针类型，尽管字面上看，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;确实是整型指针类型和无符号整型指针类型，但是让人摸不着头脑，为什么要使用整型作为整型的指针类型呢？先放一放，看后面的宏，机器是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位字长则&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;long&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;long&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，正好我机器上是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;sizeof()&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;了一下，是&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位，小于&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位字长的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，查表得知&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器下&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位编译器下为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个字节。那么&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;intptr_t&amp;#x2F;uintptr_t&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;应该是会随着平台字长变化而发生对应变化的整型类型。经过了解，发现《深入分析&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;Linux&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;内核源码》中对此的解释是，系统内核在操作内存时，将内存当做一个大数组，而指针就是数组索引&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;&amp;#x2F;&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;下标，内核程序员使用这种特殊的整型来接受内存地址值、操作内存相比使用指针更加直观，不容易犯错。看起来，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;中，只是单纯的想要使用一些平台相关的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;、&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;unsigned&amp;nbsp;int&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;类型变量而已。&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-ngx-rbtree-t&#34;&gt;&lt;a href=&#34;#2-ngx-rbtree-t&#34; class=&#34;headerlink&#34; title=&#34;2. ngx_rbtree_t&#34;&gt;&lt;/a&gt;2. ngx_rbtree_t&lt;/h1&gt;&lt;h2 id=&#34;2-1-什么是红黑树&#34;&gt;&lt;a href=&#34;#2-1-什么是红黑树&#34; class=&#34;headerlink&#34; title=&#34;2.1 什么是红黑树&#34;&gt;&lt;/a&gt;2.1 &lt;span style=&#34;font-family:宋体;&#34;&gt;什么是红黑树&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 作为一个曾经常年在&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ACM&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;比赛里划水的退役队员，对红黑树这样的有名数据结构还是比较敏感的。红黑树是一种特殊约束形式下的平衡二叉查找树实现。学过数据结构课的同学应该知道，课本上的最早的自平衡二叉树&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树严格的要求子树的高度差不超过&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，以获得根结点到所有叶结点距离基本相同（平衡）的特性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 红黑树不追求严格的平衡，而是通过&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;个约束实现基本平衡：&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①结点是红色或黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②根是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③叶结点是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ④红色结点的子结点都是黑色；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ⑤任一结点到其叶结点的简单路径中黑色结点数相同。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AVL树根到叶结点最长距离与最短距离的比不超过2。红黑树的约束也保证了这一特性（最长路径是红黑相间，最短路径是全黑，这种情况下最长路径刚好是最短路径的2倍长）。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 既然是平衡二叉查找树的一种实现，那么红黑树自然是内部有序的，同时跟AVL树一样支持O(log2n)时间复杂度的查找、插入和删除。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 相比AVL树，红黑可以保证在每次插入或删除操作之后的重平衡过程中，全树拓扑结构的更新仅涉及常数个结点。尽管最坏情况下需对O(log2n)个结点重染色，但就分摊意义（平均效率）而言，仅为O(1)个。但是因为没有严格约束树的平衡特性，红黑树的左右子树高度差比AVL树要大。&lt;/p&gt;
&lt;h2 id=&#34;2-2-ngx-rbtree-h&#34;&gt;&lt;a href=&#34;#2-2-ngx-rbtree-h&#34; class=&#34;headerlink&#34; title=&#34;2.2 ngx_rbtree.h&#34;&gt;&lt;/a&gt;2.2 ngx_rbtree.h&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 机会难得，我们就把nginx的源码作为素材来深入了解一下红黑树的实现。首先是结点的结构：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_uint_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_t&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_int_t&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_int_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_node_s&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_node_s&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_key_t&lt;/span&gt;    key;&lt;span class=&#34;hljs-comment&#34;&gt;//平台相关的无符号整型关键字&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *left;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *right;&lt;span class=&#34;hljs-comment&#34;&gt;//&amp;lt;span style=&amp;amp;quot;font-family:宋体;&amp;amp;quot;&amp;gt;右&amp;lt;/span&amp;gt;子结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;   *parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点指针&lt;/span&gt;&lt;br&gt;    u_char          color;&lt;span class=&#34;hljs-comment&#34;&gt;//结点颜色&lt;/span&gt;&lt;br&gt;    u_char          data;&lt;span class=&#34;hljs-comment&#34;&gt;//结点数据&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后是红黑树的结构定义：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_s&lt;/span&gt;  &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_t&lt;/span&gt;;  &lt;span class=&#34;hljs-comment&#34;&gt;//“_s”是结构体“_t”是类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//下面是一个函数指针变量类型的定义，是红黑树插入函数的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//参数有树根结点、插入结点和哨兵结点的指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(*ngx_rbtree_insert_pt)&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *root,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ngx_rbtree_s&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *root;    &lt;span class=&#34;hljs-comment&#34;&gt;//根节点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel;    &lt;span class=&#34;hljs-comment&#34;&gt;//哨兵结点指针&lt;/span&gt;&lt;br&gt;    ngx_rbtree_insert_pt   insert;  &lt;span class=&#34;hljs-comment&#34;&gt;//插入函数指针&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 将函数指针变量作为结构体成员变量以达成可以把结构体当做类来使用（既有成员变量又有成员方法）的效果，这种手法在&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的源码中相当普遍。关于函数，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;还有一种更神奇的手段&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;——&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;宏：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbtree_init(tree, s, i)                 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    ngx_rbtree_sentinel_init(s);                \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;root = s;                       \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;sentinel = s;                   \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    (tree)-&amp;gt;insert = i&lt;span class=&#34;hljs-comment&#34;&gt;//这里insert函数指针的赋值实现了多态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 借助宏来达成内联函数的效果（函数实现如果比较简单，就干脆把实现过程整个搬到类中），令人费解的是，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;不是没有内联关键字，甚至同一个头文件中就有一个内联函数的定义。研究内联函数之前，下面还有几个宏要看一看：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_red(node)           ((node)-&amp;gt;color = 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_black(node)         ((node)-&amp;gt;color = 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_is_red(node)            ((node)-&amp;gt;color)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_is_black(node)          (!ngx_rbt_is_red(node))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbt_copy_color(n1, n2)      (n1-&amp;gt;color = n2-&amp;gt;color)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* a sentinel must be black */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;define&lt;/span&gt; ngx_rbtree_sentinel_init(node)  ngx_rbt_black(node)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; nginx&lt;span style=&#34;font-family:宋体;&#34;&gt;源码中的变量都很容易看懂以至于我们不怎么需要查资料或找注释。&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;置&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红置&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染黑，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;则结点为红色，不为红色的则为黑色，复制结点颜色即复制&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;值，哨兵结点一定要染成黑色。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_min&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (node-&amp;gt;left != sentinel) &amp;#123;&lt;br&gt;        node = node-&amp;gt;left;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; node;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ngx_inline是一个宏，实际值就是关键字inline。这个内联函数非常好懂，目的看起来是寻找以任意结点为根结点的子树中结点值最小的结点。实现方法是找到红黑树子树最边缘的左子结点。那么我们有理由猜测，哨兵结点是空结点或边缘标识。&lt;/p&gt;
&lt;h2 id=&#34;2-3-红黑树的结点插入&#34;&gt;&lt;a href=&#34;#2-3-红黑树的结点插入&#34; class=&#34;headerlink&#34; title=&#34;2.3 红黑树的结点插入&#34;&gt;&lt;/a&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;2.3 红黑树的结点插入&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来我们来深入&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_rbtree.c&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;看看&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;如何实现几个关键的红黑树方法。&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_insert&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_t&lt;/span&gt; *tree, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//根结点指针的指针，或者根结点指针数组，会有多个根结点吗，令人费解&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//临时结点指针&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//哨兵结点指针，推测哨兵在每次查询时可能都不一样，也许指待插位置&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//变量不分行，我写注释都很不方便&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  **root, *temp, *sentinel;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* a binary tree insert */&lt;/span&gt;&lt;br&gt;&lt;br&gt;    root = (&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; **) &amp;amp;tree-&amp;gt;root;&lt;span class=&#34;hljs-comment&#34;&gt;//树根指针的指针赋给了root&lt;/span&gt;&lt;br&gt;    sentinel = tree-&amp;gt;sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//哨兵指针赋给了哨兵指针&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (*root == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//特判，如果根是哨兵，即树是空的&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//新插入的结点变成了根&lt;/span&gt;&lt;br&gt;        node-&amp;gt;left = sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//新结点的左子结点是哨兵&lt;/span&gt;&lt;br&gt;        node-&amp;gt;right = sentinel;&lt;span class=&#34;hljs-comment&#34;&gt;//新结点的右子结点也是哨兵&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node);&lt;span class=&#34;hljs-comment&#34;&gt;//新根染黑&lt;/span&gt;&lt;br&gt;        *root = node;&lt;span class=&#34;hljs-comment&#34;&gt;//确认新结点为新根&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//插入结束&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//树初始化时给了insert指针一个函数地址&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//查看前面的宏ngx_rbtree_init(tree, s, i)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//发现只是把指定结点染黑，同时赋为根和哨兵，给insert指针指定一个函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//ngx_rbtree.c中有两个参数表符合的可选函数：插入值、插入计时器值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//稍后来看两种插入分别如何实现又有什么区别&lt;/span&gt;&lt;br&gt;    tree-&amp;gt;&lt;span class=&#34;hljs-built_in&#34;&gt;insert&lt;/span&gt;(*root, node, sentinel);&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* re-balance tree */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点不是根且其父结点是红的，循环&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (node != *root &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(node-&amp;gt;parent)) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点是左子结点，获得父结点的右兄弟&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;parent == node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;br&gt;            temp = node-&amp;gt;parent-&amp;gt;parent-&amp;gt;right;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的右兄弟是红的&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的右兄弟染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点染红&lt;/span&gt;&lt;br&gt;                node = node-&amp;gt;parent-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点成为当前结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的右兄弟是黑的&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;right) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点是右子结点&lt;/span&gt;&lt;br&gt;                    node = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点成为新node&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, node);&lt;span class=&#34;hljs-comment&#34;&gt;//node左旋&lt;/span&gt;&lt;br&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点的父结点染红&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//node的父结点的父结点右旋&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点是右子结点，获得父结点的左兄弟&lt;/span&gt;&lt;br&gt;            temp = node-&amp;gt;parent-&amp;gt;parent-&amp;gt;left;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的左兄弟是红的&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的左兄弟染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//父结点的父结点染红&lt;/span&gt;&lt;br&gt;                node = node-&amp;gt;parent-&amp;gt;parent;&lt;br&gt;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果父结点的左兄弟是黑的&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果新结点是左子结点&lt;/span&gt;&lt;br&gt;                    node = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//父结点成为当前结点&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, node);&lt;br&gt;                    &lt;span class=&#34;hljs-comment&#34;&gt;//当前结点右旋&lt;/span&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(node-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//当前结点染黑&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//当前结点父结点的父结点染红&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node-&amp;gt;parent-&amp;gt;parent);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, node-&amp;gt;parent-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//当前结点的父结点的父结点左旋&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(*root);&lt;span class=&#34;hljs-comment&#34;&gt;//根结点染黑&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后是对应ngx_rbtree_insert_pt指针的基础的结点插入函数：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_insert_value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *temp, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  **p;&lt;span class=&#34;hljs-comment&#34;&gt;//虽然无关紧要，但两层指针令人费解&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; ( ;; ) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//无条件循环或者说死循环，等同于while(1)但节省了一个字符&lt;/span&gt;&lt;br&gt;&lt;br&gt;        p = (node-&amp;gt;key &amp;lt; temp-&amp;gt;key) ? &amp;amp;temp-&amp;gt;left : &amp;amp;temp-&amp;gt;right;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (*p == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//在二叉树中查找新结点合适的叶结点位置&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;break&lt;/span&gt;;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        temp = *p;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//令新结点占据合适的哨兵位置成为新的叶结点，染红，产生新哨兵&lt;/span&gt;&lt;br&gt;    *p = node;&lt;br&gt;    node-&amp;gt;parent = temp;&lt;br&gt;    node-&amp;gt;left = sentinel;&lt;br&gt;    node-&amp;gt;right = sentinel;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(node);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ngx_rbtree_insert_timer_value&lt;span style=&#34;font-family:宋体;&#34;&gt;函数跟&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;ngx_rbtree_insert_value&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;函数唯一区别就是判断大小时，采用了两个值相减，避免溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上是插入结点涉及的函数，老实说我不太喜欢这么长的函数实现，换我自己写肯定分块了。分支操作太多，看代码逻辑已经乱了，我们需要画几个图。首先，如果树为空：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://img.blog.csdn.net/20150806074055339&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果树中只有一个根结点：&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074132691&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&amp;gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074207378&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&amp;lt;B&amp;lt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染黑&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;染红，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;右旋。右旋函数如下：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;static&lt;/span&gt; ngx_inline &lt;span class=&#34;hljs-type&#34;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; **root, &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *sentinel,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt; *node)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ngx_rbtree_node_t&lt;/span&gt;  *temp;&lt;br&gt;&lt;br&gt;    temp = node-&amp;gt;left;&lt;br&gt;    node-&amp;gt;left = temp-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点指向原左子结点的右结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (temp-&amp;gt;right != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左子结点的右结点不为哨兵&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;right-&amp;gt;parent = node;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点的右子结点挂在右旋结点上&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    temp-&amp;gt;parent = node-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点挂在右旋结点的父结点上&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右旋结点为根节点&lt;/span&gt;&lt;br&gt;        *root = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//根节点赋为左子结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;right) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右旋结点为右子结点&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent-&amp;gt;right = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//左子结点挂父结点右边&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//否则左子结点挂父结点左边&lt;/span&gt;&lt;br&gt;        node-&amp;gt;parent-&amp;gt;left = temp;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    temp-&amp;gt;right = node;&lt;span class=&#34;hljs-comment&#34;&gt;//右旋结点挂左子结点右边&lt;/span&gt;&lt;br&gt;    node-&amp;gt;parent = temp;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 显然&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;将成为新的根，左&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;右&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074443292&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;B&amp;lt;C&amp;lt;A&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，会先做一次左旋再做一次右旋，其实除开染色过程，我觉得这跟&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树的插入过程没有什么区别：&lt;/span&gt;&lt;/p&gt;
&lt;img src=&#34;http://img.blog.csdn.net/20150806074520668&#34; alt=&#34;&#34; /&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其他的插入情景要么与以上几个对称，要么发生在树的其他子树中，实际过程完全一样。LL&lt;span style=&#34;font-family:宋体;&#34;&gt;型右旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;RR&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型左旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;LR&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型先右旋后左旋，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;RL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;型先左旋后右旋。&lt;/span&gt;与&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树不同的是，插入结点时红黑树左旋或右旋的判定条件明确为附近一两个结点的颜色，其他过程没有任何区别。&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-4-红黑树的结点删除&#34;&gt;&lt;a href=&#34;#2-4-红黑树的结点删除&#34; class=&#34;headerlink&#34; title=&#34;2.4 红黑树的结点删除&#34;&gt;&lt;/a&gt;2.4 红黑树的结点删除&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 据说红黑树和&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;AVL&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;树的区别主要体现在删除节点时，我们就来看一看。&lt;/span&gt;我刚说什么来着，删除结点的函数体更长了，足足&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;165&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;行，我决定分段研究，&lt;/span&gt;先看第一部分：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;left == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左子结点是哨兵或左右子结点都是哨兵&lt;/span&gt;&lt;br&gt;    temp = node-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子结点，后面让它接替node位置&lt;/span&gt;&lt;br&gt;    subst = node;&lt;span class=&#34;hljs-comment&#34;&gt;//node赋给subst&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node-&amp;gt;right == sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右子结点是哨兵&lt;/span&gt;&lt;br&gt;    temp = node-&amp;gt;left;&lt;span class=&#34;hljs-comment&#34;&gt;//获得左子结点，后面让它接替node位置&lt;/span&gt;&lt;br&gt;    subst = node;&lt;span class=&#34;hljs-comment&#34;&gt;//node赋给subst&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果左右子结点都不是哨兵&lt;/span&gt;&lt;br&gt;    subst = &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_min&lt;/span&gt;(node-&amp;gt;right, sentinel);&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子树中最小的结点&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;left != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果右子树的最小结点的左子结点不是哨兵&lt;/span&gt;&lt;br&gt;        temp = subst-&amp;gt;left;&lt;span class=&#34;hljs-comment&#34;&gt;//获得右子树的最小结点的左子结点&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//否则获得右子树最小结点的右子结点&lt;/span&gt;&lt;br&gt;        temp = subst-&amp;gt;right;&lt;br&gt;    &amp;#125;&lt;span class=&#34;hljs-comment&#34;&gt;//看起来subst将被从原位置删掉然后接替node的位置&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面我们来看看&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;和&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;要干什么用：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是根&lt;/span&gt;&lt;br&gt;    *root = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//temp接替根&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/* DEBUG stuff */&lt;/span&gt;&lt;br&gt;    node-&amp;gt;left = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;span class=&#34;hljs-comment&#34;&gt;//清空了待删结点&lt;/span&gt;&lt;br&gt;    node-&amp;gt;right = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;    node-&amp;gt;key = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;red = &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(subst);&lt;span class=&#34;hljs-comment&#34;&gt;//获得subst是否是红色&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == subst-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是左子结点&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;parent-&amp;gt;left = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂到subst位置&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是右子结点&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;parent-&amp;gt;right = temp;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂到subst位置&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下一段：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst == node) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是待删结点&lt;/span&gt;&lt;br&gt;    temp-&amp;gt;parent = subst-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//接替结点直接接替，删除完成&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst不是待删结点&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;parent == node) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst的父结点就是待删结点&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//接替结点挂在subst上&lt;/span&gt;&lt;br&gt;     &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点比subst的父结点更高&lt;/span&gt;&lt;br&gt;        temp-&amp;gt;parent = subst-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//把接替结点挂在subst的父结点上&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//subst接替待删结点node的位置，复制待删结点跟周围结点的关系&lt;/span&gt;&lt;br&gt;    subst-&amp;gt;left = node-&amp;gt;left;&lt;br&gt;    subst-&amp;gt;right = node-&amp;gt;right;&lt;br&gt;    subst-&amp;gt;parent = node-&amp;gt;parent;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(subst, node);&lt;span class=&#34;hljs-comment&#34;&gt;//复制颜色&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == *root) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点是根&lt;/span&gt;&lt;br&gt;        *root = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst接替根&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果待删结点不是根，subst接替它&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (node == node-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;br&gt;            node-&amp;gt;parent-&amp;gt;left = subst;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            node-&amp;gt;parent-&amp;gt;right = subst;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;left != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst左子结点不是哨兵&lt;/span&gt;&lt;br&gt;        subst-&amp;gt;left-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst的左子结点放弃node，挂上来&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (subst-&amp;gt;right != sentinel) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst右子结点不是哨兵&lt;/span&gt;&lt;br&gt;        subst-&amp;gt;right-&amp;gt;parent = subst;&lt;span class=&#34;hljs-comment&#34;&gt;//subst右子结点放弃node，挂上来&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//清空待删结点node&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* DEBUG stuff */&lt;/span&gt;&lt;br&gt;node-&amp;gt;left = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;right = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;parent = &lt;span class=&#34;hljs-literal&#34;&gt;NULL&lt;/span&gt;;&lt;br&gt;node-&amp;gt;key = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//如果subst是红色，红黑树约束依然被遵守，删除工作就可以结束了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (red) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 看起来结点的删除过程已经顺利完成了，但是如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是黑色，我们需要修复红黑树的约束。下面这一段代码的主角是接替&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;位置的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;结点：&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//当subst的接替结点不是根且为黑色，循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (temp != *root &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(temp)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (temp == temp-&amp;gt;parent-&amp;gt;left) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp是左子结点&lt;/span&gt;&lt;br&gt;        w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得其右兄弟&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(w)) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp的右兄弟是红色&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp的右兄弟&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(temp-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的父结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp的父结点左旋&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的新右兄弟&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果temp右兄弟的左右子结点都是黑的&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left) &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的右兄弟&lt;/span&gt;&lt;br&gt;            temp = temp-&amp;gt;parent;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的父结点为新temp&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp右兄弟的子结点不全为黑&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果其右子结点是黑色&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;left);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑左子结点&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;span class=&#34;hljs-comment&#34;&gt;//染红temp的右兄弟&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, w);&lt;span class=&#34;hljs-comment&#34;&gt;//右兄弟右旋&lt;/span&gt;&lt;br&gt;                w = temp-&amp;gt;parent-&amp;gt;right;&lt;span class=&#34;hljs-comment&#34;&gt;//获得temp的新右兄弟&lt;/span&gt;&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp右兄弟复制temp父结点颜色&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(w, temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp-&amp;gt;parent);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp父结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;right);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑temp右兄弟的右子结点&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//temp父结点左旋&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            temp = *root;&lt;span class=&#34;hljs-comment&#34;&gt;//获得根&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//如果temp是右子结点，做对称的事&lt;/span&gt;&lt;br&gt;        w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_red&lt;/span&gt;(w)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left) &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;right)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;br&gt;            temp = temp-&amp;gt;parent;&lt;br&gt;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_is_black&lt;/span&gt;(w-&amp;gt;left)) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;right);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_red&lt;/span&gt;(w);&lt;br&gt;                &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_left_rotate&lt;/span&gt;(root, sentinel, w);&lt;br&gt;                w = temp-&amp;gt;parent-&amp;gt;left;&lt;br&gt;            &amp;#125;&lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_copy_color&lt;/span&gt;(w, temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp-&amp;gt;parent);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(w-&amp;gt;left);&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbtree_right_rotate&lt;/span&gt;(root, sentinel, temp-&amp;gt;parent);&lt;br&gt;            temp = *root;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;ngx_rbt_black&lt;/span&gt;(temp);&lt;span class=&#34;hljs-comment&#34;&gt;//染黑当前temp&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 跟插入结点时一样乱，我们梳理一下。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先忽略红黑树的约束进行删除：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①如果删除的是一个叶结点，即没有后继或后继全为哨兵的结点，直接删除即可；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②如果只有一个后继，让其替换待删除结点即可；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③如果有两个后继，需要从树的边缘选择一个结点，有两种等价的选择，待删结点左子树的最大结点和右子树的最小结点，&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;选择的是后者，以这个结点的键与值（&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;与&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;value&amp;#x2F;data&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;）替换待删结点的键与值，然后删除这个替身。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不论是①、②情景中的待删结点还是③情景中替身，在源码中都是subst。下面要围绕着它来进行讨论。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上是不考虑红黑树平衡性的纯拓扑结构变动。下面要考虑是否调整树的拓扑结构使树重新平衡，是否调整结点的颜色使树重新符合红黑树的约束条件。我们知道红黑树有一条关键约束是任意结点到其子树中叶结点的简单路径中黑色结点数相同。那么如果&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是一个红色结点，我们不需要对红黑树做任何调整，它仍是一棵红黑树；如果&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是黑色的，所有经过&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的简单路径上都会少一个黑色结点数，所以需要进行调整。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面来根据不同情景分情况讨论，因为二叉树的情景左右颠倒时调整方式也可以左右颠倒，我们只讨论&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;是左子结点的情况。设刚接替&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;subst&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;的新右兄弟为&lt;/span&gt;&lt;span style=&#34;font-family:Times New Roman;&#34;&gt;W&lt;/span&gt;&lt;span style=&#34;font-family:宋体;&#34;&gt;。从经过简化的源码来看，关于结点颜色的变化很令人费解，我们不妨先来看一看：&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ①W为红色：将W染黑，将X与W的父结点X-&amp;gt;parent染红，X-&amp;gt;parent左旋，W重设为X的新右兄弟，然后转入情景①、②或③；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ②W为黑色，W两个后继都是黑色：将W染红，X重设为X-&amp;gt;parent；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ③W为黑色，W右子结点为黑色：将W左子结点染黑，将W染红，W右旋，W重设为X的新右兄弟，然后将X-&amp;gt;parent的颜色赋给W，将X-&amp;gt;parent染黑，X-&amp;gt;parent左旋，根赋给temp；&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ④W为黑色，W右子结点为红色：将W左子结点染黑，将W染红，W右旋，W重设为X的新右兄弟，然后将X-&amp;gt;parent的颜色赋给W，将X-&amp;gt;parent染黑，将W右子结点染黑，X-&amp;gt;parent左旋，根赋给temp。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后还要把temp染黑。我们可以看到情景①中进行了一次左旋，情景②只进行了染色，情景③、④都进行了一次右旋和一次左旋。情景①处理结束时一定还要转入别的情景，情景②、③、④的出现则标志着本次调整的结束。那么，红黑树删除结点后的调整过程中，依情景①循环出现的次数，调整过程中旋转的最多见的次数将是1次、2次、3次，再往上次数越多越罕见（依情景①循环出现的次数），最多旋转次数将可能到达树高即log2n次。生产环境中，删除结点后平均每次调整中旋转的次数就像分析源码之前提到的，将是常数规模的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来我打算以逐步翻新版本的方式重写红黑树，更精细、直观地了解红黑树这一数据结构。而在重写之前，我们需要了解，nginx的红黑中所有的叶结点，都是哨兵（sentinel），这在调整红黑树时达成了对红黑树的一种优化。通过增加一层全黑的子结点，红黑树中实际有值的子树里，就允许在子结点出现红色结点了。虽然我没有证明，但这常数规模地增加了删除结点时的旋转次数，也促进了插入新结点时进行调整的概率（增加了在红色结点下插入新结点的概率），同样增加了旋转的次数。而旋转将压缩红黑树子树的高度，提高查询效率。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在由朴素到精致地重写红黑树的过程中，我将由少到多地考虑使用nginx对红黑树的优化，或者加入我自己的优化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;从杭州回来后翻了CLRS（算法导论），发现：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，nginx的红黑树中，sentinel结点并非独创的优化手段，CLRS的红黑树也是带哨兵的，可以说，一般的，我们令红黑树带哨兵。目的是更直截了当的满足红黑树的叶结点全黑约束，同时更方便标识树的边缘。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;其次，所有的叶结点都是由同一个哨兵结点代表，节省了空间开销，省去了叶结点逐一染色的麻烦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;另外，之前我感到迷惑的static inline组合用法，在oschina.net获得了解释：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.inline函数是不能像传统的函数那样放在.c中然后在.h中给出接口在其余文件中调用的,因为inline函数其实是跟宏定义类似，被调用时尝试在调用处直接展开整个函数体，不存在所谓的函数入口。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.因为第一点，会出现一个问题，如果inline函数在两个不同的文件中出现。也就是说一个头文件被两个不同的源文件包含，则会出现重名，链接失败。static inline 的用法就能很好的解决这个问题。使用static修饰符，函数仅在文件内部可见，不会污染命名空间。可以理解为一个inline函数在不同的源文件里面生成了不同的实例，而且名字是完全相同的 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;总结一下。功能上，我们需要微型函数被大量调用时尝试内联展开以节省压栈弹栈的开销；实践中，为了防止不同文件中函数同名时的链接错误，我们需要加上static关键字的限制。（尽管inline关键字的效果有所不同，c99标准和gcc下static inline组合是兼容的，效果相同）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span style=&#34;color:#FF0000;&#34;&gt;之前看到nginx源码中函数参数有双重指针一直很费解，今天研究了一下才发现原因。ngx_rbtree_t中，root经常使用双重结点指针，也就是根结点地址的地址。如果树的修改过程中，根结点地址被别的结点地址替换掉，需要重新设置根的地址&lt;em&gt;root。假设ngx_rbtree_t中的根地址参数是&lt;/em&gt;root单层指针，进入函数体时将是一个值传递，出函数体时无论函数体中如何更改根的地址，都是无效的，只有对根结点内容的修改能保留下来。所以要么使用双重指针作为根地址的参数，要么提供树结构体的地址，变相提供双重指针作为参数，当然可以提供树的结构体对象本身作为参数，但是值传递是要复制整个值对象的，显然当结构体比较大时这样做将明显增加开销。nginx选择双重指针而非结构体指针来避免树结构体内的变量遍历寻址，进一步提高效率。&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
