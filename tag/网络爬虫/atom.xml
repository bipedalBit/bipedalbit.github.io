<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bipedalbit.net</id>
    <title>Hacking to the gate! • Posts by &#34;网络爬虫&#34; tag</title>
    <link href="https://bipedalbit.net" />
    <updated>2016-01-05T17:02:08.000Z</updated>
    <category term="Qt" />
    <category term="signal-slot" />
    <category term="Q_OBJECT" />
    <category term="nginx" />
    <category term="select/poll" />
    <category term="epoll" />
    <category term="ngx_int_t" />
    <category term="rbtree" />
    <category term="C" />
    <category term="static" />
    <category term="内存分布" />
    <category term="sublime" />
    <category term="C++" />
    <category term="makefile" />
    <category term="node.js" />
    <category term="github" />
    <category term="socket.io" />
    <category term="Web请求处理机制" />
    <category term="同步/异步" />
    <category term="阻塞/非阻塞" />
    <category term="事件驱动模型" />
    <category term="BP神经网络" />
    <category term="机器学习" />
    <category term="python" />
    <category term="pybrain" />
    <category term="c++11" />
    <category term="多线程" />
    <category term="ubuntu" />
    <category term="debian" />
    <category term="apt-file" />
    <category term="cin" />
    <category term="cout" />
    <category term="scanf" />
    <category term="printf" />
    <category term="进制转换" />
    <category term="人工神经网络" />
    <category term="人机博弈" />
    <category term="Maxmin" />
    <category term="AlphaBeta" />
    <category term="PVS" />
    <category term="MTD(f)" />
    <category term="位域" />
    <category term="bitset" />
    <category term="vector&amp;lt;bool&amp;gt;" />
    <category term="网络爬虫" />
    <category term="类脑" />
    <category term="codeigniter" />
    <category term="php" />
    <category term="IIS7" />
    <category term="apache" />
    <category term="模拟登录" />
    <category term="proxy" />
    <category term="domain" />
    <category term="DNS" />
    <category term="hexo" />
    <category term="vps" />
    <category term="dropbox" />
    <category term="ffmpeg" />
    <category term="板绘" />
    <category term="sai" />
    <category term="琪露诺" />
    <category term="LLM" />
    <category term="ollama" />
    <category term="open-webui" />
    <category term="oneapi" />
    <category term="mcpserver" />
    <category term="NAS" />
    <category term="minio" />
    <category term="CDN" />
    <category term="waline" />
    <category term="mcpo" />
    <category term="svn" />
    <category term="DNS劫持" />
    <category term="DNS污染" />
    <entry>
        <id>https://bipedalbit.net/2016/01/06/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0/</id>
        <title>微博爬虫之代理池</title>
        <link rel="alternate" href="https://bipedalbit.net/2016/01/06/%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前一个版本的微博爬虫每发送一个HTTP请求就需要等待若干秒，模拟人类操作，避免引起服务器的注意，以至于每个请求平均耗时高达3秒。为了防止被服务器封禁，显然应该使用代理，伪装自己HTTP请求的来源。至于如何获取代理，如何使用这些代理，我进行了一些思考与探索，并完善上个版本的微博爬虫工具包，完成了新版的微博爬虫。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我的第一个思路是，找到提供大量免费代理的网站（自己找，本文不点明），爬取代理，然后用多线程的方式成组发送请求。虽然获取代理的过程很顺利，但是我很快发现了这个思路的一些问题。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，成组多线程并发请求的话，&lt;strong&gt;下一页链接&lt;/strong&gt;没法使用同一个序列，即可能需要先获取页数然后做页码区间划分，再把每个区间分配给不同的代理。可是如果某个代理中途失效了怎么办？就算不考虑这种情况，理论上，每组请求之间还是需要加平均3秒的延迟，实际上，受IO上限的影响，16线程的成组请求，等到全部响应完大概需要10+秒，这样一来组间延迟省掉也无所谓，可是即使在只使用优质代理的情况下每次请求的均摊时间开销也要1.+秒，虽然效率比不使用代理有所提高，但是我仍然不满意。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 随后我放弃了对多线程并发的执念，提出并完善了一个新思路——单线程爬虫＋带时间戳的代理池＋代理竞争。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 先解释单线程爬虫，有了代理池其实已经基本不用担心代理失效的问题，但是为了实现方便，我还是暂且选择了单线程爬虫。下一个版本也许会在整个爬虫外面套一层并发，也许会考虑使用协程（coroutine）技术。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 接下来是带时间戳的代理池和代理竞争。我们知道，每一个代理在发出一个请求后需要等待一个平均3秒的随机时间后才可以再次发送请求。那么，如果我们使用过一个代理之后就暂时给它上锁（实际上是打上一个时间戳），到时间后（当前时间的时间戳与代理时间戳差值超过随机延时）则给它解锁就可以解决单个代理的使用问题。同时，我们在所有代理之间轮询寻找没上锁的代理来使用，而每次请求的响应时间会积累下来，考虑到使用代理的请求响应时间比较长，顶多五六个代理之后旧代理就已经解锁了。而实际上，我的代理池维护的代理数通常不会少于6。即使代理全都上了锁，我也可以等待1秒后重新轮询。于是，只要保证代理池足够大，同时维护代理池中代理的质量，我们就可以实现连续发送请求，事实上，经过实验，代理响应时间受代理质量影响有所浮动，平均请求周期最长达到过6&amp;#x2F;7秒，最短达到过5&amp;#x2F;3秒。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于维护代理池的方法，我从爬虫进程fork了一个守护进程用来更新代理池。定时（暂定30秒）爬取代理网站某页面上的100个代理，然后用多线程（暂定16线程）测试每个代理的响应时间，过滤掉响应太慢（暂定超时时间为3秒）的代理，用同样的方法过滤代理池中不在新代理列表中的代理，最后合并代理池和新代理列表，同时为新代理打上很小的时间戳（实际上是0），已有的代理时间戳不变。这样可以在代理损失的过程中不断扩充代理，使代理池的规模稳定甚至递增（经过实验，基本能使代理池大小保持稳定，没有出现代理池暴增的情况，暂时不对代理池大小加以限制）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关于新思路的实现，我在重构weibo-crawler后新建了weibo-crawler2项目，按惯例已挂&lt;a href=&#34;https://github.com/bipedalBit/weibo-crawler2&#34;&gt;git&lt;/a&gt;。下面是一些weibo-crawler2的使用截图：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/crawler2%E5%8C%85%E9%85%8D%E7%BD%AE.png&#34; alt=&#34;图１ crawler2包配置&#34; title=&#34;__init__.py&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/%E7%88%AC%E8%99%ABCLI%E8%BE%93%E5%87%BA.png&#34; alt=&#34;图２ 爬虫CLI输出&#34; title=&#34;爬虫CLI输出&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/weibo-crawler2/%E7%88%AC%E8%99%AB%E6%97%A5%E5%BF%97.png&#34; alt=&#34;图３ 爬虫日志&#34; title=&#34;爬虫日志&#34;&gt;&lt;br&gt;&lt;strong&gt;悲报，weibo.cn登录需要验证码了。刚开始验证码还比较弱，我正想着过完年要不要用深度学习破了它，然后验证码就变得更变态了…模拟登录模块报废。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <category term="proxy" />
        <updated>2016-01-05T17:02:08.000Z</updated>
    </entry>
    <entry>
        <id>https://bipedalbit.net/2016/01/02/weibo-cn%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%99%A8%E7%9A%84python%E9%87%8D%E6%9E%84/</id>
        <title>weibo.cn模拟登录器的python重构</title>
        <link rel="alternate" href="https://bipedalbit.net/2016/01/02/weibo-cn%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E5%99%A8%E7%9A%84python%E9%87%8D%E6%9E%84/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前封装过一个完整的微博爬虫工具包，但是在我查找python多进程爬虫的相关资料时发现，其实使用urllib2写网络爬虫已经是陈年往事，如今大家都用requests包，就像明明有.NET和Qt框架偏偏要用MFC框架，我是自找麻烦了。在使用requests包逐个重构网络爬虫部件的时候，对weibo.cn的模拟登录过程有了一些新的理解，于是来写篇文介绍一下。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们再来重新分析一遍weibo.cn的登录过程。出发前先来检查一下装备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firefox浏览器&lt;/li&gt;
&lt;li&gt;一个firefox浏览器下的HTTP报文记录分析插件——httpfox&lt;/li&gt;
&lt;li&gt;python2语言环境——python 2.7&lt;/li&gt;
&lt;li&gt;一个python HTTP包——requests&lt;/li&gt;
&lt;li&gt;一个python XML解析包——BueatifulSoup4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 妥，先来用httpfox记录一下手工登录的过程：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E5%BE%AE%E5%8D%9A%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%80%BB%E8%A7%88.png&#34; alt=&#34;图１ weibo.cn模拟登录过程总览&#34; title=&#34;weibo.cn模拟登录过程总览&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 无视掉第二条失败的图片请求，剩下的就是weibo.cn登录的全过程。我们逐条分析：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E5%BE%AE%E5%8D%9A%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/%E8%AF%B7%E6%B1%82%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png&#34; alt=&#34;图２ 请求登录页面&#34; title=&#34;请求登录页面&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 上图中是第一条请求的报文头部分，第一条请求是在访问weibo.cn的登录页面。请求到的页面源码中，掐头去尾，比较关键的部分如下：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;?backURL=http%3A%2F%2Fweibo.cn%2F&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;backTitle=%E5%BE%AE%E5%8D%9A&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;vt=1&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;revalid=2&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;amp;&lt;/span&gt;ns=1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;		手机号/电子邮箱/会员帐号:&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;size&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;30&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		密码:&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password_3523&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;size&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;30&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;remember&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;checked&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checked&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;记住登录状态，需支持并打开手机的cookie功能。&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;backURL&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http%3A%2F%2Fweibo.cn%2F&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;backTitle&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;微博&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tryCount&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;vk&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3523_4ea5_1803939589&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登录&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到表单的action地址、密码输入框的name、隐藏变量vk的值都是变动的，这三样东西正是我们在模拟登录时需要从登录页面解析获得的。对应的python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 尽管不设置报文头也不会被新浪服务器阻拦，还是做一些必要的伪装与配置比较保险&lt;/span&gt;&lt;br&gt;headers = &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;User-Agent&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;DNT&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Connection&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;keep-alive&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Cache-Control&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;max-age=0&amp;#x27;&lt;/span&gt;,&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;get_post_needs&lt;/span&gt;():&lt;br&gt;	url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://login.weibo.cn/login/?ns=1&amp;amp;revalid=2&amp;amp;backURL=http://weibo.cn/&amp;amp;backTitle=微博&amp;amp;vt=&amp;#x27;&lt;/span&gt;&lt;br&gt;	text = requests.get(url, headers=headers).text&lt;br&gt;	soup = BeautifulSoup(text, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;lxml&amp;#x27;&lt;/span&gt;)&lt;br&gt;	action_url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://login.weibo.cn/login/&amp;#x27;&lt;/span&gt; + soup.form[&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;action&amp;#x27;&lt;/span&gt;]&lt;br&gt;	password_tag = soup.find(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;type&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;)&lt;br&gt;	password_name = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;(?&amp;lt;=name=&amp;quot;)\w+(?=&amp;quot;)&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(password_tag)).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;	vk_tag = soup.find(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;, attrs = &amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;&amp;#125;)&lt;br&gt;	vk = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;(?&amp;lt;=value=&amp;quot;)\w+(?=&amp;quot;)&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(vk_tag)).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; action_url, password_name, vk&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 页面解析完毕还需要填充表单，对应的python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;get_post_data&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;username, password, password_name, vk&lt;/span&gt;):&lt;br&gt;	form_data = &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;mobile&amp;#x27;&lt;/span&gt;: username,&lt;br&gt;		password_name: password,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;remeber&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;on&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backURL&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backTitle&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;微博&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;tryCount&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;: vk,&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;submit&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录&amp;#x27;&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; form_data&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 填充完登录表单，就该post出去了，由４个连续的状态码为302的请求不难看出，发送的post请求随后被进行了足足４次重定向。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 可以看到，第一次重定向后，请求访问了newlogin.sina.cn，此时新浪服务器已经给我们的请求加上了两个cookie字段（httpfox可以以字典的形式查看每个请求的cookie字段，这里我就不上图了），一个叫“_T_WM”另一个叫“SUB”，虽然不明白这两个字段的含义，但是经过实验得知，其实这个“SUB”字段就可以用来做登录验证了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 第二次重定向请求访问了passport.weibo.com，这次新浪服务器给请求重新填充了许多cookie字段，但是仍然包含一个“SUB”字段，没错，这此的“SUB”也可以拿来做登录验证。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类似的，第三次访问weibo.cn的重定向也填充了新cookie字段，我们又获得了一个可用的“SUB”字段。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于最后一次重定向，只是通过一个几乎纯JavaScript组成的页面让我们以已登录的状态跳转到前面表单参数中的backURL指向的页面。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在使用python记录cookie字段时需要注意，这种经过若干次重定向的”长会话“不能直接使用Request对象来发送最初的post请求，而是需要一个能处理”长会话“的Session对象的帮助，获得cookie字段的对应python代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wap_login&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;username, password&lt;/span&gt;):&lt;br&gt;	url, password_name, vk = get_post_needs()&lt;br&gt;	data = get_post_data(username, password, password_name, vk)&lt;br&gt;	session = requests.Session()&lt;br&gt;	response = session.post(url, headers=headers, data=data)&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 以下三种来自不同domain的名为SUB的cookie字段都可以用来验证登录状态&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# return session.cookies.get(&amp;#x27;SUB&amp;#x27;, domain=&amp;#x27;.sina.cn&amp;#x27;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# return session.cookies.get(&amp;#x27;SUB&amp;#x27;, domain=&amp;#x27;.weibo.com&amp;#x27;)&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; session.cookies.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB&amp;#x27;&lt;/span&gt;, domain=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;.weibo.cn&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 拿到了必要的cookie字段，模拟登录过程其实就已经完成了，接下来我们也可以用下面的代码测试一下cookie字段是否管用：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;url = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/moegirlwiki&amp;#x27;&lt;/span&gt;&lt;br&gt;username = raw_input(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;请输入新浪通行证用户名：&amp;#x27;&lt;/span&gt;)&lt;br&gt;password = getpass(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;请输入新浪通行证密码：&amp;#x27;&lt;/span&gt;)&lt;br&gt;cookies = &amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB&amp;#x27;&lt;/span&gt;: wap_login(username, password)&amp;#125;&lt;br&gt;response = requests.get(url, cookies=cookies)&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录成功！&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; response.url == url &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录失败！&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果读者接触过weibo.com的模拟登录过程想必明白，weibo.cn的登录过程简单多了，更重要的是，必要cookie字段在weibo.cn和weibo.com是通用的，那我们又何必选择更麻烦的模拟登录途径呢？&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <category term="模拟登录" />
        <updated>2016-01-02T04:47:05.000Z</updated>
    </entry>
    <entry>
        <id>https://bipedalbit.net/2015/12/28/python%E7%BB%83%E6%89%8B%E4%B9%8B%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/</id>
        <title>python练手之微博爬虫</title>
        <link rel="alternate" href="https://bipedalbit.net/2015/12/28/python%E7%BB%83%E6%89%8B%E4%B9%8B%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从半年前声称完成python入门以来，从来没有进行过非API调用的python实战，之前的BP神经网络python版也只是用了pybrain包提供的API而已。惊觉这样下去可能直到我把python语法忘干净都不敢说自己真的掌握了python，但是仍然无所事事拖到大概20天前，室友实验室发下任务要写个Java爬虫，我才决定同时写个python爬虫看看能不能体现下python开发效率的优势。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;1-什么是网络爬虫&#34;&gt;&lt;a href=&#34;#1-什么是网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;1. 什么是网络爬虫&#34;&gt;&lt;/a&gt;1. 什么是网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在展开介绍我的python爬虫程序之前先来回顾一下网络爬虫实际上要做些什么事。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从结果来看，网络爬虫是一种&lt;strong&gt;从互相关联的互联网网页上批量获取网页数据的技术手段&lt;/strong&gt;。从流程上来看，爬虫程序是一个递归过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（１）请求网页数据，开始步骤（２）；&lt;/li&gt;
&lt;li&gt;（２）解析网页数据，分别解析出&lt;strong&gt;目的数据&lt;/strong&gt;和请求下一个网页的&lt;strong&gt;超链接地址&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;（３）如果不再有符合条件的&lt;strong&gt;超链接地址&lt;/strong&gt;则结束递归过程，否则回到步骤（１）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 从图论的角度看，如果把网页看成搜索树的状态结点，那么常见的网络爬虫可以看成是一个单一分支的深度优先搜索，当然用于搜索引擎的网络爬虫则常常需要解析出网页中蕴含的多个搜索分支，这就更像我们熟悉的深度优先搜索了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 怎么样，其实很简单吧。计算机技术中最通用的技术，其原理往往是最简单的。&lt;/p&gt;
&lt;h2 id=&#34;2-为什么需要网络爬虫&#34;&gt;&lt;a href=&#34;#2-为什么需要网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;2.为什么需要网络爬虫&#34;&gt;&lt;/a&gt;2.为什么需要网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 网络爬虫最常见的应用场景就是获取（遍历）多页数据列表中的所有数据，比如获取网易云音乐某个歌单中的所有音乐地址甚至音乐数据本身，又比如获取豆瓣电影某个主题下的所有电影。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 事实上，互联网时代到来之后，大数据时代接踵而至，计算机乃至其他领域的大量实验数据都来自互联网。除了直接从服务器获得数据之外，最普遍的数据获取途径就是通过最大的开放性数据来源WWW（世界范围Web）网络来请求数据了，毕竟比起HTTP协议，其他应用层通讯协议太多太杂太难分析，也不够开放。于是爬虫也成为了一种大量实验数据的获取手段。&lt;/p&gt;
&lt;h2 id=&#34;3-怎么实现网络爬虫&#34;&gt;&lt;a href=&#34;#3-怎么实现网络爬虫&#34; class=&#34;headerlink&#34; title=&#34;3. 怎么实现网络爬虫&#34;&gt;&lt;/a&gt;3. 怎么实现网络爬虫&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我选择了python作为写网络爬虫的语言，事实上据我所知，Java、PHP、C++、Ruby、Perl等我们熟知的绝大多数完善的编程语言都能用来写网络爬虫，或者说，只要有网络通信库的语言都可以用来写网络爬虫。其实相对来说，python的网络通信库还是很发达的，再加上python语言语法的简洁性和数据结构操作天生的灵活性，我觉得用python写网络爬虫没准是最快的。（别说Java可以用封装好的现成爬虫Jar包，没有可比性）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们通过实例来了解网络爬虫的实现过程。我选择了新浪微博作为爬虫对象，具体来说是将特定新浪微博用户的微博主页作为爬取对象。这里有两点需要注意：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，我选择的是&lt;a href=&#34;http://weibo.cn/&#34;&gt;微博移动版&lt;/a&gt;的页面而非&lt;a href=&#34;http://weibo.com/&#34;&gt;PC版&lt;/a&gt;的页面作为爬取对象。移动版的页面结构非常简单而且不含任何JavaScript成分，微博数据相对很容易解析出来，而PC版的页面所有的微博数据都由JavaScript填充，虽然不至于找不到数据但是XML结构之外解析数据就几乎要全靠正则表达式了。此外虽然PC版的页面看起来蕴含更多信息，但是许多信息都是通过JavaScript，通过AJAX技术动态向服务器申请来的。如果选择PC版页面作为爬取对象，将大量增加页面解析难度，甚至可能需要让爬虫过程发生嵌套，使整个爬虫流程十分复杂。如果数据能从移动版页面获取，尽量不要选择解析PC版页面。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 然后，需要想办法获得登录微博后的cookie，或者cookie的必要字段。微博跟早期的百度贴吧不一样，不登录微博账号的话什么微博数据都看不到。平时我们的浏览器如果没有保存微博登录后的cookie，在访问包含微博数据的页面地址时，HTTP请求会被重定向到登录页面。只有在访问页面时令HTTP请求报文头中携带登录后的cookie，该请求才被服务器认定为合法请求，才会正常的返回被请求的页面。获取cookie有两种途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过各种浏览器的HTTP报文抓取插件，从HTTP请求的文件头中提取出现成的cookie；&lt;/li&gt;
&lt;li&gt;模拟微博账号登录过程，在登录完成之后的第一次页面访问请求的HTTP报文头中提取出cookie。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-1-python下的HTTP请求&#34;&gt;&lt;a href=&#34;#3-1-python下的HTTP请求&#34; class=&#34;headerlink&#34; title=&#34;3.1 python下的HTTP请求&#34;&gt;&lt;/a&gt;3.1 python下的HTTP请求&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; python下如何完成一次HTTP请求并获得返回的页面数据？哦顺便一说我用的是python2，python3应该区别不大。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; urllib2&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;print&lt;/span&gt; urllib2.urlopen(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;www.baidu.com&amp;#x27;&lt;/span&gt;).read()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 完了？完了。是不是很简单？python大法好！开个玩笑不要在意，上面的两行代码只是实现了最简单的默认请求形式及返回数据的获取。实际上urllib2类的urlopen方法参数可以是一个url或者是一个封装好的Request对象，返回值是一个封装好的Response对象。python的网络编程确实很简单直观，我不想细说，至于urllib2的具体的各种相关python API，请自行查阅&lt;a href=&#34;https://docs.python.org/2/library/urllib2.html&#34;&gt;手册&lt;/a&gt;或者等下看我的源码。&lt;/p&gt;
&lt;h3 id=&#34;3-2-页面解析&#34;&gt;&lt;a href=&#34;#3-2-页面解析&#34; class=&#34;headerlink&#34; title=&#34;3.2 页面解析&#34;&gt;&lt;/a&gt;3.2 页面解析&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 页面解析是爬取页面数据后的后续操作，我们实际需要的数据往往蕴含在页面源码之中，最简单粗暴的解析方式就是观察页面源码然后用正则表达式匹配出需要的数据字段。此外既然页面源码的组织方式是HTML，而HTML是一种XML结构，那么我们就可以用一些XML解析工具比如BueatifulSoup、XPath来辅助页面解析。这些工具比较容易寻找到整个HTML文本数据中需要的标签，接下来再用正则表达式简单处理一下，数据就不难获得了。顺便一提，python的正则表达式包叫做re，用法参见&lt;a href=&#34;https://docs.python.org/2/library/re.html&#34;&gt;手册&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-3-模拟登录&#34;&gt;&lt;a href=&#34;#3-3-模拟登录&#34; class=&#34;headerlink&#34; title=&#34;3.3 模拟登录&#34;&gt;&lt;/a&gt;3.3 模拟登录&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 固然，我们可以偷懒一直选择填入现成的cookie，但是须知，cookie都是有时限或者说寿命的，一定时间后，cookie会过期失效，不再合法。这时就需要重新登录获得一个新的cookie了。虽然cookie过期并没有那么快，但是总是需要有人在侧监视，随时更换cookie来维持比较长的爬虫过程，岂不是显得很low很不自动化？所以大部分比较大、比较正式的爬虫程序都会选择实现特定网站的模拟登录过程。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 具体到微博上来，weibo.com即PC版微博网站的登录过程网上有相当多的分析文章，比如&lt;a href=&#34;http://www.douban.com/note/201767245/&#34;&gt;这篇&lt;/a&gt;、&lt;a href=&#34;http://www.cnblogs.com/myx/archive/2011/10/19/Sina-SSO.html&#34;&gt;这篇&lt;/a&gt;和&lt;a href=&#34;http://www.360doc.com/content/15/0514/19/13228794_470491590.shtml&#34;&gt;这篇&lt;/a&gt;。读者需要注意的是，据我所知weibo.com的登录过程微调十分频繁，写一个weibo.com模拟登录可能几个月后就需要根据新浪的微调调整代码了。至于weibo.cn，网上简单的找找似乎没有发现分析文章。但是当时据我猜测，weibo.cn的登录过程应该比weibo.com简单（事实证明确实如此），登录过程微调后修改代码也会更容易。而登录后的cookie，经过我的实验，是通用的。也就是说不论在weibo.cn还是weibo.com，登录后产生的细节各不相同的cookie可能有一个共同部分是用来验证登录状态的（事实再次证明确实如此）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我使用的HTTP报文抓取插件是firefox下的HttpFox，同类插件还有httpwatch、firefox的自带工具、chrome的自带工具，甚至一些较新版本的IE自带工具。记录登录过程，分析跳转了哪些地址，有几次重定向，期间请求携带了哪些数据，cookie有什么变化。这里我简单说下weibo.cn的登录过程。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 总体来说weibo.cn的登录过程分成三个步骤，请求登录页面，获取一些post登录信息的必要参数；post登录信息表单；等待。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 登录页面中的action（post目标地址）、加后缀的密码数据键名（如password_2358）和一个叫做vk的数据都是提交登录表单时必要的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之后就要把表单加工成为可填入Request对象的形式，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;form_data = &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;mobile&amp;#x27;&lt;/span&gt;: username,&lt;br&gt;	password_name: password,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;remeber&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;on&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backURL&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;http://weibo.cn/&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;backTitle&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;微博&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;tryCount&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;vk&amp;#x27;&lt;/span&gt;: vk,&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;submit&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;登录&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;form_data = urllib.urlencode(form_data)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 提交表单后新浪服务器会对这一请求进行４次重定向，注意每次重定向都需要提取并重填充cookie字段，因为python的默认重定向处理类不会重填cookie，重写的重定向处理方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs python&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyRedirectHandler&lt;/span&gt;(urllib2.HTTPRedirectHandler):&lt;br&gt;	&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	继承urllib2.HTTPRedirectHandler类，封装http_error_302方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	在自动执行重定向发送新的HTTP请求前提取附在请求头中的cookie，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	提取cookie中模拟登录必需的字段并存储在类成员变量中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;	&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;# 类成员变量，存储以登录状态访问新浪微博必需的cookie字段&lt;/span&gt;&lt;br&gt;	cookie = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;http_error_302&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;self, req, fp, code, msg, headers&lt;/span&gt;):&lt;br&gt;		&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;		添加cookie处理过程，然后调用原http_error_302方法执行自动跳转。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;		&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;		cookie = &lt;span class=&#34;hljs-built_in&#34;&gt;str&lt;/span&gt;(headers[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Set-Cookie&amp;quot;&lt;/span&gt;])&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB=.+?;&amp;#x27;&lt;/span&gt;, cookie) &lt;span class=&#34;hljs-keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;None&lt;/span&gt;:&lt;br&gt;			MyRedirectHandler.cookie = re.search(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;SUB=.+?(?=;)&amp;#x27;&lt;/span&gt;, cookie).group(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&lt;br&gt;		req.add_header(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Cookie&amp;quot;&lt;/span&gt;, cookie)&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; urllib2.HTTPRedirectHandler.http_error_302(&lt;span class=&#34;hljs-variable language_&#34;&gt;self&lt;/span&gt;, req, fp, code, msg, headers)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后一次重定向几乎是一个纯JavaScript页面，做的事情是通过JavaScript跳转向一个地址。实验证明最后这一次跳转对于登录过程并没有什么意义，看起来是故弄玄虚。记得我们刚才重写的重定向处理方法吗？我们在重不断重填cookie的过程中也记录了cookie某个字段的更新情况，最后，我们手里有那个字段的最新值。这个cookie字段正是微博登录验证唯一必需的cookie字段。至于我怎么知道是这个字段，对照实验。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 是不是比weibo.com的登录过程简单多了？&lt;/p&gt;
&lt;h3 id=&#34;3-4-可能的改进&#34;&gt;&lt;a href=&#34;#3-4-可能的改进&#34; class=&#34;headerlink&#34; title=&#34;3.4 可能的改进&#34;&gt;&lt;/a&gt;3.4 可能的改进&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 读者可能发觉了，每次请求的间隔长达几秒，这个爬虫程序与其说是一个高效获取数据的工具，不如说是一个模拟人类操作的脚本而已。简单概括一下就是，爬取页面太慢了。那么如何改进呢？并行化。模拟一个人的访问太慢，那么模拟更多人的访问就好。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 并行改进有几个层次，硬件架构的并行化（多核，流水线，长指令等等）、多线程、多进程和分布式。硬件层次的改进对我们这个爬虫程序意义不大，多线程在别的语言中当然可行，可是据我所知，python中的多线程性能收到了限制，python中应该尽量使用多进程。在多进程的基础上，实现完善的分布式通信，就能做分布式并行了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 有读者可能会想到，直接把程序改成多进程的难道不是相当于加大了请求频率而已？是的，确实是这样，所以进程间应该“完全独立”，一个进程被新浪服务器封禁，不应该影响其他进程。这里就涉及一个问题，新浪服务器封禁的是微博账号还是IP地址呢？经过实验答案是IP地址，实际上，目前大多数服务器的反DDoS机制就是封IP。这就好办了，微博账号申请还相对麻烦，可是免费或收费的IP代理却很容易批量获得。比如&lt;a href=&#34;http://www.xicidaili.com/&#34;&gt;这里&lt;/a&gt;，其中免费的可以直接爬取，肯花钱就能直接获得官方批量代理的接口。当然，广域网分布式具有天然的互异IP，也可以选择使用多台机器，不使用代理。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 全文基本没讲解代码是不是有点过分？这次确实有点偷懒，但是源码里注释写的还是挺详细了。上干货，我把完成的单进程python微博爬虫简单封装了一下，挂在了&lt;a href=&#34;https://github.com/bipedalBit/weibo-crawler&#34;&gt;自家git仓库&lt;/a&gt;。&lt;/p&gt;
</content>
        <category term="python" />
        <category term="网络爬虫" />
        <updated>2015-12-28T13:53:49.000Z</updated>
    </entry>
</feed>
