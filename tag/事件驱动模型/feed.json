{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hacking to the gate! • All posts by \"事件驱动模型\" tag",
    "description": "Bipedal Bit's blog",
    "home_page_url": "https://blog.bipedalbit.net",
    "items": [
        {
            "id": "https://blog.bipedalbit.net/2015/09/30/nginx%E4%B9%8B%E5%9B%9E%E5%A4%B4%E8%A1%A5%E8%AF%BE/",
            "url": "https://blog.bipedalbit.net/2015/09/30/nginx%E4%B9%8B%E5%9B%9E%E5%A4%B4%E8%A1%A5%E8%AF%BE/",
            "title": "nginx之回头补课",
            "date_published": "2015-09-30T04:50:34.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; 最近买了苗泽的那本《Nginx高性能Web服务器详解》，准备系统地学习下Nginx相关的知识。于是在二次科普的过程中发现之前对Nginx的一些理解和认识被刷新细化了。特此发文总结补课。</p>\n<span id=\"more\"></span>\n<h1 id=\"一-Web请求处理机制\"><a href=\"#一-Web请求处理机制\" class=\"headerlink\" title=\"一. Web请求处理机制\"></a>一. Web请求处理机制</h1><h2 id=\"1-1-多进程方式\"><a href=\"#1-1-多进程方式\" class=\"headerlink\" title=\"1.1 多进程方式\"></a>1.1 多进程方式</h2><p>&nbsp;&nbsp;&nbsp; 传统的多进程方式是指：每接到一个客户端请求，就由服务器主进程生成一个子进程来负责与客户端建立连接并进行交互。连接断开子进程即销毁。<br>&nbsp;&nbsp;&nbsp; 优点：<br>&nbsp;&nbsp;&nbsp; ①设计实现比较简单，许多细节被OS管理；<br>&nbsp;&nbsp;&nbsp; ②由于进程间独立，资源独立分配使用，运行时出错风险小，稳定性好；<br>&nbsp;&nbsp;&nbsp; ③OS的进程资源回收机制比较完备，垃圾不会积累。<br>&nbsp;&nbsp;&nbsp; 缺点：<br>&nbsp;&nbsp;&nbsp; 动态生成子进程涉及内存复制等操作，资源、时间开销比较大。发生大并发时对OS资源造成较大压力，将导致OS性能下降。<br>&nbsp;&nbsp;&nbsp; Apache最初的设计架构就采用了多进程方式，但是为了适应大并发的要求，对多进程方式进行了改进。<br>&nbsp;&nbsp;&nbsp; 多进程方式的短板在于动态生成进程时的开销，于是Apache采用了“预生成进程”的工作方式。顾名思义，在还没有接到客户端请求的空闲时间，预先生成若干工作进程。当接到客户端请求，主进程分配子进程与客户端进行交互。连接断开后子进程保留，做开销很小的适当清理后被主进程管理起来等待下一个客户端请求。“预生成进程”在一定程度上缓解了大并发时Web服务器对OS资源造成的压力。</p>\n<h2 id=\"1-2-多线程方式\"><a href=\"#1-2-多线程方式\" class=\"headerlink\" title=\"1.2 多线程方式\"></a>1.2 多线程方式</h2><p>&nbsp;&nbsp;&nbsp; 总体来说多线程方式与多进程方式十分类似，它们的区别在于，Web服务器接到客户端请求后，多线程方式下，主进程将动态派生一个工作线程来与客户端进行交互。<br>&nbsp;&nbsp;&nbsp; 同样是动态生成，OS产生一个线程的开销要远远小于产生一个进程的开销（在实验验证之前，我对此表示怀疑）。<br>&nbsp;&nbsp;&nbsp; 优点：<br>&nbsp;&nbsp;&nbsp; OS资源压力小于多进程方式。<br>&nbsp;&nbsp;&nbsp; 缺点：<br>&nbsp;&nbsp;&nbsp; OS对线程管理的支持甚少，线程调度规则、内存空间管理、线程资源管理都需要开发者自己考虑，增大了开发难度和出错风险。错误也容易在Web服务器持续运行的过程中发生堆积。<br>&nbsp;&nbsp;&nbsp; IIS服务器采用了多线程方式处理Web请求，它的稳定性相对不错。但是IIS Web服务器管理员仍然倾向于定期检查和重启服务器，以消除不可预知的错误堆积或其他隐患。</p>\n<h1 id=\"二-异步-同步、阻塞-非阻塞\"><a href=\"#二-异步-同步、阻塞-非阻塞\" class=\"headerlink\" title=\"二. 异步&#x2F;同步、阻塞&#x2F;非阻塞\"></a>二. 异步&#x2F;同步、阻塞&#x2F;非阻塞</h1><p>&nbsp;&nbsp;&nbsp; 异步与非阻塞，同步与阻塞的概念常被人混淆。事实上，异步&#x2F;同步与阻塞&#x2F;非阻塞发生在网络通信的不同阶段，前者发生在客户端与服务端的通信阶段，与请求处理过程无关；后者发生在请求处理阶段。</p>\n<h2 id=\"2-1-异步-同步\"><a href=\"#2-1-异步-同步\" class=\"headerlink\" title=\"2.1 异步&#x2F;同步\"></a>2.1 异步&#x2F;同步</h2><p>&nbsp;&nbsp;&nbsp; 在网络通信中同步机制指：发送方发送请求后，等到接收方发回响应后才发出下一个请求。发送端与接收端步调一致。异步机制：发送方是否发送请求不受接收方是否作出响应的影响。在接收方，发送方的请求形成队列，依次处理完成后依次进行响应。</p>\n<h2 id=\"2-2-阻塞-非阻塞\"><a href=\"#2-2-阻塞-非阻塞\" class=\"headerlink\" title=\"2.2 阻塞&#x2F;非阻塞\"></a>2.2 阻塞&#x2F;非阻塞</h2><p>&nbsp;&nbsp;&nbsp; 阻塞与非阻塞的对象，通常是网络套接字Socket，其实质是IO操作。阻塞方式中，IO结果返回前，当前线程从运行状态被挂起，直到IO结果返回，才进入就绪状态等待调度以继续运行；非阻塞方式中，线程不会被挂起，如果当前调用无法马上返回结果，一个失败消息将被<strong>立即返回</strong>，并继续执行下一个调用。</p>\n<h2 id=\"2-3-同步阻塞方式\"><a href=\"#2-3-同步阻塞方式\" class=\"headerlink\" title=\"2.3 同步阻塞方式\"></a>2.3 同步阻塞方式</h2><p>&nbsp;&nbsp;&nbsp; 发送方发送请求后一直等待响应；接收方处理请求时的IO操作如果不能马上返回结果则一直等待，返回结果后响应发送方。一个请求周期期间，发送方和接收方不能进行其他工作。比如，超市排队付账时，客户（发送方）向收款员（接收方）付款（发送请求）后需等待找零，期间不能做其他事；收款员要等待收款机返回结果（IO操作）后才能找零（响应请求），期间也只能等待。这种方式实现简单，效率不高。</p>\n<h2 id=\"2-4-同步非阻塞方式\"><a href=\"#2-4-同步非阻塞方式\" class=\"headerlink\" title=\"2.4 同步非阻塞方式\"></a>2.4 同步非阻塞方式</h2><p>&nbsp;&nbsp;&nbsp; 付款后顾客只能等着，收款员可以先干点给商品打包、玩手机之类的杂事。实际中不使用。</p>\n<h2 id=\"2-5-异步阻塞方式\"><a href=\"#2-5-异步阻塞方式\" class=\"headerlink\" title=\"2.5 异步阻塞方式\"></a>2.5 异步阻塞方式</h2><p>&nbsp;&nbsp;&nbsp; 付款后顾客可以干点跟后面顾客聊天、玩手机之类的杂事，收款员只能等着。实际中不使用。</p>\n<h2 id=\"2-6-异步非阻塞方式\"><a href=\"#2-6-异步非阻塞方式\" class=\"headerlink\" title=\"2.6 异步非阻塞方式\"></a>2.6 异步非阻塞方式</h2><p>&nbsp;&nbsp;&nbsp; 发送方发送请求后无需忙等，可以继续其他操作，有响应时再做出对应反应；接收方如果不能马上获得IO结果，将请求挂入请求队列，继续其他工作，返回IO结果时触发一个事件，接收方向发送方作出对应响应。比如，付款后顾客可以干点跟后面顾客聊天、玩手机之类的杂事；收款员完成商品扫码和收款金额输入后可以先干点给商品打包、玩手机之类的杂事，当收款机发出警报声，收款员告诉顾客机器坏了没法收款，当收款机刷新出找零金额，收款员开始找零。</p>\n<h1 id=\"三-Nginx的请求处理机制\"><a href=\"#三-Nginx的请求处理机制\" class=\"headerlink\" title=\"三. Nginx的请求处理机制\"></a>三. Nginx的请求处理机制</h1><p>&nbsp;&nbsp;&nbsp; Nginx使用“预生成进程”或“带进程池”的多进程方式作为请求处理方式，使用异步非阻塞方式作为网络通信方式。Nginx服务器在启动时就由主进程fork（分支）若干固定数目的工作进程（工作进程数通常与CPU核心数线性相关，有助于提高CPU利用率），这些工作进程就是Nginx的进程池。使用多进程方式保证大并发情景下<strong>不增加</strong>OS资源压力，使用异步非阻塞方式保证大并发情景下<strong>不降低</strong>请求处理能力。</p>\n<h1 id=\"四-Nginx事件驱动模型\"><a href=\"#四-Nginx事件驱动模型\" class=\"headerlink\" title=\"四. Nginx事件驱动模型\"></a>四. Nginx事件驱动模型</h1><h2 id=\"4-1-事件驱动模型概述\"><a href=\"#4-1-事件驱动模型概述\" class=\"headerlink\" title=\"4.1 事件驱动模型概述\"></a>4.1 事件驱动模型概述</h2><p>&nbsp;&nbsp;&nbsp; 事件驱动模型一般由事件收集器、事件发送器和事件处理器三个基本单元组成：<br>&nbsp;&nbsp;&nbsp; ①事件收集器：事件收集器一般由一个事件循环程序构成，即无线循环监听各种预设类型的事件；<br>&nbsp;&nbsp;&nbsp; ②事件收集器：事件发送器实际上只是一个事件映射集；<br>&nbsp;&nbsp;&nbsp; ③时间处理器：通常，事件处理器的并发实现有以下三种方式：为请求创建新进程、为请求创建新线程、将请求放入请求队列。第一种方式OS资源开销大；第二种方式开发者需要自己动手完成线程同步，编码复杂；第三种方式编码逻辑复杂，但大多数Web服务器采用第三种方式，基于第三种方式的事件驱动模型逐渐形成了一系列“事件驱动处理库”，又被称为“多路IO复用方法”。</p>\n<h2 id=\"4-2-select库\"><a href=\"#4-2-select库\" class=\"headerlink\" title=\"4.2 select库\"></a>4.2 select库</h2><p>&nbsp;&nbsp;&nbsp; 各个版本的Linux和Windows平台都支持select库，接口基本相同，参数含义略有差异。首先它需要创建3个事件描述符集合（事件映射集），分别可以关注并收集Read、Write、Exception事件描述符（事件收集）。其次调用OS核心的select()函数。然后<strong>轮询</strong>每个事件描述符集中的每个事件描述符，如有事件发生则进行处理。Nginx服务器在编译过程中如未指定其他高性能事件驱动模型库，将自动编译 select 库。</p>\n<h2 id=\"4-3-poll库\"><a href=\"#4-3-poll库\" class=\"headerlink\" title=\"4.3 poll库\"></a>4.3 poll库</h2><p>&nbsp;&nbsp;&nbsp; 限于Linux平台的基本事件驱动模型。poll与select的区别在于，它只创建一个事件描述符集，而每个事件描述符<strong>结构上</strong>分别设置Read、Write、Exception事件，<strong>轮询</strong>时可同时检查三种事件是否发生。同样的，如未指定其他高性能事件驱动模型库，Nginx将自动编译 poll 库。</p>\n<h2 id=\"4-4-epoll\"><a href=\"#4-4-epoll\" class=\"headerlink\" title=\"4.4 epoll\"></a>4.4 epoll</h2><p>&nbsp;&nbsp;&nbsp; epoll是公认优秀的高性能事件驱动模型，Linux 2.6及以上版本可以使用它。epoll是对poll的改进，epoll可以看成是event poll，即基于事件的poll。epoll利用OS调用，让内核来创建事件描述符集，然后监听内核的反馈事件。当内核通过一个事件反馈发生事件的描述符列表再处理这些事件。<br>&nbsp;&nbsp;&nbsp; epoll库在Linux平台上是高效的（因为Linux内核的高效性），它支持一个进程打开大数目的事件描述符，上限是OS支持的最大打开文件数。同时因为它只处理内核上报的“活跃”描述符，epoll的IO效率不随描述符数目的增加线性下降（类似哈希查找之于遍历查找），即它支持大描述符集。</p>\n<h2 id=\"4-5-rtsig模型\"><a href=\"#4-5-rtsig模型\" class=\"headerlink\" title=\"4.5 rtsig模型\"></a>4.5 rtsig模型</h2><p>&nbsp;&nbsp;&nbsp; rtsig即real time signal的缩写，即实时信号。事实上，rtsig调用内核创建一个固定长度上限的事件信号发生队列，等待工作进程依次处理。</p>\n<h2 id=\"4-6-其他事件驱动模型\"><a href=\"#4-6-其他事件驱动模型\" class=\"headerlink\" title=\"4.6 其他事件驱动模型\"></a>4.6 其他事件驱动模型</h2><p>&nbsp;&nbsp;&nbsp; kqueue模型，是用于支持BSD系列平台（FreeBSD、OpenBSD、NetBSD、Mac OS X等）的高效事件驱动模型。也是poll的变种，仰仗OS内核支持条件触发（LT即level-triggered即满足条件触发）和边缘触发（ET即edge-triggered，即状态变换触发）。</p>\n<p>&nbsp;&nbsp;&nbsp; &#x2F;dev&#x2F;poll模型，是用于支持Unix衍生平台（Solaris、HP&#x2F;UX、IRIX、Tru64 UNIX），该模型是Sun公司开发Solaris系列平台时提出的事件驱动机制方案，使用了虚拟的&#x2F;dev&#x2F;poll设备，开发人员监听设备消息获取事件通知。</p>\n<p>&nbsp;&nbsp;&nbsp; eventport模型，是用于支持Solaris10及以上版本平台的高效事件驱动模型。也是Sun公司开发Solaris是提出的方案，可以有效防止内核崩溃等情况。</p>\n<h2 id=\"4-7-IOCP模型\"><a href=\"#4-7-IOCP模型\" class=\"headerlink\" title=\"4.7 IOCP模型\"></a>4.7 IOCP模型</h2><p>&nbsp;&nbsp;&nbsp; 苗泽在书中没有提到，但现在Nginx在windows平台下还支持IOCP模型，虽然我对它不甚了解，但圈内提及Windows平台下的大并发网络，一定会提起IOCP模型，估计也是利用内核优化的事件驱动模型。</p>\n",
            "tags": [
                "nginx",
                "Web请求处理机制",
                "同步/异步",
                "阻塞/非阻塞",
                "事件驱动模型"
            ]
        }
    ]
}