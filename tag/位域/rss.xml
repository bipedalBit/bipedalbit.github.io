<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hacking to the gate! • Posts by &#34;位域&#34; tag</title>
        <link>https://blog.bipedalbit.net</link>
        <description>Bipedal Bit&#39;s blog</description>
        <language>zh-CN</language>
        <pubDate>Tue, 01 Dec 2015 10:53:29 +0800</pubDate>
        <lastBuildDate>Tue, 01 Dec 2015 10:53:29 +0800</lastBuildDate>
        <category>Qt</category>
        <category>signal-slot</category>
        <category>Q_OBJECT</category>
        <category>nginx</category>
        <category>select/poll</category>
        <category>epoll</category>
        <category>ngx_int_t</category>
        <category>rbtree</category>
        <category>C</category>
        <category>static</category>
        <category>内存分布</category>
        <category>sublime</category>
        <category>C++</category>
        <category>makefile</category>
        <category>node.js</category>
        <category>github</category>
        <category>socket.io</category>
        <category>Web请求处理机制</category>
        <category>同步/异步</category>
        <category>阻塞/非阻塞</category>
        <category>事件驱动模型</category>
        <category>BP神经网络</category>
        <category>机器学习</category>
        <category>python</category>
        <category>pybrain</category>
        <category>c++11</category>
        <category>多线程</category>
        <category>ubuntu</category>
        <category>debian</category>
        <category>apt-file</category>
        <category>cin</category>
        <category>cout</category>
        <category>scanf</category>
        <category>printf</category>
        <category>进制转换</category>
        <category>人工神经网络</category>
        <category>人机博弈</category>
        <category>Maxmin</category>
        <category>AlphaBeta</category>
        <category>PVS</category>
        <category>MTD(f)</category>
        <category>位域</category>
        <category>bitset</category>
        <category>vector&amp;lt;bool&amp;gt;</category>
        <category>网络爬虫</category>
        <category>类脑</category>
        <category>codeigniter</category>
        <category>php</category>
        <category>IIS7</category>
        <category>apache</category>
        <category>模拟登录</category>
        <category>proxy</category>
        <category>domain</category>
        <category>DNS</category>
        <category>hexo</category>
        <category>vps</category>
        <category>dropbox</category>
        <category>ffmpeg</category>
        <category>板绘</category>
        <category>sai</category>
        <category>琪露诺</category>
        <category>LLM</category>
        <category>ollama</category>
        <category>open-webui</category>
        <category>oneapi</category>
        <category>mcpserver</category>
        <category>NAS</category>
        <category>minio</category>
        <category>CDN</category>
        <category>waline</category>
        <item>
            <guid isPermalink="true">https://blog.bipedalbit.net/2015/12/01/C-%E7%9A%84%E4%BD%8D%E4%BC%98%E5%8C%96/</guid>
            <title>C++的位优化</title>
            <link>https://blog.bipedalbit.net/2015/12/01/C-%E7%9A%84%E4%BD%8D%E4%BC%98%E5%8C%96/</link>
            <category>C++</category>
            <category>位域</category>
            <category>bitset</category>
            <category>vector&amp;lt;bool&amp;gt;</category>
            <pubDate>Tue, 01 Dec 2015 10:53:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前的中国象棋初版重在实现，老实说不论是时空效率还是健壮性都不太拿得出手，于是导师要求继续优化改进。考虑和调查过后，时间效率上可以借助之前设想的并行计算得到小幅优化，此外使用类似bool数组的手段也可以在走法生成器中小幅优化边界判断过程，最重要的时间效率优化手段是把博弈机改造成查表器，即以查表为主博弈为辅改变重心。以上都是时间效率优化，这篇文中暂且不展开，我的中国象棋初版在搜索深度大时（大于等于４层）开始出现程序崩溃的现象，暴露了空间效率问题。作为空间效率优化的铺垫，这次我来做个C++位优化的自科普。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关于空间效率优化，从前顶多考虑到基本变量类型选择的程度，然而C++提供了一些更精细的特性，供程序员进行位级别的内存微操——位域、bitset、vector&amp;lt;bool&amp;gt;。&lt;/p&gt;
&lt;h1 id=&#34;1-位域&#34;&gt;&lt;a href=&#34;#1-位域&#34; class=&#34;headerlink&#34; title=&#34;1 位域&#34;&gt;&lt;/a&gt;1 位域&lt;/h1&gt;&lt;h2 id=&#34;1-1-字节对齐&#34;&gt;&lt;a href=&#34;#1-1-字节对齐&#34; class=&#34;headerlink&#34; title=&#34;1.1 字节对齐&#34;&gt;&lt;/a&gt;1.1 字节对齐&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 介绍位域之前，还需要做一点铺垫。业界C&amp;#x2F;C++面试、笔试题中，经常考到结构体的字节对齐问题。比如，可能会问下面两个结构体分别占多大内存：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s2&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;sizeof(s1)&lt;/code&gt;和&lt;code&gt;sizeof(s2)&lt;/code&gt;分别为56字节和40字节。先不管为什么装着同样变量的结构体占用的内存大小会不同，如果结构体中变量紧密排列，应该占多大内存？ａ：1字节，ｂ：4字节，ｃ：9字节，ｄ：2字节，ｅ：4字节，ｆ：8字节，ｇ：8字节，共36字节。显然这些变量实际上不是紧密排列的，存在一些对齐、填充字节的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效对齐值默认为结构体最宽&lt;em&gt;基本类型&lt;/em&gt;成员的大小，注意结构体的结构体成员必须到内部寻找基本类型成员变量计算有效对齐值；&lt;/li&gt;
&lt;li&gt;结构体变量的首地址能够被其有效对齐值所整除；&lt;/li&gt;
&lt;li&gt;结构体每个成员相对于结构体首地址的偏移量都是其本身大小的整数倍，如有需要编译器会在成员之间加上填充字节；&lt;/li&gt;
&lt;li&gt;结构体的总大小为结构体有效对齐值的整数倍，如有需要编译器会在最末一个成员之后加上填充字节；&lt;/li&gt;
&lt;li&gt;存在指定对齐值（&lt;code&gt;#pragma pack (value)&lt;/code&gt;中的value）时，&lt;code&gt;有效对齐值 = min&amp;#123;默认对齐值, 指定对齐值&amp;#125;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 至于为什么要做字节对齐，这与CPU取数方式有关，尤其与CPU与内存间数据总线宽度（现在除了单片机通常为32位）有关。因为数据总线宽度是硬件相关，所以一次取数的位数是固定的，假设总线宽度32位，那么一次取数的数据大小就为4字节，那么CPU读取内存数据就将以内存首地址为基址，以4个字节为偏移量单位。如果结构体中有一个char型和一个int型变量，紧密排列存储在内存中，读char型变量时照样取了结构体的前4个字节，其中高8位的哪个字节是存储着char型变量，会经过一些位运算后被提取出来（比如按位右移24位，这仅仅是猜测），到此为止看不出什么不好的。可是当读int型变量时问题就来了，CPU无法一次读取到整个int变量了，原因前面提到了：&lt;em&gt;CPU读取内存数据就将以内存首地址为基址，以4个字节为偏移量单位&lt;/em&gt;。经过两次取数才能获得被分割在两个字（32位内存单位）中完整的int型变量，这还不算完，还要分别从两个字中提取恰当的位并进行拼接，这很浪费时间。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 按特定规则进行字节对齐后，虽然浪费了一些填充字节的内存空间，情况还是好多了。以s1为例，有效对齐值是double型和long long型的8字节即两个字，这里称其为一个对齐空间，装填a（填充7个字节），装填f，装填b（填充4个字节），装填g，装填c（一个对齐空间内放不下，第二个空间中也放了1个字节，填充7个字节），装填e，装填d，结构体整体填充2字节，填满对齐空间的整数倍。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理也可求得s2的内存占用，至于两个结构体的内存占用不一样的原因，是它们的成员变量排列顺序不同，而结构体给成员变量分配内存的顺序与定义变量的顺序相同。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当指定对齐值小于默认对齐值，可令结构体的成员变量排列更紧密，更省空间，但可能降低取数效率。特别的，当指定对齐值为1，结构体成员变量完全紧密排列。&lt;/p&gt;
&lt;h2 id=&#34;1-2-位域与其利弊&#34;&gt;&lt;a href=&#34;#1-2-位域与其利弊&#34; class=&#34;headerlink&#34; title=&#34;1.2 位域与其利弊&#34;&gt;&lt;/a&gt;1.2 位域与其利弊&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不管是为数据结构的成员变量设计合适的排列顺序，还是指定合适的字节对齐值，都是在字节的层次上优化程序空间效率。而使用位域，可以在位的层次上优化程序空间效率。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 还是以1.1节中的s1为例，只在字节层面上优化，以不损失时间效率为前提，最佳策略如下：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 实际上就是保证按32位字（4字节）对齐，变量按大小降序排列。此时的&lt;code&gt;sizeof(s1)&lt;/code&gt;为36字节，空间开销等同变量成员紧密排列，时间效率没有受到影响。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下面这种写法不知读者见过没有：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack(4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;s1&lt;/span&gt;&lt;br&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;double&lt;/span&gt; f;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; g: &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; b: &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; e;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt; d;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; a;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;char&lt;/span&gt; c[&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;];&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;#&lt;span class=&#34;hljs-keyword&#34;&gt;pragma&lt;/span&gt; pack()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 对这样定义的结构体s1，&lt;code&gt;sizeof(s1)&lt;/code&gt;是28字节。变量b、g后面的‘:’和数字就是位域的描述方式。位域的作用是把一些用不到当前类型变量中所有位的变量做进一步压缩，比如这里的s1结构体中的g变量，原来占用64位，使用位域压缩后g变量只使用原内存空间的高21位，填充3位补满3个字节后，原long long变量的后5个字节就可以自由分配了；b变量，原来占用32位，使用位域压缩后b变量只使用原内存空间的高7位，填充1位填满1个字节后，原int变量的后3个字节的内存空间就可以自由分配了。b、g压缩过后刚好占据4个字节一个32位字，比原来少占８个字节。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是，借由位域压缩技术，C++得以进行位层次的空间效率优化了。然而位域的使用有着诸多限制和缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位域不可以用于浮点型变量的压缩；&lt;/li&gt;
&lt;li&gt;位域压缩有符号数时，由于其存储变量的编码方式是源码而非平常变量的补码，变量符号将可能出现不可预料的状态；&lt;/li&gt;
&lt;li&gt;位域压缩将局部解除变量间原有的的字节对齐规范，即使位域压缩的变量与相邻变量紧密排列，这可能引起取数时间效率的损失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-bitset&#34;&gt;&lt;a href=&#34;#2-bitset&#34; class=&#34;headerlink&#34; title=&#34;2 bitset&#34;&gt;&lt;/a&gt;2 bitset&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这一节我要介绍的是比特集，正如字面意思，它是一种比特的集合的特殊数据结构。位域是C遗留下来的特性，存在很多不完备和妥协的地方,C++中推荐的替换方案之一就是bitset。它的具体使用方法我不想细讲，这里只做个概念介绍，想了解更多可以看&lt;a href=&#34;http://www.cplusplus.com/reference/bitset/bitset/&#34;&gt;标准C++手册&lt;/a&gt;，&lt;del&gt;其实是我困了懒得写&lt;/del&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 比特集维护一个静态定义其长度的比特串，内存占用以系统字长（通常为&lt;em&gt;机器字长&lt;/em&gt;，即CPU中寄存器的位数，即CPU进行数据计算的单位位宽，而非前面提到的数据总线宽度，但机器字长一定是数据总线宽度的整数倍）为单位长度，当然如果读者使用64位的机器却安装32位的系统则是把机器当做32位机使用，每个CPU寄存器只使用一半的位数。比特集可以通过包含‘０’、‘１’的字符串来构造，也可以通过无符号的整型变量来构造。为什么是无符号数？因为比特的集合本来就是逻辑的、离散的，符号在比特集中没有意义。当然如果想用某个逻辑位来作为符号位也随用户喜欢。相应的，比特集也可以转换成‘０’、‘１’字符串或者整型数。理所当然的，比特集类封装了一系列位运算符号和逻辑位操作方法，注意比特集的位操作符号两边都应该是比特集，位移操作符除外。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 也许有读者想了解bitset的内存占用情况，我进行了下面的一系列测试：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//8&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//16&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;160&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//24&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;320&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//40&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;640&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//80&lt;/span&gt;&lt;br&gt;cout &amp;lt;&amp;lt; &lt;span class=&#34;hljs-built_in&#34;&gt;sizeof&lt;/span&gt;(bitset&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;1280&lt;/span&gt;&amp;gt;) &amp;lt;&amp;lt; endl;	&lt;span class=&#34;hljs-comment&#34;&gt;//160&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 测试结果我写在注释里了，可以看到，bitset的存储单位是8个字节，而我的这台笔记本电脑正是64位机器字长的，测试环境是64位的Ubuntu 14.04版本操作系统。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同样的，比特bitset也有它的不足之处，比如它不能再与普通整型数直接进行位运算，且它一经构造，不可以改变长度。至于时间效率，可以充分相信它不比普通整型的同类操作慢。&lt;/p&gt;
&lt;h1 id=&#34;3-vector&#34;&gt;&lt;a href=&#34;#3-vector&#34; class=&#34;headerlink&#34; title=&#34;3 vector&amp;lt;bool&amp;gt;&#34;&gt;&lt;/a&gt;3 vector&amp;lt;bool&amp;gt;&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当我第一次在手册中看见vector&amp;lt;bool&amp;gt;时我并没有留意，虽然也对bool型的vector容器为什么有一套独立的API感到了一丝困惑。后来在查找bitset相关资料时发现有人写了vector&amp;lt;bool&amp;gt;与bitset的比较文章，这才知道，vector&amp;lt;bool&amp;gt;是C++提供的bitset之外的另一种位层次数据结构微操方案，同等长度的两者的内存占用几乎一样。vector&amp;lt;bool&amp;gt;的具体用法读者依旧可以查看&lt;a href=&#34;http://www.cplusplus.com/reference/vector/vector-bool/&#34;&gt;手册&lt;/a&gt;，&lt;del&gt;是的我又偷懒了XDDD&lt;/del&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 既然vector&amp;lt;bool&amp;gt;实现在vector库文件中，想必读者也能猜到它与bitset最大的不同，没错它是可变长的。相应的，作为牺牲，考虑数组与vector的区别，也不难猜到，vector&amp;lt;bool&amp;gt;比bitset慢。首先它的位操作也比bitset少得多，其次vector&amp;lt;bool&amp;gt;中的位不再能够用下标随机存取，而需要使用迭代器来访问。其实比起bitset的变长版本，我觉得说vector&amp;lt;bool&amp;gt;是bool型vector的空间优化版本更合适一些。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上就完成了简单的位层面程序空间效率优化的相关概念引入，下面会继续跟进我的中国象棋的改进版本。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
