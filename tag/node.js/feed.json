{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hacking to the gate! • All posts by \"node.js\" tag",
    "description": "Bipedal Bit's blog",
    "home_page_url": "https://blog.bipedalbit.net",
    "items": [
        {
            "id": "https://blog.bipedalbit.net/2015/09/12/socket-io%E9%82%80%E8%AF%B7%E5%88%B6%E5%B8%A6%E7%99%BB%E5%BD%95%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%AE%9E%E4%BE%8B%E3%80%90DRRR-chat-room%E3%80%91/",
            "url": "https://blog.bipedalbit.net/2015/09/12/socket-io%E9%82%80%E8%AF%B7%E5%88%B6%E5%B8%A6%E7%99%BB%E5%BD%95%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%AE%9E%E4%BE%8B%E3%80%90DRRR-chat-room%E3%80%91/",
            "title": "socket.io邀请制带登录聊天室实例【DRRR-chat-room】",
            "date_published": "2015-09-12T14:44:25.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; <strong>写个博文其实也没什么特别要说的。研究node.js的过程中扩展了socket.io的聊天室demo，仿制了一个动漫DRRR（无头骑士异闻录）中的聊天室。使用邀请制，即注册需要提供邀请码。头一次在GitHub建项目：<a href=\"https://github.com/bipedalBit/DRRR-chat-room\">DRRR-chat-room</a>。下个项目可能是用socket.io做一个真·实时弹幕站，尽请期待。</strong></p>\n",
            "tags": [
                "node.js",
                "github",
                "socket.io"
            ]
        },
        {
            "id": "https://blog.bipedalbit.net/2015/09/06/node-js%E7%9A%84-Cannot-enqueue-Handshake-after-invoking-quit-%E9%94%99%E8%AF%AF/",
            "url": "https://blog.bipedalbit.net/2015/09/06/node-js%E7%9A%84-Cannot-enqueue-Handshake-after-invoking-quit-%E9%94%99%E8%AF%AF/",
            "title": "node.js的'Cannot enqueue Handshake after invoking quit'错误",
            "date_published": "2015-09-06T10:11:25.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; 今天用node.js做无刷新聊天室的时候遇到”Error: Cannot enqueue Handshake after invoking quit.”的问题，在Stack Overflow被点化了。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>    <span class=\"hljs-attr\">getDataFromUserGps</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">callback</span>)<br>    &#123;<br>        connection.<span class=\"hljs-title function_\">connect</span>();<br>        connection.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&quot;SELECT * FROM usergps&quot;</span>,<br>            <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results, fields</span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(err, <span class=\"hljs-literal\">null</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>, results);<br>            &#125;<br>        );<br>        connection.<span class=\"hljs-title function_\">end</span>();<br>    &#125;,<br>    <span class=\"hljs-attr\">loginUser</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">login, pass, callback</span>)<br>    &#123;<br>        connection.<span class=\"hljs-title function_\">connect</span>();<br>        connection.<span class=\"hljs-title function_\">query</span>(<br>            <span class=\"hljs-string\">&quot;SELECT id FROM users WHERE login = ? AND pass = ?&quot;</span>,<br>            [login, pass],<br>            <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results, fields</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(err, <span class=\"hljs-literal\">null</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>, results);<br>            &#125;<br>        );<br>        connection.<span class=\"hljs-title function_\">end</span>();<br>    &#125;,<br>    <span class=\"hljs-attr\">getUserDetails</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">userid, callback</span>)<br>    &#123;<br>        connection.<span class=\"hljs-title function_\">connect</span>();<br>        connection.<span class=\"hljs-title function_\">query</span>(<br>            <span class=\"hljs-string\">&quot;SELECT * FROM userProfilDetails LEFT JOIN tags ON userProfilDetails.userId = tags.userId WHERE userProfilDetails.userid = ?&quot;</span>,<br>            [userid],<br>            <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results, fields</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(err, <span class=\"hljs-literal\">null</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>, results);<br>            &#125;<br>        );<br>        connection.<span class=\"hljs-title function_\">end</span>();<br>    &#125;,<br>    <span class=\"hljs-attr\">addTags</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">userId, tags</span>)<br>    &#123;<br>        connection.<span class=\"hljs-title function_\">connect</span>();<br>        connection.<span class=\"hljs-title function_\">query</span>(<br>            <span class=\"hljs-string\">&quot;INSERT INTO tag (userId, tag) VALUES (?, ?)&quot;</span>,<br>            [userId, tags],<br>            <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results, fields</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;<br>            &#125;<br>        )<br>        connection.<span class=\"hljs-title function_\">end</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp; 一开始运行一切正常，但当我执行第二个&quot;query&quot;的时候，会报这个错：<br>&nbsp;&nbsp;&nbsp;<code>Cannot enqueue Handshake after invoking quit</code><br>&nbsp;&nbsp;&nbsp; 我试过一直不用.end()方法关掉连接，然并卵。<br>&nbsp;&nbsp;&nbsp; 先谢过。<br>&nbsp;&nbsp;&nbsp; Radex</p>\n<p>&nbsp;&nbsp;&nbsp; <strong><span style=\"color:#FF0000;\">那些瞎解答和水贴的我就不翻译了。</span></strong></p>\n<p>&nbsp;&nbsp;&nbsp;根据:<br>&nbsp;&nbsp;&nbsp;Fixing Node Mysql &quot;Error: Cannot enqueue Handshake after invoking quit.&quot;:<br>&nbsp;&nbsp;&nbsp;<a href=\"http://codetheory.in/fixing-node-mysql-error-cannot-enqueue-handshake-after-invoking-quit/\">http://codetheory.in/fixing-node-mysql-error-cannot-enqueue-handshake-after-invoking-quit/</a><br>的<br>&nbsp;&nbsp;&nbsp; <strong>TL;DR</strong> <code>每次关掉连接之后你都需要用createConnection方法创建一个新连接。</code><br>以及<br><strong>&nbsp;&nbsp;&nbsp; Note:</strong> 如果你是在伺服web请求，你就不该在每次请求处理完时关掉连接了。服务器启动时创建一个连接，然后一直用connection&#x2F;client对象查询就好。要处理服务器断开和重连事件时你可以监听错误事件。完整代码：<a target=\"_blank\" href=\"https://github.com/felixge/node-mysql#server-disconnects\">here</a>.<br>又根据:<br>&nbsp;&nbsp;&nbsp; Readme.md - Server disconnects:<br>&nbsp;&nbsp;&nbsp; <a href=\"https://github.com/felixge/node-mysql#server-disconnects\">https://github.com/felixge/node-mysql#server-disconnects</a><br>里边说</p>\n<blockquote>\n<h2>Server disconnects</h2>\n你可能因为网络问题、服务器超时或者服务器挂了而失去与MySQL服务器的连接。 所有这些情况都被视为&quot;fatal error&quot;，而且会有一个错误代码 <code>err.code = 'PROTOCOL_CONNECTION_LOST'</code>。想了解更多可以看看错误处理章节。\n\n<p>处理这些不被期望的连接断开的最佳方式如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleDisconnect</span>(<span class=\"hljs-params\">connection</span>) &#123;<br>    connection.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;error&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (!err.<span class=\"hljs-property\">fatal</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (err.<span class=\"hljs-property\">code</span> !== <span class=\"hljs-string\">&#x27;PROTOCOL_CONNECTION_LOST&#x27;</span>) &#123;<br>          <span class=\"hljs-keyword\">throw</span> err;<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Re-connecting lost connection: &#x27;</span> + err.<span class=\"hljs-property\">stack</span>);<br>        connection = mysql.<span class=\"hljs-title function_\">createConnection</span>(connection.<span class=\"hljs-property\">config</span>);<br>        <span class=\"hljs-title function_\">handleDisconnect</span>(connection);<br>        connection.<span class=\"hljs-title function_\">connect</span>();<br>    &#125;);<br>&#125;<br><br><span class=\"hljs-title function_\">handleDisconnect</span>(connection);<br></code></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp; 如上例所示，重连是通过创建一个新连接的方式达成的，因为连接对象被设计成一挂掉就无法重连。<br>&nbsp;&nbsp;&nbsp; 使用连接池的时候，挂掉的连接会被从连接池中移除并释放空间，新连接请求到来时自动创建一个新连接。</p>\n</blockquote>\n&nbsp;&nbsp;&nbsp; 答题人后面贴了一段自己的自动重连代码，这里我就不贴了。\n\n<p>&nbsp;&nbsp;&nbsp; 回答于2013年5月3日18:58<br>&nbsp;&nbsp;&nbsp; XP1</p>\n<p>&nbsp;&nbsp;&nbsp; 这个回答虽然没被题主采纳，但我和下面跟帖的一致认为这个回答比较好。</br><br>&nbsp;&nbsp;&nbsp; <a href=\"http://stackoverflow.com/questions/14087924/cannot-enqueue-handshake-after-invoking-quit\">原网页</a></p>\n",
            "tags": [
                "node.js"
            ]
        }
    ]
}