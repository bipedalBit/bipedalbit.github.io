{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hacking to the gate! • All posts by \"ffmpeg\" tag",
    "description": "Bipedal Bit's blog",
    "home_page_url": "https://blog.bipedalbit.net",
    "items": [
        {
            "id": "https://blog.bipedalbit.net/2016/05/08/FFmpeg%E6%89%B9%E9%87%8F%E6%8A%93%E5%B8%A7%E8%84%9A%E6%9C%AC/",
            "url": "https://blog.bipedalbit.net/2016/05/08/FFmpeg%E6%89%B9%E9%87%8F%E6%8A%93%E5%B8%A7%E8%84%9A%E6%9C%AC/",
            "title": "FFmpeg批量抓帧脚本",
            "date_published": "2016-05-08T08:29:47.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; 上周一个学姐问我有没有兴趣毕业去她那做图像处理，抛给我个模式识别问题和一段4000+秒的mp4视频。大周末的我正犯五月病，就跟群里大佬问了下视频抓帧用什么合适，知道神奇的FFmpeg后顺手写了个python脚本做一下批量抓帧。至于为什么要用python不直接写shell，因为FFmpeg自带的批量抓帧命令是针对连续时间序列进行的，执行起来特别慢，用python是要做一下时间序列离散化，然后并行处理。</p>\n<span id=\"more\"></span>\n<h3 id=\"FFmpeg\"><a href=\"#FFmpeg\" class=\"headerlink\" title=\"FFmpeg\"></a>FFmpeg</h3><p>&nbsp;&nbsp;&nbsp; 先引用百度百科简单介绍下FFmpeg：</p>\n<blockquote>\n<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频&#x2F;视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多codec都是从头开发的。</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp; 关于FFmpeg的业界地位，有很多视音频播放器是通过给FFmpeg加壳完成的。它是跨平台的，linux、win、mac os下都有发行版。想要安装，可以去<a href=\"http://ffmpeg.org/\">官网</a>看看。关于文档，我找到的总结、教程、手册都比较零散，官方的英语文档又让新手无从看起，这次我只查到够用的资料就放着了，如果读者找到比较全面的实用手册，欢迎留言。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>&nbsp;&nbsp;&nbsp; 我试着直接执行FFmpeg的批量抓帧命令时发现特别慢，几乎总要花费目标视频一半的播放时间。但是单张抓帧，不论时间点在哪里，其实都很快。于是我的思路是把视频的总时长拿出来，然后获得一个均匀分布的时间点集合，最后统统扔给gevent的pool并行抓帧。gevent是python一个著名的coroutine（协程）框架，初衷是处理高并发的网络IO，要安装pip一下就好。思路很简单，脚本也很短，life is short, I choose python!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span><br><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">from</span> commands <span class=\"hljs-keyword\">import</span> getoutput<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">from</span> gevent.pool <span class=\"hljs-keyword\">import</span> Pool <span class=\"hljs-keyword\">as</span>  Gpool<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-comment\"># get arguments</span><br>file_path = <span class=\"hljs-string\">&#x27;&#x27;</span><br>ouput_path = <span class=\"hljs-string\">&#x27;&#x27;</span><br>interval = <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>    file_path = raw_input(<span class=\"hljs-string\">&#x27;Vedio path: &#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> os.path.isfile(file_path):<br>        <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Not a file.&#x27;</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>    ouput_path = raw_input(<span class=\"hljs-string\">&#x27;Output path( current directory for default ) : &#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> ouput_path == <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>        <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">if</span> os.path.exists(ouput_path) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> os.path.isfile(ouput_path):<br>        ouput_path += <span class=\"hljs-string\">&#x27;/&#x27;</span><br>        <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Not a directory.&#x27;</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>    s = raw_input(<span class=\"hljs-string\">&#x27;Snap interval( 1 second for default ) : &#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> s == <span class=\"hljs-string\">&#x27;&#x27;</span>:<br>        interval = <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-keyword\">if</span> re.<span class=\"hljs-keyword\">match</span>(<span class=\"hljs-string\">r&#x27;^[0-9]+(.[0-9]+)&#123;0,1&#125;$&#x27;</span>, s) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:<br>        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Not a number.&#x27;</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        interval = <span class=\"hljs-built_in\">float</span>(s)<br>        <span class=\"hljs-keyword\">break</span><br><br><span class=\"hljs-comment\"># get vedio duration via os.popen with &quot;ffmpeg -i&quot;</span><br>info = getoutput(<span class=\"hljs-string\">&#x27;ffmpeg -i &#x27;</span> + file_path)<br>dur = re.search(<span class=\"hljs-string\">r&#x27;(?&lt;=Duration: ).*?(?=,)&#x27;</span>, info).group(<span class=\"hljs-number\">0</span>).split(<span class=\"hljs-string\">&#x27;:&#x27;</span>)<br>dur = <span class=\"hljs-built_in\">int</span>(dur[<span class=\"hljs-number\">0</span>])*<span class=\"hljs-number\">3600</span> + <span class=\"hljs-built_in\">int</span>(dur[<span class=\"hljs-number\">1</span>])*<span class=\"hljs-number\">60</span> + <span class=\"hljs-built_in\">float</span>(dur[<span class=\"hljs-number\">2</span>])<br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Vedio duration: %.2f seconds.&#x27;</span> % dur<br><br><span class=\"hljs-comment\"># make time stamps pool</span><br>time_stamp_pool = []<br>time_stamp = <span class=\"hljs-number\">0</span><br><span class=\"hljs-keyword\">while</span> time_stamp &lt; dur:<br>    time_stamp_pool.append(time_stamp)<br>    time_stamp += interval<br><br><span class=\"hljs-comment\"># os.system + gevent snap by batch</span><br>gpool = Gpool()<br>snap_cmd = <span class=\"hljs-string\">&#x27;ffmpeg -ss %f -i %s -nostats -loglevel 0 -q:v 2 -f image2 %s%d.jpg&#x27;</span> <span class=\"hljs-comment\"># execute quietly</span><br>n_snap = <span class=\"hljs-built_in\">len</span>(time_stamp_pool)<br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;%d frames to be snapped.&#x27;</span> % n_snap<br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Handling...&#x27;</span><br>time0 = time()<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xrange(n_snap):<br>    gpool.spawn(os.system, snap_cmd % (time_stamp_pool[i], file_path, ouput_path, i))<br>gpool.join()<br>time_cost = time() - time0<br><span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">&#x27;Done in %.2f seconds.&#x27;</span> % time_cost<br></code></pre></td></tr></table></figure>",
            "tags": [
                "python",
                "ffmpeg"
            ]
        }
    ]
}