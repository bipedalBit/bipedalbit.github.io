<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hacking to the gate! • Posts by &#34;static&#34; tag</title>
        <link>https://blog.bipedalbit.net</link>
        <description>Bipedal Bit&#39;s blog</description>
        <language>zh-CN</language>
        <pubDate>Tue, 11 Aug 2015 20:09:08 +0800</pubDate>
        <lastBuildDate>Tue, 11 Aug 2015 20:09:08 +0800</lastBuildDate>
        <category>Qt</category>
        <category>signal-slot</category>
        <category>Q_OBJECT</category>
        <category>nginx</category>
        <category>select/poll</category>
        <category>epoll</category>
        <category>ngx_int_t</category>
        <category>rbtree</category>
        <category>C</category>
        <category>static</category>
        <category>内存分布</category>
        <category>sublime</category>
        <category>C++</category>
        <category>makefile</category>
        <category>node.js</category>
        <category>github</category>
        <category>socket.io</category>
        <category>Web请求处理机制</category>
        <category>同步/异步</category>
        <category>阻塞/非阻塞</category>
        <category>事件驱动模型</category>
        <category>BP神经网络</category>
        <category>机器学习</category>
        <category>python</category>
        <category>pybrain</category>
        <category>c++11</category>
        <category>多线程</category>
        <category>ubuntu</category>
        <category>debian</category>
        <category>apt-file</category>
        <category>cin</category>
        <category>cout</category>
        <category>scanf</category>
        <category>printf</category>
        <category>进制转换</category>
        <category>人工神经网络</category>
        <category>人机博弈</category>
        <category>Maxmin</category>
        <category>AlphaBeta</category>
        <category>PVS</category>
        <category>MTD(f)</category>
        <category>位域</category>
        <category>bitset</category>
        <category>vector&amp;lt;bool&amp;gt;</category>
        <category>网络爬虫</category>
        <category>类脑</category>
        <category>codeigniter</category>
        <category>php</category>
        <category>IIS7</category>
        <category>apache</category>
        <category>模拟登录</category>
        <category>proxy</category>
        <category>domain</category>
        <category>DNS</category>
        <category>hexo</category>
        <category>vps</category>
        <category>dropbox</category>
        <category>ffmpeg</category>
        <category>板绘</category>
        <category>sai</category>
        <category>琪露诺</category>
        <category>LLM</category>
        <category>ollama</category>
        <category>open-webui</category>
        <category>oneapi</category>
        <category>mcpserver</category>
        <item>
            <guid isPermalink="true">https://blog.bipedalbit.net/2015/08/11/C%E8%AF%AD%E8%A8%80%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
            <title>C语言的static关键字</title>
            <link>https://blog.bipedalbit.net/2015/08/11/C%E8%AF%AD%E8%A8%80%E7%9A%84static%E5%85%B3%E9%94%AE%E5%AD%97/</link>
            <category>C</category>
            <category>static</category>
            <category>内存分布</category>
            <pubDate>Tue, 11 Aug 2015 20:09:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; static这个关键字可谓熟悉又陌生，要比较系统地理解它，更好地使用它，需要对它有更加深入的了解。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; C程序一直由下列部分组成：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）正文段——CPU执行的机器指令部分；一个程序只有一个副本；只读，防止程序由于意外事故而修改自身指令。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化数据段（数据段）——在程序中所有赋了初值的全局变量，存放在这里。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）非初始化数据段（bss段）——在程序中没有初始化的全局变量；内核将此段初始化为0。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4）栈——增长方向：自顶向下增长；自动变量以及每次函数调用时所需要保存的信息（返回地址、环境信息）。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5）堆——动态存储分配的内存。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&lt;span style=&#34;color:#000000;&#34;&gt;1.&lt;/span&gt;全局静态变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在全局变量之前加上关键字static，全局变量就被定义成为一个全局静态变量。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）内存中的位置：静态存储区。（静态存储区在整个程序运行期间都存在）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化：未经初始化的全局静态变量会被程序自动初始化为0。（自动对象的值是任意的，除非他被显示初始化）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）作用域：全局静态变量在声明他的文件之外是不可见的。准确地讲从定义之处开始到文件结尾。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 定义全局静态变量的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）不会被其他文件所访问，修改。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）其他文件中可以使用相同名字的变量，不会发生冲突。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&lt;span style=&#34;color:#000000;&#34;&gt;2.&lt;/span&gt;局部静态变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在局部变量之前加上关键字static，局部变量就被定义成为一个局部静态变量。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）内存中的位置：静态存储区。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）初始化：未经初始化的全局静态变量会被程序自动初始化为0。（自动对象的值是任意的，除非他被显示初始化）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3）作用域：作用域仍为局部作用域，当定义它的函数或者语句块结束的时候，作用域随之结束。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&#34;color:#FF0000;&#34;&gt;注：当static用来修饰局部变量的时候，它就改变了局部变量的存储位置，从原来的栈中存放改为静态存储区。但是局部静态变量在离开作用域之后，并没有被销毁，而是仍然驻留在内存当中，直到程序结束，只不过我们不能再对他进行访问。&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当static用来修饰全局变量的时候，它就改变了全局变量的作用域（在声明他的文件之外是不可见的），但是没有改变它的存放位置，还是在静态存储区中。&lt;/p&gt;
&lt;p&gt;3.&lt;span style=&#34;color:#FF0000;&#34;&gt;静态函数&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在函数的返回类型前加上关键字static，函数就被定义成为静态函数。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 函数的定义和声明默认情况下是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 定义静态函数的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1）其他文件中可以定义相同名字的函数，不会发生冲突&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2）静态函数不能被其他文件所用。存储说明符auto，register，extern，static，对应两种存储期：自动存储期和静态存储期。auto和register对应自动存储期。具有自动存储期的变量在进入声明该变量的程序块时被建立，它在该程序块活动时存在，退出该程序块时撤销。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键字extern和static用来说明具有静态存储期的变量和函数。用static声明的局部变量具有静态存储持续期（static storage duration），或静态范围（static extent）。虽然他的值在函数调用之间保持有效，但是其名字的可视性仍限制在其局部域内。静态局部对象在程序执行到该对象的声明处时被首次初始化。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 由于static变量的以上特性，可实现一些特定功能。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 统计次数功能：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 声明函数的一个局部变量，并设为static类型，作为一个计数器，这样函数每次被调用的时候就可以进行计数。这是统计函数被调用次数的最好的办法，因为这个变量是和函数息息相关的，而函数可能在多个不同的地方被调用，所以从调用者的角度来统计比较困难。&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#FF0000;&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用静态函数的好处：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 静态函数会被自动分配在一个一直使用的存储区，直到退出应用程序实例，避免了调用函数时压栈出栈，速度快很多。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 关键字“static”，译成中文就是“静态的”，所以内部函数又称静态函数。但此处“static”的含义不是指存储方式，而是指对函数的作用域仅局限于本文件。使用内部函数的好处是：不同的人编写不同的函数时，不用担心自己定义的函数，是否会与其它文件中的函数同名，因为同名也没有关系。&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
