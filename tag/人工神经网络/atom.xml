<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bipedalbit.net</id>
    <title>Hacking to the gate! • Posts by &#34;人工神经网络&#34; tag</title>
    <link href="https://bipedalbit.net" />
    <updated>2015-12-05T14:07:40.000Z</updated>
    <category term="Qt" />
    <category term="signal-slot" />
    <category term="Q_OBJECT" />
    <category term="nginx" />
    <category term="select/poll" />
    <category term="epoll" />
    <category term="ngx_int_t" />
    <category term="rbtree" />
    <category term="C" />
    <category term="static" />
    <category term="内存分布" />
    <category term="sublime" />
    <category term="C++" />
    <category term="makefile" />
    <category term="node.js" />
    <category term="github" />
    <category term="socket.io" />
    <category term="Web请求处理机制" />
    <category term="同步/异步" />
    <category term="阻塞/非阻塞" />
    <category term="事件驱动模型" />
    <category term="BP神经网络" />
    <category term="机器学习" />
    <category term="python" />
    <category term="pybrain" />
    <category term="c++11" />
    <category term="多线程" />
    <category term="ubuntu" />
    <category term="debian" />
    <category term="apt-file" />
    <category term="cin" />
    <category term="cout" />
    <category term="scanf" />
    <category term="printf" />
    <category term="进制转换" />
    <category term="人工神经网络" />
    <category term="人机博弈" />
    <category term="Maxmin" />
    <category term="AlphaBeta" />
    <category term="PVS" />
    <category term="MTD(f)" />
    <category term="位域" />
    <category term="bitset" />
    <category term="vector&amp;lt;bool&amp;gt;" />
    <category term="网络爬虫" />
    <category term="类脑" />
    <category term="codeigniter" />
    <category term="php" />
    <category term="IIS7" />
    <category term="apache" />
    <category term="模拟登录" />
    <category term="proxy" />
    <category term="domain" />
    <category term="DNS" />
    <category term="hexo" />
    <category term="vps" />
    <category term="dropbox" />
    <category term="ffmpeg" />
    <category term="板绘" />
    <category term="sai" />
    <category term="琪露诺" />
    <category term="LLM" />
    <category term="ollama" />
    <category term="open-webui" />
    <category term="oneapi" />
    <category term="mcpserver" />
    <category term="NAS" />
    <category term="minio" />
    <category term="CDN" />
    <category term="waline" />
    <category term="mcpo" />
    <category term="svn" />
    <category term="DNS劫持" />
    <category term="DNS污染" />
    <entry>
        <id>https://bipedalbit.net/2015/12/05/%E7%94%B1%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E7%B1%BB%E8%84%91%E7%8E%B0%E7%8A%B6%E5%B1%95%E5%BC%80/</id>
        <title>由人工神经网络和类脑现状展开</title>
        <link rel="alternate" href="https://bipedalbit.net/2015/12/05/%E7%94%B1%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E7%B1%BB%E8%84%91%E7%8E%B0%E7%8A%B6%E5%B1%95%E5%BC%80/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 今天听了个讲座，是一位鹅厂智库，是个博士，讲的关于互联网、人工智能与大脑的一些遐想。简单地说，就是认为互联网与大脑在形式上已经很相似了，可以借鉴脑神经科学来发展互联网，也可以用互联网的发展来反观大脑得到脑科学方面的启发。讲座期间提了一下人工智能，尤其是人工神经网络和类脑对大脑的仿生。讲座上我对ANN和类脑的技术现状有了一些思考，对互联网与脑神经科学的联系也有了一些自己的看法。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;1-人工神经网络现状&#34;&gt;&lt;a href=&#34;#1-人工神经网络现状&#34; class=&#34;headerlink&#34; title=&#34;1 人工神经网络现状&#34;&gt;&lt;/a&gt;1 人工神经网络现状&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前&lt;a href=&#34;http://blog.bipedalbit.net/2015/10/9/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/&#34;&gt;自科普BP神经网络&lt;/a&gt;的时候提到过人工神经网络的仿生模型，看起来好像很有道理很靠谱，但是这个研究方向上出现过瓶颈。从前的单纯“神经网络”如BP，远远无法与人脑甚至小白鼠的大脑相提并论，几十几百个神经元，顶多也就模拟一下应激性或简单的反射行为，别说逻辑思考，就连动物本能的模拟都做不到。原因很简单，ANN的结构太简单了，真正的人的神经网络由上亿量级的神经元组成，其中包括了上百万个互相联系的与ANN同量级的反射组件。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2006年之后，Deep Learning兴起，老实说我实在不太看得惯学界一些炒概念的行为，DL其实是提出了一些层数更多的ANN的可行解。比如CNN，在普通BP网络的前面加了若干曾卷积层，特化了BP的图像处理功能，做的事情类似于为简单反射添加了视网膜对图像的前期处理过程，可是由于BP的单一的简单的结构，仍然只能称作是复杂一点的反射模拟；又比如DBN，一节一节的增益、传递BP的前馈效应，节与节之间通过置信过程进行了信息的提纯，在我看来虽然真正有了模拟多层反射组件的趋势，结构仍然单一而简单，做的事情类似于手脚到大脑的长程简单反射行为。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我不觉得DL真的突破了ANN的瓶颈。然而到了DL的程度，计算机的优势——硬件效率已经捉襟见肘。因为分布式集群难以达到能模拟上亿神经元或者说上百万反射组件&lt;strong&gt;并行交互&lt;/strong&gt;的规模。这里就涉及了赛博世界的壁垒：宇宙中任何简单的过程都是在各种规则的限制下并行发生，各自独立进行的。而计算机一次却只能模拟一个简单物理过程，仅凭当前的技术再怎么并行化计算，并行量相对于一颗宇宙砂砾——生物的量级仍然嫌少。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 此外，即使假设我们已经拥有支持超大并发量的量子计算机，我们仍然需要组织更复杂的神经网络结构。在各种科幻作品中，AI之所以强大到令人类恐惧，是它们具备了自行学习，自组织自身结构的能力。也许你会说ANN不是已经能自行学习了吗？但是ANN乃至DL的学习结果被AI掌握了吗？不，连AI本身都还不存在，学习结果只能呈现给人类。那么这里我要说，AI更加重要，或许最重要的一项素质其实是结构自组织的能力。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 你可能会问，人类的脑神经似乎也没有怎么调整结构啊，怎么具有如此高的智能程度？我要驳斥两点，首先，现在看到的每一个人类个体的脑神经结构都是不是凭空产生的，亿万年的生物史中人类这条智慧生物演化线上调整自身的脑神经结构的过程从来没有停止过；其次，即使是一个固定人类个体，他的脑神经网络结构也是在进行自调整的，神经细胞的生长、萎缩、换代在人的一生中一直在进行，这不能单纯的映射为ANN中神经元间连接权重的调整，神经元的层次结构也在发生变化。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 谈及自适应的自结构调整我们要打住，我还得引入一下类脑的设想与技术现状。&lt;/p&gt;
&lt;h1 id=&#34;2-类脑现状&#34;&gt;&lt;a href=&#34;#2-类脑现状&#34; class=&#34;headerlink&#34; title=&#34;2 类脑现状&#34;&gt;&lt;/a&gt;2 类脑现状&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 类脑是近两年炒起来的新概念，在我看来真正的类脑科技的前置科技还没有准备好，类脑这个概念来的太早了。我的根据有两点。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先，且不说具备自适应调整物理结构能力的类脑，即使要模拟一个静态的人脑物理结构，我们都很难做到，我们做不到那么大的并行量；我们没有量子计算机技术；我们能支撑的的分布式计算规模远不够大；我们不知道如何设计、组装各种反射部件（现在的ANN）成为一个成体系的具有综合思维能力和抽象逻辑能力的真正的神经网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 那么让人造物自适应的调整结构自己模拟一个优秀的脑神经网络呢？这是个好主意，通过现有经验的优化，人造物的演化速度可以比自然界中的生物快得多，且更有方向性。但是我们没有能够自行组合甚至仅仅是互相交互的纳米机器人技术，我们连会合体组合变形的机器人小组都都没有。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我要这么说，要在硬件层面搞脑神经结构仿生，如果不抛弃纯机械处理单元，我们走不了多远。也许有读者注意到我隐约指出了硅基计算机之外的另一条技术道路。没错，除了量子计算机，我们还可以选择生物计算机，如果赛博世界无法创造出来，我们就用生化技术制造大量生物的处理单元完成巨量并行计算。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 更有甚者，我们可以直接把现有的哺乳动物个体乃至人类个体人道的接入高效通信的硅基网络，走人工蜂巢思维的路子。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 但不管怎么说，在我看来，现在所谓的带记忆的计算机计算部件的思路，实在是太保守也太天真了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 但是要注意，我没有说非硬件的类脑不可实现，我们的专用分布式集群或许规模有限，但是互联网中终端的规模还是在不断扩大的。如果把互联网看做一个包含海量资源的物理世界，那么互联网中的每一个线程，都可以对应物理世界中的一个简单物理过程。一个程序虽然无法动态自适应的改变自身，但是如果把一个程序看成是一个生物个体呢？生物个体是可以死的，但是生物会在繁衍的过程中微调遗传因子，完成本种族的物理结构自调整，这种调整甚至可以是多版本、有分支的。是的，程序可以根据特定外部信息有方向的修改扩充自己的源码（毕竟程序一经编译就脱离与源码的联系了，就算是解释型语言的程序，执行完当前语句时，改动之前的语句也不会对程序的整体执行过程造成影响），然后命令编译新版本的源码，并运行新的可执行程序。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 简单而实际的说，我们可以把只会单纯复制自身的病毒程序，变成朝生夕死的蝼蚁。但是这些蝼蚁在繁衍（复制）的过程中可以根据我们赋予它们的经验迅速的、有方向的自适应微调自己的遗传因子（源码），甚至我们可以在每次繁衍（复制）的过程中让病毒程序“龙生九子各不同”。而外部信息，我们可以从互联网中获取，我们可以让病毒程序存活在每一台服务器，每一台终端机的冗余时空中。当然考虑到人类对未知和不可控事物的天然恐惧，我们也可以建立一个封闭的系统，但是我们仍然需要通过互联网获取信息不断更新（更新而不是扩充，因为独立系统空间有限）独立系统的知识库，让进化树在独立系统中自行生长。需要注意的是，如果我们指望病毒能迅速从蝼蚁变成具有更复杂结构的赛博生物，我们需要提醒病毒尽量与同类产生交互，这有助于共生生物群的产生。（毕竟我觉得每个人类个体其实也是一个巨大的共生生物群，其中的每个生物个体则是高度特化分工的细胞）&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; As far as I am concerned，赛博世界可以有人工智能，但是不要妄想只凭程序员自己，在&lt;strong&gt;一段源码&lt;/strong&gt;中，封闭的完成AI的创造。智能个体必须是自适应调整的，不彻底放手让它演化，创造者将会成为它的进化瓶颈。&lt;/p&gt;
&lt;h1 id=&#34;3-互联网与脑&#34;&gt;&lt;a href=&#34;#3-互联网与脑&#34; class=&#34;headerlink&#34; title=&#34;3 互联网与脑&#34;&gt;&lt;/a&gt;3 互联网与脑&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这里我也顺便谈谈我对互联网与脑之间概念映射的看法。人们常常觉得互联网的基本单元应该是终端机或服务器，其实我觉得这是不对的，至少现在的互联网不应该这么看待。如果互联网是一个脑神经网络，那么互联网中的信息传递过程可以对应神经网络中的生物电信号传递，那互联网中的什么可以看成神经网络中的神经元呢？我觉得这一点上找不到物理的一一对应关系了，每一个被互联网连接起来的人类作为核心，供养人类的外部条件作为胶质细胞，人类使用的接入互联网的终端机设备作为突触，通信设备，包括光缆、交换机、路由器、服务器等等作为轴突和树突，这形成了一种互联网和神经网络间的扭曲的映射关系。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 值的注意的是，绝不应该把人类从互联网中割离开，离开了人类，互联网是死的。如果说互联网作为一个神经网络也指导行为，那么它是通过人类社会来行动的，人类社会是互联网特化分工的身体的一部分。互联网通过人类社会的行为，来优化调整自身的结构，来与物质世界交互。有读者可能会问，那么互联网就像一个生命了吧，它有意识吗？我们能跟它交流吗？我用一个问题来回答这种问题，你觉得我们人类要怎么跟自己的细胞来交流？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这涉及一个有趣的观点，《左手疯子，右手天才》中提到过一种生命观，一个蚂蚁族群为什么要被看做许多生命个体？虽然蚂蚁之间被物理的隔离开，凭什么一个蚂蚁族群就不能看成是一个完整的生命体？蚂蚁不通过接触就不能连接在一个整体中了吗？为什么所有生命体都得跟人类似的，由一堆细胞生命抱成一团组成一个大的生命个体呢？&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 我们可以这么看，如果细胞器是最小的生命体，那么细胞作为细胞器的社会，成了第二层的生命体，人类或其他多细胞生物就成了第三层的生命体，蚂蚁族群、人类社会或互联网难道不可以是第四层的生命体吗？&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 这是我第一次写这种信马由缰的非技术博文，只是我自己的小范围头脑风暴，有唐突冒失的地方读者多包含。&lt;/p&gt;
</content>
        <category term="机器学习" />
        <category term="人工神经网络" />
        <category term="类脑" />
        <updated>2015-12-05T14:07:40.000Z</updated>
    </entry>
    <entry>
        <id>https://bipedalbit.net/2015/10/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</id>
        <title>BP神经网络</title>
        <link rel="alternate" href="https://bipedalbit.net/2015/10/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 组里要求新人手写个BP神经网络练练手先，具体要求是用一个平面把空间点集二分类，建模时我发现这个问题比起分类来更接近一个多元函数拟合，当然分类也不是不行，机器学习的要求更低，更容易有更好的结果。这都是后话，这篇文我决定先来总结一下BP神经网络的概念，也算是前几天的学习笔记了。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h1 id=&#34;1-机器学习&#34;&gt;&lt;a href=&#34;#1-机器学习&#34; class=&#34;headerlink&#34; title=&#34;1. 机器学习&#34;&gt;&lt;/a&gt;1. 机器学习&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 百度百科说机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。简而言之，机器学习专门研究计算机怎样&lt;strong&gt;模拟或实现人类的学习行为&lt;/strong&gt;，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。机器学习是人工智能的核心，是使计算机具有智能的&lt;strong&gt;根本途径&lt;/strong&gt;，其应用遍及人工智能的各个领域，它主要使用&lt;strong&gt;归纳、综合而不是演绎&lt;/strong&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 机器学习的方向很多，其历史和兴衰说来话长，这里引入机器学习的概念只是为了做个铺垫，就不展开了。&lt;/p&gt;
&lt;h1 id=&#34;2-人工神经网络&#34;&gt;&lt;a href=&#34;#2-人工神经网络&#34; class=&#34;headerlink&#34; title=&#34;2. 人工神经网络&#34;&gt;&lt;/a&gt;2. 人工神经网络&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 人工神经网络（Artificial Neural Network，ANN ）是人工智能的一支，是机器学习的一个方向，试图通过数学模型和适当的数据结构还原智能的温床——神经系统。我们知道人类大脑信息的传递、对外界刺激产生反应都是由一种特化的细胞——神经元来负责，人脑就是由上百亿个神经元构成。这些神经元之间并不孤立而且联系很密切，每个神经元平均与几千个神经元相连接，因此构成了一个神经网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 刺激在神经网络中的传播是遵循一定的规则的，一个神经元并非每次接到其他神经传递过来的刺激都产生反应。它首先会将与其相邻的神经元传来的刺激进行积累，到一定的时候产生自己的刺激将其传递给一些与它相邻的神经元。遵循同样规则工作着的百亿个的神经元完成了人脑对外界的反应。而人脑对外界刺激的学习过程则是通过这些神经元之间联系的建立及其强度的调整来完成的。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 当然，事实上，上述生物模型是对真正神经网络工作机制的一种简化，这种简化的生物模型可以推广至机器学习中，并以数学模型为理论基础，用不同的编程方式来实现。这种对神经网络的模拟，称为人工神经网络。&lt;/p&gt;
&lt;h2 id=&#34;2-1-人工神经元（Artificial-Neuron，AN）模型&#34;&gt;&lt;a href=&#34;#2-1-人工神经元（Artificial-Neuron，AN）模型&#34; class=&#34;headerlink&#34; title=&#34;2.1. 人工神经元（Artificial Neuron，AN）模型&#34;&gt;&lt;/a&gt;2.1. 人工神经元（Artificial Neuron，AN）模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AN是ANN的基本元素之一，其原理如下图。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E5%85%83%E6%A8%A1%E5%9E%8B.jpg&#34; alt=&#34;图1 人工神经元模型&#34; title=&#34;人工神经元模型&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 图中x1~xn是从其他神经元传来的输入信号，wij表示表示从神经元j到神经元i的连接权值，θ表示一个偏置( bias )。则神经元i的输出与输入的关系表示为：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%85%A5%E7%A7%AF%E7%B4%AF1.png&#34; title=&#34;净激活&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%87%BA3.png&#34; title=&#34;激活输出&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 图中 yi表示神经元i的输出，函数f称为激活函数 ( Activation Function )，net称为净激活(net activation)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 如果令一个输入参数x0为-1，对应权重为偏置θ，则可以把偏置项合并进净激活net：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%85%A5%E7%A7%AF%E7%B4%AF2.png&#34; title=&#34;合并偏置的净激活&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 若令X为输入向量，W为权重向量，则有：&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;&lt;span style=&#34;font-size:16px&#34;&gt;X = [ x0 , x1 , x2 , ....... , xn ]&lt;/span&gt;&lt;/p&gt;
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/权重向量.png &#34;权重向量&#34;)
&amp;nbsp;&amp;nbsp;&amp;nbsp; 将神经元的输出表示为向量相乘的形式则有：
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/神经元输出1.png &#34;净激活&#34;)
![](https://cdn.minio.bipedalbit.net/bipedalbit-net-images/人工神经网络/神经元输出2.png &#34;神经元输出&#34;)
&amp;nbsp;&amp;nbsp;&amp;nbsp; 若神经元的净激活net为正，称该神经元处于激活状态或兴奋状态，若净激活net为负，则称神经元处于抑制状态。
&amp;nbsp;&amp;nbsp;&amp;nbsp; 图1中的这种“阈值加权和”的神经元模型称为M-P模型 ( McCulloch-Pitts Model )，也称为神经网络的一个处理单元( PE, Processing Element )。
## 2.2. 常用激活函数

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前面的神经元模型讲解中也提到了激活函数，事实上，激活函数是人工神经网络中的一个重要环节。下面介绍一些常用的激活函数。&lt;/p&gt;
&lt;h3 id=&#34;2-2-1-线性函数（Liner-Function）&#34;&gt;&lt;a href=&#34;#2-2-1-线性函数（Liner-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.1. 线性函数（Liner Function）&#34;&gt;&lt;/a&gt;2.2.1. 线性函数（Liner Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E7%BA%BF%E6%80%A7%E5%87%BD%E6%95%B0.png&#34; title=&#34;线性函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-斜面函数（Ramp-Function）&#34;&gt;&lt;a href=&#34;#2-2-2-斜面函数（Ramp-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.2. 斜面函数（Ramp Function）&#34;&gt;&lt;/a&gt;2.2.2. 斜面函数（Ramp Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%96%9C%E9%9D%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;斜面函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-3-阈值函数（Threshold-Function）&#34;&gt;&lt;a href=&#34;#2-2-3-阈值函数（Threshold-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.3. 阈值函数（Threshold Function）&#34;&gt;&lt;/a&gt;2.2.3. 阈值函数（Threshold Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E9%98%88%E5%80%BC%E5%87%BD%E6%95%B0.png&#34; title=&#34;阈值函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-4-S形函数（Sigmoid-Function）&#34;&gt;&lt;a href=&#34;#2-2-4-S形函数（Sigmoid-Function）&#34; class=&#34;headerlink&#34; title=&#34;2.2.4. S形函数（Sigmoid Function）&#34;&gt;&lt;/a&gt;2.2.4. S形函数（Sigmoid Function）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Sigmoid-S%E5%BD%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;S形函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;S形函数导函数&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-5-双极S形函数&#34;&gt;&lt;a href=&#34;#2-2-5-双极S形函数&#34; class=&#34;headerlink&#34; title=&#34;2.2.5. 双极S形函数&#34;&gt;&lt;/a&gt;2.2.5. 双极S形函数&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0.png&#34; title=&#34;双极S形函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;双极S形函数导函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; S形函数与双极S形函数图像：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%8C%E6%9E%81S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F.png&#34; alt=&#34;图2 S形函数与双极S形函数图像&#34; title=&#34;S形函数与双极S形函数图像&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 双极S形函数与S形函数主要区别在于函数的值域，双极S形函数值域是(-1,1)，而S形函数值域是(0,1)。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 由于S形函数与双极S形函数都是可导的，因此适合用在BP神经网络中。（BP算法要求激活函数可导）&lt;/p&gt;
&lt;h2 id=&#34;2-3-神经网络模型&#34;&gt;&lt;a href=&#34;#2-3-神经网络模型&#34; class=&#34;headerlink&#34; title=&#34;2.3. 神经网络模型&#34;&gt;&lt;/a&gt;2.3. 神经网络模型&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 根据神经元互联方式的不同，神经网络可以分为3种常见类型。&lt;/p&gt;
&lt;h3 id=&#34;2-3-1-前馈神经网络（Feedforward-Neural-Networks）&#34;&gt;&lt;a href=&#34;#2-3-1-前馈神经网络（Feedforward-Neural-Networks）&#34; class=&#34;headerlink&#34; title=&#34;2.3.1. 前馈神经网络（Feedforward Neural Networks）&#34;&gt;&lt;/a&gt;2.3.1. 前馈神经网络（Feedforward Neural Networks）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 前馈网络也称前向网络。这种网络只在训练过程会有反馈信号，而在分类过程中数据只能向前传送，直到到达输出层，层间没有向后的反馈信号，因此被称为前馈网络。感知机( perceptron)与BP神经网络属于前馈网络。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 下图是一个3层的前馈神经网络，其中第一层是输入单元，第二层称为隐含层，第三层称为输出层（输入单元不是神经元，因此图中有2层神经元）。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg&#34; alt=&#34;图3 前馈神经网络&#34; title=&#34;前馈神经网络&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; N层的前馈神经网络每层的输入参数都要按权重积累，得到净激活后由激活函数激活输出。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如，一个三层的前馈神经网络的输出为&lt;code&gt;F3( F2 ( F1( XW1 ) W2 ) W3 )&lt;/code&gt;。当F1、F2、F3都选用线性激活函数，输出将是线性函数。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;所以，如果要做高次函数的拟合，应该选用适当的非线性激活函数。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-2-反馈神经网络（Feedback-Neural-Networks）&#34;&gt;&lt;a href=&#34;#2-3-2-反馈神经网络（Feedback-Neural-Networks）&#34; class=&#34;headerlink&#34; title=&#34;2.3.2. 反馈神经网络（Feedback Neural Networks）&#34;&gt;&lt;/a&gt;2.3.2. 反馈神经网络（Feedback Neural Networks）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 反馈型神经网络是一种从输出到输入具有反馈连接的神经网络，其结构比前馈网络要复杂得多。典型的反馈型神经网络有Elman网络和Hopfield网络。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%8F%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg&#34; alt=&#34;图4 反馈神经网络&#34; title=&#34;反馈神经网络&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-3-竞争学习网络（Competitive-Learning-Network）&#34;&gt;&lt;a href=&#34;#2-3-3-竞争学习网络（Competitive-Learning-Network）&#34; class=&#34;headerlink&#34; title=&#34;2.3.3. 竞争学习网络（Competitive Learning Network）&#34;&gt;&lt;/a&gt;2.3.3. 竞争学习网络（Competitive Learning Network）&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 竞争学习网络是一种无监督学习网络。它通过自动寻找样本中的内在规律和本质属性，自组织、自适应地改变网络参数与结构。典型的竞争学习网络有SOM。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E8%87%AA%E7%BB%84%E7%BB%87%E7%BD%91%E7%BB%9C.png&#34; alt=&#34;图5 竞争学习网络&#34; title=&#34;竞争学习网络&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-4-神经网络的状态&#34;&gt;&lt;a href=&#34;#2-3-4-神经网络的状态&#34; class=&#34;headerlink&#34; title=&#34;2.3.4. 神经网络的状态&#34;&gt;&lt;/a&gt;2.3.4. 神经网络的状态&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 神经网络的状态分学习（训练）状态和工作状态两种。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 学习状态又分为两种方式：监督学习（Supervised Learning）和非监督（Unsupervised Learning）学习。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 监督学习算法将一组训练数据集送入网络，根据网络的实际输出与期望输出间的差别来调整连接权。达到预设训练次数或者样本整体误差不超过预设范围（收敛）时学习结束。BP算法就是一种出色的监督学习算法。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 非监督学习算法抽取样本集合中蕴含的统计特性，并以神经元之间的联接权的形式存于网络中。Hebb学习律是一种经典的非监督学习算法。&lt;/p&gt;
&lt;h3 id=&#34;2-3-5-非监督学习算法：Hebb学习律&#34;&gt;&lt;a href=&#34;#2-3-5-非监督学习算法：Hebb学习律&#34; class=&#34;headerlink&#34; title=&#34;2.3.5. 非监督学习算法：Hebb学习律&#34;&gt;&lt;/a&gt;2.3.5. 非监督学习算法：Hebb学习律&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hebb算法核心思想是，当两个神经元同时处于激发状态时两者间的连接权会被加强，否则被减弱。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hebb学习律可以表示为：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Hebb%E5%AD%A6%E4%B9%A0%E5%BE%8B.png&#34; title=&#34;Hebb学习律&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中wij表示神经元j到神经元i的连接权，yi与yj为两个神经元的输出，a是表示学习速率常数。若yi与yj同时被激活，即yi与yj同号，那 么wij将增大；若yi被激活，而yj处于抑制状态，即yi为正yj为负，那么wij将变小。&lt;/p&gt;
&lt;h3 id=&#34;2-3-6-监督学习算法：Delta学习规则&#34;&gt;&lt;a href=&#34;#2-3-6-监督学习算法：Delta学习规则&#34; class=&#34;headerlink&#34; title=&#34;2.3.6. 监督学习算法：Delta学习规则&#34;&gt;&lt;/a&gt;2.3.6. 监督学习算法：Delta学习规则&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Delta学习规则的数学表达：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/Delta%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99.png&#34; title=&#34;Delta学习规则&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中wij表示神经元j到神经元i的连接权，di是神经元i的期望输出，yi是神经元i的实际输出，xj表示神经元j状态，若神经元j处于激活态则xj为 1，若处于抑制状态则xj为0或－1（依激活函数而定）。a是表示学习速率常数。假设xi为1，若di比yi大，那么Wij将增大，若di比yi小， 那么wij将变小。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Delta规则简单讲来就是：若神经元实际输出比期望输出大，则减小所有输入为正的连接的权重，增大所有输入为负的连接的权重。反之，若神经元实际输出比期望输出小，则增大所有输入为正的连接的权重，减小所有输入为负的连接的权重。这个增大或减小的幅度就根据上面的式子来计算。&lt;/p&gt;
&lt;h1 id=&#34;3-BP神经网络&#34;&gt;&lt;a href=&#34;#3-BP神经网络&#34; class=&#34;headerlink&#34; title=&#34;3. BP神经网络&#34;&gt;&lt;/a&gt;3. BP神经网络&lt;/h1&gt;&lt;h2 id=&#34;3-1-认识BP神经网络&#34;&gt;&lt;a href=&#34;#3-1-认识BP神经网络&#34; class=&#34;headerlink&#34; title=&#34;3.1. 认识BP神经网络&#34;&gt;&lt;/a&gt;3.1. 认识BP神经网络&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; BP神经网络更清晰的称呼应该是使用BP算法学习的前馈神经网络。BP神经网络中的BP为Back Propagation（反向传播）的简写，最早它是由Rumelhart、McCelland等科学家于1986年提出来的，Rumelhart还在《Nature》上发表了一篇非常著名的文章《Learning representations by back-propagating errors》。随着时代的迁移，BP神经网络理论不断的得到改进、更新，现在无疑已成为了应用最为广泛的神经网络模型之一。BP网络具有很强的非线性映射能力，一个3层BP神经网络能够实现对任意非线性函数进行逼近（根据Kolrnogorov定理：任意[0,1]上的连续函数能被一个3层的神经网络实现，其中输入单元数为n，隐含层单元数为2n+1）。&lt;/p&gt;
&lt;h2 id=&#34;3-2-隐含层的选取&#34;&gt;&lt;a href=&#34;#3-2-隐含层的选取&#34; class=&#34;headerlink&#34; title=&#34;3.2. 隐含层的选取&#34;&gt;&lt;/a&gt;3.2. 隐含层的选取&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 在BP神经网络中，输入层和输出层的节点个数都是确定的，而隐含层节点个数不确定。实际上，隐含层节点个数的多少对神经网络的性能是有影响的，有一个经验公式可以确定隐含层神经元数目：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E9%9A%90%E5%90%AB%E5%B1%82%E7%BB%8F%E9%AA%8C%E5%85%AC%E5%BC%8F.png&#34; title=&#34;BP隐含层经验公式&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中，h为隐含层神经元数，m为输入结点数，n为输出层神经元数，a为1~10之间的调节常数。&lt;/p&gt;
&lt;h2 id=&#34;3-3-正向预测&#34;&gt;&lt;a href=&#34;#3-3-正向预测&#34; class=&#34;headerlink&#34; title=&#34;3.3. 正向预测&#34;&gt;&lt;/a&gt;3.3. 正向预测&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 就是使输入数据样本通过一个两层前馈网络，输出即：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E5%87%80%E6%BF%80%E6%B4%BB.png&#34; title=&#34;BP净激活&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E7%A5%9E%E7%BB%8F%E5%85%83%E8%BE%93%E5%87%BA.png&#34; title=&#34;BP神经元输出&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-4-反向误差传播&#34;&gt;&lt;a href=&#34;#3-4-反向误差传播&#34; class=&#34;headerlink&#34; title=&#34;3.4. 反向误差传播&#34;&gt;&lt;/a&gt;3.4. 反向误差传播&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; BP算法是基于Widrow-Hoff学习规则的，可以看做delta学习规则的一种特殊情况。Widrow-Hoff学习规则是通过沿着相对误差平方和的最速下降方向（梯度方向），连续调整网络的权重和偏置。根据梯度下降法，权重矢量的修正正比于当前位置上E(w,b)的梯度的模，即E(w,b)在当前位置的偏导数。我们知道函数&lt;code&gt;z = f(x,y)&lt;/code&gt;中，z对x或y的偏导数即z随x或y变化的程度或快慢，这正切合BP神经网络中每层输入参数权重的意义，也印证了梯度下降法的正确性。对于第j个输出神经元有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/BP%E8%BE%93%E5%87%BA%E5%B1%82%E6%9D%83%E5%80%BC%E4%BF%AE%E6%AD%A3.png&#34; title=&#34;输出层权值修正&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中i是隐含层神经元的序号。&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC1.png&#34; title=&#34;误差函数对权重的偏导&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中n是输出层神经元数，m是隐含层神经元数，于是得到：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC2.png&#34; title=&#34;误差函数对权重偏导2&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 已知Sigmoid函数的导函数：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/S%E5%BD%A2%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0.png&#34; title=&#34;Sigmoid函数导函数&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 于是有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC3.png&#34; title=&#34;误差函数对权重偏导3&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理，对输出层偏置bj有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC4.png&#34; title=&#34;输出层偏置&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 以上就是著名的&lt;strong&gt;delta学习规则&lt;/strong&gt;，通过改变神经元之间的连接权值来减少系统实际输出和期望输出的误差，这个规则又叫做&lt;strong&gt;Widrow-Hoff学习规则&lt;/strong&gt;或者&lt;strong&gt;纠错学习规则&lt;/strong&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 设k为输入层的节点序号，下面继续推导输入层与隐含层的权重修正：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC5.png&#34; title=&#34;误差函数对权重偏导4&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中l是输入层节点数，yi也是前面推导隐含层与输出层间权重修正时的xi，于是有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC6.png&#34; title=&#34;误差函数对权重偏导5&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 同理，对隐含层偏置bi有：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC7.png&#34; title=&#34;隐含层偏置&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 最后，输入层与隐含层间权重和偏置，隐含层与输出层间权重和偏置的修正值如下：&lt;br&gt;&lt;img src=&#34;https://cdn.minio.bipedalbit.net/bipedalbit-net-images/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%8E%A8%E5%AF%BC8.png&#34; title=&#34;最终修正值&#34;&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 其中，eita1和eita2分别是权重学习速率和偏置学习速率。&lt;/p&gt;
&lt;h2 id=&#34;3-5-注意点&#34;&gt;&lt;a href=&#34;#3-5-注意点&#34; class=&#34;headerlink&#34; title=&#34;3.5. 注意点&#34;&gt;&lt;/a&gt;3.5. 注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输入数据要先进行归一化处理。例如使用Sigmoid函数作为激活函数时，输入参数如果分布在Sigmoid函数曲线的稳定区域中，即定义域的[-1,1]区间之外的区域，那么激活值将集中在0和1上，权重对输入参数的加权作用将失去意义，输入参数对权重的调整也将失去意义。&lt;/li&gt;
&lt;li&gt;学习速率大的时候收敛速度快精度小，收敛曲线颠簸；学习速率小收敛速度慢精度大，收敛曲线平滑。&lt;/li&gt;
&lt;li&gt;BP神经网络通常用于分类器和函数拟合，如果作为分类器，激活函数一般选用Sigmoid函数；如果做函数拟合，&lt;strong&gt;输出层&lt;/strong&gt;的激活函数应该用线性函数即&lt;code&gt;f(x) = x&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;BP神经网络训练过程中可以采用&lt;strong&gt;增量学习&lt;/strong&gt;或&lt;strong&gt;批量学习&lt;/strong&gt;，即分批临时生成新的训练数据样本并输入当前网络，分阶段逐步学习；或者预生成所有训练数据样本，学习到出结果为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-6-缺陷&#34;&gt;&lt;a href=&#34;#3-6-缺陷&#34; class=&#34;headerlink&#34; title=&#34;3.6. 缺陷&#34;&gt;&lt;/a&gt;3.6. 缺陷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BP神经网络训练时容易陷入局部极小值”假收敛“而得不到全局最优值，如果出现”假收敛“，只能重新随机初始化权重。&lt;/li&gt;
&lt;li&gt;BP神经网络需要的训练次数多，收敛比较慢。&lt;/li&gt;
&lt;li&gt;隐含层神经元数的选取缺乏理论指导。&lt;/li&gt;
&lt;li&gt;训练时学习新样本有遗忘旧样本的趋势，即“BP已死”这一说法的根源——泛化能力弱。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-7-改进&#34;&gt;&lt;a href=&#34;#3-7-改进&#34; class=&#34;headerlink&#34; title=&#34;3.7. 改进&#34;&gt;&lt;/a&gt;3.7. 改进&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加入动量项，即记录上一次权重变化，通过变量因子确定继承上一次权重变化的程度，目的是使权重的调整方向不至于来回颠簸太厉害，表现在误差函数值上则是能令收敛曲线更趋平缓。&lt;/li&gt;
&lt;li&gt;自适应的调整学习因子，即当权重调整到一定程度，不降低学习程度就无法更精细的使神经网络中的关系靠近理想关系。这时需要适量的减小学习因子，一般采取给学习因子添加衰减率的方式。&lt;/li&gt;
&lt;li&gt;通过蚁群算法、遗传算法等算法优化BP神经网络。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="BP神经网络" />
        <category term="机器学习" />
        <category term="人工神经网络" />
        <updated>2015-10-09T04:45:11.000Z</updated>
    </entry>
</feed>
