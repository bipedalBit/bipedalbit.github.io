<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bipedalbit.net</id>
    <title>Hacking to the gate! • Posts by &#34;makefile&#34; tag</title>
    <link href="https://bipedalbit.net" />
    <updated>2015-08-16T14:45:46.000Z</updated>
    <category term="Qt" />
    <category term="signal-slot" />
    <category term="Q_OBJECT" />
    <category term="nginx" />
    <category term="select/poll" />
    <category term="epoll" />
    <category term="ngx_int_t" />
    <category term="rbtree" />
    <category term="C" />
    <category term="static" />
    <category term="内存分布" />
    <category term="sublime" />
    <category term="C++" />
    <category term="makefile" />
    <category term="node.js" />
    <category term="github" />
    <category term="socket.io" />
    <category term="Web请求处理机制" />
    <category term="同步/异步" />
    <category term="阻塞/非阻塞" />
    <category term="事件驱动模型" />
    <category term="BP神经网络" />
    <category term="机器学习" />
    <category term="python" />
    <category term="pybrain" />
    <category term="c++11" />
    <category term="多线程" />
    <category term="ubuntu" />
    <category term="debian" />
    <category term="apt-file" />
    <category term="cin" />
    <category term="cout" />
    <category term="scanf" />
    <category term="printf" />
    <category term="进制转换" />
    <category term="人工神经网络" />
    <category term="人机博弈" />
    <category term="Maxmin" />
    <category term="AlphaBeta" />
    <category term="PVS" />
    <category term="MTD(f)" />
    <category term="位域" />
    <category term="bitset" />
    <category term="vector&amp;lt;bool&amp;gt;" />
    <category term="网络爬虫" />
    <category term="类脑" />
    <category term="codeigniter" />
    <category term="php" />
    <category term="IIS7" />
    <category term="apache" />
    <category term="模拟登录" />
    <category term="proxy" />
    <category term="domain" />
    <category term="DNS" />
    <category term="hexo" />
    <category term="vps" />
    <category term="dropbox" />
    <category term="ffmpeg" />
    <category term="板绘" />
    <category term="sai" />
    <category term="琪露诺" />
    <category term="LLM" />
    <category term="ollama" />
    <category term="open-webui" />
    <category term="oneapi" />
    <category term="mcpserver" />
    <category term="NAS" />
    <category term="minio" />
    <category term="CDN" />
    <category term="waline" />
    <category term="mcpo" />
    <category term="svn" />
    <category term="DNS劫持" />
    <category term="DNS污染" />
    <entry>
        <id>https://bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/</id>
        <title>Linux下Sublime的C/C++多文件程序Makefile+清理+执行配置</title>
        <link rel="alternate" href="https://bipedalbit.net/2015/08/16/Linux%E4%B8%8BSublime%E7%9A%84C-C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A8%8B%E5%BA%8FMakefile-%E6%B8%85%E7%90%86-%E6%89%A7%E8%A1%8C%E9%85%8D%E7%BD%AE/"/>
        <content type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 不自己动手为Sublime配个C&amp;#x2F;C++的通用Makefile脚本吗？不能自动编译链接多文件的编辑器不是好IDE。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 首先我们需要了解几个事实：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.Sublime自带的C&amp;#x2F;C++编译+执行配置使用的是g++编译器，此外这套配置只针对单文件程序。如果要编译多文件，只能采用入口函数所在文件包含需要的源文件而非头文件的方式。比起我们熟悉的几种IDE，这显然无法令人接受。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.Linux下的C&amp;#x2F;C++程序员应该熟悉Makefile，Makefile可以算是一种脚本，执行关键字是一般是make，它可以设计多文件程序的编译+链接过程，生成.o文件和可执行文件。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3.Sublime也有默认的Make配置，但是第一，Sublime没有提供通用的C&amp;#x2F;C++的Makefile脚本（自动组织而非每次手动重写），第二点是个小瑕疵，Sublime提供的Make配置只有编译、链接、清理功能，执行程序需要手动。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前重写红黑树最重要的副产品就是一个通用的C&amp;#x2F;C++的Makefile脚本。每次使用基本只需要改改输出的可执行文件名，或者干脆想个默认文件名以后都不改了，gcc&amp;#x2F;g++编译器的选择是自动的，当然也可以手动配置一些编译选项，这个自己看脚本注释就好。上干货：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;#############################################################
# Generic Makefile for C/C++ Program
#
# License: GPL (General Public License)
# Author:  whyglinux &amp;lt;whyglinux AT gmail DOT com&amp;gt;
# Date:    2006/03/04 (version 0.1)
#          2007/03/24 (version 0.2)
#          2007/04/09 (version 0.3)
#          2007/06/26 (version 0.4)
#          2008/04/05 (version 0.5)
#
# Description:
# ------------
# This is an easily customizable makefile template. The purpose is to
# provide an instant building environment for C/C++ programs.
#
# It searches all the C/C++ source files in the specified directories,
# makes dependencies, compiles and links to form an executable.
#
# Besides its default ability to build C/C++ programs which use only
# standard C/C++ libraries, you can customize the Makefile to build
# those using other libraries. Once done, without any changes you can
# then build programs using the same or less libraries, even if source
# files are renamed, added or removed. Therefore, it is particularly
# convenient to use it to build codes for experimental or study use.
#
# GNU make is expected to use the Makefile. Other versions of makes
# may or may not work.
#
# Usage:
# ------
# 1. Copy the Makefile to your program directory.
# 2. Customize in the &amp;quot;Customizable Section&amp;quot; only if necessary:
#    * to use non-standard C/C++ libraries, set pre-processor or compiler
#      options to &amp;lt;MY_CFLAGS&amp;gt; and linker ones to &amp;lt;MY_LIBS&amp;gt;
#      (See Makefile.gtk+-2.0 for an example)
#    * to search sources in more directories, set to &amp;lt;SRCDIRS&amp;gt;
#    * to specify your favorite program name, set to &amp;lt;PROGRAM&amp;gt;
# 3. Type make to start building your program.
#
# Make Target:
# ------------
# The Makefile provides the following targets to make:
#   $ make           compile and link
#   $ make NODEP=yes compile and link without generating dependencies
#   $ make objs      compile only (no linking)
#   $ make tags      create tags for Emacs editor
#   $ make ctags     create ctags for VI editor
#   $ make clean     clean objects and the executable file
#   $ make distclean clean objects, the executable and dependencies
#   $ make help      get the usage of the makefile
#
#===========================================================================

## Customizable Section: adapt those variables to suit your program.
##==========================================================================

# The pre-processor and compiler options.
MY_CFLAGS =

# The linker options.
MY_LIBS   =

# The pre-processor options used by the cpp (man cpp for more).
# CPPFLAGS  = -Wall

# The options used in linking as well as in any direct use of ld.
LDFLAGS   =

# The directories in which source files reside.
# If not specified, only the current directory will be serached.
SRCDIRS   =

# The executable file name.
# If not specified, current directory name or `a.out&amp;#39; will be used.
PROGRAM   = test

## Implicit Section: change the following only when necessary.
##==========================================================================

# The source file types (headers excluded).
# .c indicates C source files, and others C++ ones.
SRCEXTS = .c .C .cc .cpp .CPP .c++ .cxx .cp

# The header file types.
HDREXTS = .h .H .hh .hpp .HPP .h++ .hxx .hp

# The pre-processor and compiler options.
# Users can override those variables from the command line.
# CFLAGS  = -g -O2
# CXXFLAGS= -g -O2

# The C program compiler.
# CC     = gcc

# The C++ program compiler.
#CXX    = g++

# Un-comment the following line to compile C programs as C++ ones.
#CC     = $(CXX)

# The command used to delete file.
#RM     = rm -f

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

## Stable Section: usually no need to be changed. But you can add more.
##==========================================================================
SHELL   = /bin/sh
EMPTY   =
SPACE   = $(EMPTY) $(EMPTY)
ifeq ($(PROGRAM),)
  CUR_PATH_NAMES = $(subst /,$(SPACE),$(subst $(SPACE),_,$(CURDIR)))
  PROGRAM = $(word $(words $(CUR_PATH_NAMES)),$(CUR_PATH_NAMES))
  ifeq ($(PROGRAM),)
    PROGRAM = a.out
  endif
endif
ifeq ($(SRCDIRS),)
  SRCDIRS = .
endif
SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
HEADERS = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(HDREXTS))))
SRC_CXX = $(filter-out %.c,$(SOURCES))
OBJS    = $(addsuffix .o, $(basename $(SOURCES)))
DEPS    = $(OBJS:.o=.d)

## Define some useful variables.
DEP_OPT = $(shell if `$(CC) --version | grep &amp;quot;GCC&amp;quot; &amp;gt;/dev/null`; then \
                  echo &amp;quot;-MM -MP&amp;quot;; else echo &amp;quot;-M&amp;quot;; fi )
DEPEND      = $(CC)  $(DEP_OPT)  $(MY_CFLAGS) $(CFLAGS) $(CPPFLAGS)
DEPEND.d    = $(subst -g ,,$(DEPEND))
COMPILE.c   = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) -c
COMPILE.cxx = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c
LINK.c      = $(CC)  $(MY_CFLAGS) $(CFLAGS)   $(CPPFLAGS) $(LDFLAGS)
LINK.cxx    = $(CXX) $(MY_CFLAGS) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS)

.PHONY: all objs tags ctags clean distclean help show

# Delete the default suffixes
.SUFFIXES:

all: $(PROGRAM)

# Rules for creating dependency files (.d).
#------------------------------------------

%.d:%.c
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.C
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cc
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cpp
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.CPP
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.c++
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cp
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

%.d:%.cxx
    @echo -n $(dir $&amp;lt;) &amp;gt; $@
    @$(DEPEND.d) $&amp;lt; &amp;gt;&amp;gt; $@

# Rules for generating object files (.o).
#----------------------------------------
objs:$(OBJS)

%.o:%.c
    $(COMPILE.c) $&amp;lt; -o $@

%.o:%.C
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cc
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cpp
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.CPP
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.c++
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cp
    $(COMPILE.cxx) $&amp;lt; -o $@

%.o:%.cxx
    $(COMPILE.cxx) $&amp;lt; -o $@

# Rules for generating the tags.
#-------------------------------------
tags: $(HEADERS) $(SOURCES)
    $(ETAGS) $(ETAGSFLAGS) $(HEADERS) $(SOURCES)

ctags: $(HEADERS) $(SOURCES)
    $(CTAGS) $(CTAGSFLAGS) $(HEADERS) $(SOURCES)

# Rules for generating the executable.
#-------------------------------------
$(PROGRAM):$(OBJS)
ifeq ($(SRC_CXX),)              # C program
    $(LINK.c)   $(OBJS) $(MY_LIBS) -o $@
    @echo Type ./$@ to execute the program.
else                            # C++ program
    $(LINK.cxx) $(OBJS) $(MY_LIBS) -o $@
    @echo Type ./$@ to execute the program.
endif

ifndef NODEP
ifneq ($(DEPS),)
  sinclude $(DEPS)
endif
endif

clean:
    $(RM) $(OBJS) $(PROGRAM) $(PROGRAM).exe

distclean: clean
    $(RM) $(DEPS) TAGS

# Show help.
help:
    @echo &amp;#39;Generic Makefile for C/C++ Programs (gcmakefile) version 0.5&amp;#39;
    @echo &amp;#39;Copyright (C) 2007, 2008 whyglinux &amp;lt;whyglinux@hotmail.com&amp;gt;&amp;#39;
    @echo
    @echo &amp;#39;Usage: make [TARGET]&amp;#39;
    @echo &amp;#39;TARGETS:&amp;#39;
    @echo &amp;#39;  all       (=make) compile and link.&amp;#39;
    @echo &amp;#39;  NODEP=yes make without generating dependencies.&amp;#39;
    @echo &amp;#39;  objs      compile only (no linking).&amp;#39;
    @echo &amp;#39;  tags      create tags for Emacs editor.&amp;#39;
    @echo &amp;#39;  ctags     create ctags for VI editor.&amp;#39;
    @echo &amp;#39;  clean     clean objects and the executable file.&amp;#39;
    @echo &amp;#39;  distclean clean objects, the executable and dependencies.&amp;#39;
    @echo &amp;#39;  show      show variables (for debug use only).&amp;#39;
    @echo &amp;#39;  help      print this message.&amp;#39;
    @echo
    @echo &amp;#39;Report bugs to &amp;lt;whyglinux AT gmail DOT com&amp;gt;.&amp;#39;

# Show variables (for debug use only.)
show:
    @echo &amp;#39;PROGRAM     :&amp;#39; $(PROGRAM)
    @echo &amp;#39;SRCDIRS     :&amp;#39; $(SRCDIRS)
    @echo &amp;#39;HEADERS     :&amp;#39; $(HEADERS)
    @echo &amp;#39;SOURCES     :&amp;#39; $(SOURCES)
    @echo &amp;#39;SRC_CXX     :&amp;#39; $(SRC_CXX)
    @echo &amp;#39;OBJS        :&amp;#39; $(OBJS)
    @echo &amp;#39;DEPS        :&amp;#39; $(DEPS)
    @echo &amp;#39;DEPEND      :&amp;#39; $(DEPEND)
    @echo &amp;#39;COMPILE.c   :&amp;#39; $(COMPILE.c)
    @echo &amp;#39;COMPILE.cxx :&amp;#39; $(COMPILE.cxx)
    @echo &amp;#39;link.c      :&amp;#39; $(LINK.c)
    @echo &amp;#39;link.cxx    :&amp;#39; $(LINK.cxx)

## End of the Makefile ##  Suggestions are welcome  ## All rights reserved ##
##############################################################
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 感谢whyglinux大大！然后上Sublime的配置C C++ Multiple Files.sublime-build：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;&amp;#123;
    &amp;quot;shell_cmd&amp;quot;: &amp;quot;make&amp;quot;,
    &amp;quot;file_regex&amp;quot;: &amp;quot;^(..[^:\n]*):([0-9]+):?([0-9]+)?:? (.*)$&amp;quot;,
    &amp;quot;working_dir&amp;quot;: &amp;quot;$&amp;#123;folder:$&amp;#123;project_path:$&amp;#123;file_path&amp;#125;&amp;#125;&amp;#125;&amp;quot;,
    &amp;quot;selector&amp;quot;: &amp;quot;source.c, source.cpp&amp;quot;,
    &amp;quot;syntax&amp;quot;: &amp;quot;Packages/Makefile/Make.build-language&amp;quot;,
    &amp;quot;keyfiles&amp;quot;: [&amp;quot;Makefile&amp;quot;, &amp;quot;makefile&amp;quot;],

    &amp;quot;variants&amp;quot;:
    [
        &amp;#123;
            &amp;quot;name&amp;quot;: &amp;quot;Clean&amp;quot;,
            &amp;quot;shell_cmd&amp;quot;: &amp;quot;make clean&amp;quot;
        &amp;#125;,
        &amp;#123;
            &amp;quot;name&amp;quot;: &amp;quot;Run&amp;quot;,
            &amp;quot;shell_cmd&amp;quot;: &amp;quot;$&amp;#123;file_path&amp;#125;/$&amp;#123;file_base_name&amp;#125;&amp;quot;
        &amp;#125;
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 你们大可以配成执行时自动弹出终端，这样还能交互。我为了解决Sublime里中文输入法的问题用了gtk2，但是gnome-terminal用的是gtk3，不兼容了。写写控制台程序也不用那么多交互，懒得折腾了，你们随意。&lt;/p&gt;
</content>
        <category term="C" />
        <category term="sublime" />
        <category term="C++" />
        <category term="makefile" />
        <updated>2015-08-16T14:45:46.000Z</updated>
    </entry>
</feed>
