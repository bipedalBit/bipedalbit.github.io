{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hacking to the gate! • All posts by \"cin\" tag",
    "description": "Bipedal Bit's blog",
    "home_page_url": "https://bipedalbit.net",
    "items": [
        {
            "id": "https://bipedalbit.net/2015/10/08/C-cin%E3%80%81cout%E7%9A%84%E4%BC%98%E5%8C%96%E5%8F%8A%E6%B5%8B%E8%AF%84/",
            "url": "https://bipedalbit.net/2015/10/08/C-cin%E3%80%81cout%E7%9A%84%E4%BC%98%E5%8C%96%E5%8F%8A%E6%B5%8B%E8%AF%84/",
            "title": "C++ cin、cout的优化及测评",
            "date_published": "2015-10-08T11:56:46.000Z",
            "content_html": "<p>&nbsp;&nbsp;&nbsp; 参加过ACM比赛和部分自己做过测评的人想必不难发现，C++的cin和cout虽然比起C的scanf和printf来方便很多，但是速度似乎会打很大折扣。于是不求甚解的人们一拍脑门，认定因为C更“底层”，封装程度更低，所以势必比C++的输入输出执行效率更高。然而如若C++有知，恐怕要苦笑了。因为C++正是为了兼容C的输入输出才要在cin、cout中进行指针同步，降低了执行效率。那么可能挽回这种效率损失吗？答案是可以。</p>\n<span id=\"more\"></span>\n<p>&nbsp;&nbsp;&nbsp; C++中提供了解除指针同步的方法：<code>ios::sync_with_stdio(false)</code>。如字面意思，这个方法用来设置输入输出流是否与C的stdio同步。那么解除同步之后能有多大效果呢？毕竟C++确实因为封装程度比C高多多少少损失了一些执行效率。我动手进行了一系列测评，下面是源码。</p>\n<p>&nbsp;&nbsp;&nbsp; 这里我统一对输入输出做了重定向，不论是输入数据来源还是输入数据目标都是“data”文件。所有的输入&#x2F;输出测试都是读或写10^7次字符串与整型数的组合数据，每种输入&#x2F;输出测试都进行10次并取平均耗时作为评估值。</p>\n<p>&nbsp;&nbsp;&nbsp; 首先是C的输入输出。</p>\n<p>&nbsp;&nbsp;&nbsp; scanf.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tfreopen(&quot;data&quot;, &quot;r&quot;, stdin);\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tchar s[20];\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tscanf(&quot;%s&quot;, s);\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tprintf(&quot;average cost: %lfs\\n&quot;, t_sum/testCnt);\n\tfclose(stdin);\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; printf.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tfreopen(&quot;data&quot;, &quot;w&quot;, stdout);\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tprintf(&quot;string%d\\n&quot;, i);\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tprintf(&quot;average cost: %lfs\\n&quot;, t_sum/testCnt);\n\tfclose(stdout);\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 然后是不解锁同步的cin、cout方法。</p>\n<p>&nbsp;&nbsp;&nbsp; cin.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tifstream fin(&quot;data&quot;);\n\tstreambuf *_cin =  cin.rdbuf(fin.rdbuf());\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tstring s;\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tcin &gt;&gt; s;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tcin.rdbuf(_cin);\n\tfin.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; cout.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tofstream fout(&quot;data&quot;);\n\tstreambuf *_cout =  cout.rdbuf(fout.rdbuf());\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;string&quot; &lt;&lt; i &lt;&lt; &#39;\\n&#39;;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tcout.rdbuf(_cout);\n\tfout.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 接下来是解锁同步的cin、cout方法。</p>\n<p>&nbsp;&nbsp;&nbsp; optimized_cin.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tios::sync_with_stdio(false);\n\tifstream fin(&quot;data&quot;);\n\tstreambuf *_cin =  cin.rdbuf(fin.rdbuf());\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tstring s;\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tcin &gt;&gt; s;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tcin.rdbuf(_cin);\n\tfin.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; optimized_cout.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tios::sync_with_stdio(false);\n\tofstream fout(&quot;data&quot;);\n\tstreambuf *_cout =  cout.rdbuf(fout.rdbuf());\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tcout &lt;&lt; &quot;string&quot; &lt;&lt; i &lt;&lt; &#39;\\n&#39;;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tcout.rdbuf(_cout);\n\tfout.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 同时测试C++直接读写文件的方法。</p>\n<p>&nbsp;&nbsp;&nbsp; fin.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tifstream fin(&quot;data&quot;);\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tstring s;\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tfin &gt;&gt; s;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tfin.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; fout.cpp:</p>\n<pre><code class=\"hljs\">#include &lt;iostream&gt;\n#include &lt;ctime&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n\tint testCnt = 10;\n\tint caseCnt = 10000000;\n\tdouble t_sum = 0;\n\tofstream fout(&quot;data&quot;);\n\tfor(int j = 0 ; j &lt; testCnt ; j++)\n\t&#123;\n\t\tlong t_start = clock();\n\t\tfor(int i = 0 ; i &lt; caseCnt ; i++)\n\t\t&#123;\n\t\t\tfout &lt;&lt; &quot;string&quot; &lt;&lt; i &lt;&lt; &#39;\\n&#39;;\n\t\t&#125;\n\t\tlong t_end = clock();\n\t\tt_sum += (double)(t_end - t_start) / CLOCKS_PER_SEC;\n\t&#125;\n\tcout &lt;&lt; &quot;average cost: &quot; &lt;&lt; t_sum/testCnt &lt;&lt; &quot;s\\n&quot;;\n\tfout.close();\n\treturn 0;\n&#125;\n</code></pre>\n<p>&nbsp;&nbsp;&nbsp; 下面是测试结果：</p>\n<table><tr><th></th><th>scanf与printf</th><th>cin与cout</th><th>优化的cin与cout</th>\t<th>fin与fout</th></tr><tr><td>输入</td><td>1.125694s</td><td>2.46949s</td><td>0.950055s</td><td>0.834976s</td></tr><tr><td>输出</td><td>1.304706s</td><td>1.46059s</td><td>1.41783s</td><td>1.41298s</td></tr></table>\n\n<p>&nbsp;&nbsp;&nbsp; 可以看到，事实上，解开同步之前，cin耗时是scanf的两倍还多，cout则比printf略慢。解开枷锁的cin执行效率与直接读文件接近，甚至比C的scanf还要快。至于输出，解开同步的cout执行效率略有提高，同样接近直接写文件，但是确实还是比C的printf略慢一点。</p>\n",
            "tags": [
                "C++",
                "cin",
                "cout",
                "scanf",
                "printf"
            ]
        }
    ]
}